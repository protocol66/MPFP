
ENN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00081998  08006580  08006580  00016580  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08087f18  08087f18  000a0bac  2**0
                  CONTENTS
  4 .ARM          00000000  08087f18  08087f18  000a0bac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08087f18  08087f18  000a0bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08087f18  08087f18  00097f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08087f1c  08087f1c  00097f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bac  20000000  08087f20  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000139b4  20000bac  08088acc  000a0bac  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20014560  08088acc  000a4560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a0bac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000684e  00000000  00000000  000a0bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e1f  00000000  00000000  000a742a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000590  00000000  00000000  000a8250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  000a87e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ab6  00000000  00000000  000a8d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000043b6  00000000  00000000  000c97b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb1b2  00000000  00000000  000cdb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188d1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001734  00000000  00000000  00188d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000bac 	.word	0x20000bac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006564 	.word	0x08006564

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000bb0 	.word	0x20000bb0
 80001c4:	08006564 	.word	0x08006564

080001c8 <STRING_CHK_EQ>:
		pu8_dest[i] = pu8_src[i];
	}
}

__STATIC_INLINE
int STRING_CHK_EQ(char *pc_str1, char *pc_str2) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; (pc_str1[i] != 0) && (pc_str2[i] != 0); i++) {
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
 80001d6:	e00e      	b.n	80001f6 <STRING_CHK_EQ+0x2e>
		if(pc_str1[i] != pc_str2[i]) {
 80001d8:	687a      	ldr	r2, [r7, #4]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	4413      	add	r3, r2
 80001de:	781a      	ldrb	r2, [r3, #0]
 80001e0:	6839      	ldr	r1, [r7, #0]
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	440b      	add	r3, r1
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d001      	beq.n	80001f0 <STRING_CHK_EQ+0x28>
			return 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	e00f      	b.n	8000210 <STRING_CHK_EQ+0x48>
	for(uint32_t i = 0; (pc_str1[i] != 0) && (pc_str2[i] != 0); i++) {
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	3301      	adds	r3, #1
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	4413      	add	r3, r2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d005      	beq.n	800020e <STRING_CHK_EQ+0x46>
 8000202:	683a      	ldr	r2, [r7, #0]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	4413      	add	r3, r2
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d1e4      	bne.n	80001d8 <STRING_CHK_EQ+0x10>
		}
	}
	return 1;
 800020e:	2301      	movs	r3, #1
}
 8000210:	4618      	mov	r0, r3
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022a:	2b00      	cmp	r3, #0
 800022c:	db0b      	blt.n	8000246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 021f 	and.w	r2, r3, #31
 8000234:	4907      	ldr	r1, [pc, #28]	; (8000254 <__NVIC_EnableIRQ+0x38>)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	095b      	lsrs	r3, r3, #5
 800023c:	2001      	movs	r0, #1
 800023e:	fa00 f202 	lsl.w	r2, r0, r2
 8000242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000e100 	.word	0xe000e100

08000258 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	db12      	blt.n	8000290 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	f003 021f 	and.w	r2, r3, #31
 8000270:	490a      	ldr	r1, [pc, #40]	; (800029c <__NVIC_DisableIRQ+0x44>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	095b      	lsrs	r3, r3, #5
 8000278:	2001      	movs	r0, #1
 800027a:	fa00 f202 	lsl.w	r2, r0, r2
 800027e:	3320      	adds	r3, #32
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000284:	f3bf 8f4f 	dsb	sy
}
 8000288:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800028a:	f3bf 8f6f 	isb	sy
}
 800028e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	e000e100 	.word	0xe000e100

080002a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	6039      	str	r1, [r7, #0]
 80002aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	db0a      	blt.n	80002ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	490c      	ldr	r1, [pc, #48]	; (80002ec <__NVIC_SetPriority+0x4c>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	0112      	lsls	r2, r2, #4
 80002c0:	b2d2      	uxtb	r2, r2
 80002c2:	440b      	add	r3, r1
 80002c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002c8:	e00a      	b.n	80002e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	4908      	ldr	r1, [pc, #32]	; (80002f0 <__NVIC_SetPriority+0x50>)
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	f003 030f 	and.w	r3, r3, #15
 80002d6:	3b04      	subs	r3, #4
 80002d8:	0112      	lsls	r2, r2, #4
 80002da:	b2d2      	uxtb	r2, r2
 80002dc:	440b      	add	r3, r1
 80002de:	761a      	strb	r2, [r3, #24]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80002f8:	f3bf 8f4f 	dsb	sy
}
 80002fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <__NVIC_SystemReset+0x24>)
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000306:	4904      	ldr	r1, [pc, #16]	; (8000318 <__NVIC_SystemReset+0x24>)
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <__NVIC_SystemReset+0x28>)
 800030a:	4313      	orrs	r3, r2
 800030c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800030e:	f3bf 8f4f 	dsb	sy
}
 8000312:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000314:	bf00      	nop
 8000316:	e7fd      	b.n	8000314 <__NVIC_SystemReset+0x20>
 8000318:	e000ed00 	.word	0xe000ed00
 800031c:	05fa0004 	.word	0x05fa0004

08000320 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800032a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800032c:	4907      	ldr	r1, [pc, #28]	; (800034c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4313      	orrs	r3, r2
 8000332:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000336:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4013      	ands	r3, r2
 800033c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800033e:	68fb      	ldr	r3, [r7, #12]
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000

08000350 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000358:	4b08      	ldr	r3, [pc, #32]	; (800037c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800035a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800035c:	4907      	ldr	r1, [pc, #28]	; (800037c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4313      	orrs	r3, r2
 8000362:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4013      	ands	r3, r2
 800036c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800036e:	68fb      	ldr	r3, [r7, #12]
}
 8000370:	bf00      	nop
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	40021000 	.word	0x40021000

08000380 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800038a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800038c:	4907      	ldr	r1, [pc, #28]	; (80003ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4313      	orrs	r3, r2
 8000392:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000396:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4013      	ands	r3, r2
 800039c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800039e:	68fb      	ldr	r3, [r7, #12]
}
 80003a0:	bf00      	nop
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80003ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003bc:	4907      	ldr	r1, [pc, #28]	; (80003dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80003c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4013      	ands	r3, r2
 80003cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ce:	68fb      	ldr	r3, [r7, #12]
}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <LL_RCC_MSI_Enable+0x1c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <LL_RCC_MSI_Enable+0x1c>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	6013      	str	r3, [r2, #0]
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000

08000400 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <LL_RCC_MSI_IsReady+0x20>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f003 0302 	and.w	r3, r3, #2
 800040c:	2b02      	cmp	r3, #2
 800040e:	d101      	bne.n	8000414 <LL_RCC_MSI_IsReady+0x14>
 8000410:	2301      	movs	r3, #1
 8000412:	e000      	b.n	8000416 <LL_RCC_MSI_IsReady+0x16>
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	40021000 	.word	0x40021000

08000424 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <LL_RCC_SetSysClkSource+0x24>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	f023 0203 	bic.w	r2, r3, #3
 8000434:	4904      	ldr	r1, [pc, #16]	; (8000448 <LL_RCC_SetSysClkSource+0x24>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4313      	orrs	r3, r2
 800043a:	608b      	str	r3, [r1, #8]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <LL_RCC_GetSysClkSource+0x18>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f003 030c 	and.w	r3, r3, #12
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <LL_RCC_SetAHBPrescaler+0x24>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000478:	4904      	ldr	r1, [pc, #16]	; (800048c <LL_RCC_SetAHBPrescaler+0x24>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4313      	orrs	r3, r2
 800047e:	608b      	str	r3, [r1, #8]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004a0:	4904      	ldr	r1, [pc, #16]	; (80004b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	608b      	str	r3, [r1, #8]
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	40021000 	.word	0x40021000

080004b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80004c8:	4904      	ldr	r1, [pc, #16]	; (80004dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	608b      	str	r3, [r1, #8]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000

080004e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <LL_RCC_PLL_Enable+0x1c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <LL_RCC_PLL_Enable+0x1c>)
 80004ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <LL_RCC_PLL_IsReady+0x24>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800050c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000510:	d101      	bne.n	8000516 <LL_RCC_PLL_IsReady+0x16>
 8000512:	2301      	movs	r3, #1
 8000514:	e000      	b.n	8000518 <LL_RCC_PLL_IsReady+0x18>
 8000516:	2300      	movs	r3, #0
}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000538:	68da      	ldr	r2, [r3, #12]
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800053c:	4013      	ands	r3, r2
 800053e:	68f9      	ldr	r1, [r7, #12]
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	4311      	orrs	r1, r2
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	0212      	lsls	r2, r2, #8
 8000548:	4311      	orrs	r1, r2
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	430a      	orrs	r2, r1
 800054e:	4904      	ldr	r1, [pc, #16]	; (8000560 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000550:	4313      	orrs	r3, r2
 8000552:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000
 8000564:	f9ff808c 	.word	0xf9ff808c

08000568 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000576:	60d3      	str	r3, [r2, #12]
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <LL_FLASH_SetLatency+0x24>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f023 0207 	bic.w	r2, r3, #7
 8000598:	4904      	ldr	r1, [pc, #16]	; (80005ac <LL_FLASH_SetLatency+0x24>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4313      	orrs	r3, r2
 800059e:	600b      	str	r3, [r1, #0]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40022000 	.word	0x40022000

080005b0 <fn_system_clock_config_80MHz>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void fn_system_clock_config_80MHz(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* MSI configuration and activation */
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80005b4:	2004      	movs	r0, #4
 80005b6:	f7ff ffe7 	bl	8000588 <LL_FLASH_SetLatency>
  LL_RCC_MSI_Enable();
 80005ba:	f7ff ff11 	bl	80003e0 <LL_RCC_MSI_Enable>
  while(LL_RCC_MSI_IsReady() != 1) 
 80005be:	bf00      	nop
 80005c0:	f7ff ff1e 	bl	8000400 <LL_RCC_MSI_IsReady>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d1fa      	bne.n	80005c0 <fn_system_clock_config_80MHz+0x10>
  {
  };
  
  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 80005ca:	2300      	movs	r3, #0
 80005cc:	2228      	movs	r2, #40	; 0x28
 80005ce:	2100      	movs	r1, #0
 80005d0:	2001      	movs	r0, #1
 80005d2:	f7ff ffa9 	bl	8000528 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80005d6:	f7ff ff83 	bl	80004e0 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 80005da:	f7ff ffc5 	bl	8000568 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1) 
 80005de:	bf00      	nop
 80005e0:	f7ff ff8e 	bl	8000500 <LL_RCC_PLL_IsReady>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d1fa      	bne.n	80005e0 <fn_system_clock_config_80MHz+0x30>
  {
  };
  
  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ff3c 	bl	8000468 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80005f0:	2003      	movs	r0, #3
 80005f2:	f7ff ff17 	bl	8000424 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) 
 80005f6:	bf00      	nop
 80005f8:	f7ff ff28 	bl	800044c <LL_RCC_GetSysClkSource>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b0c      	cmp	r3, #12
 8000600:	d1fa      	bne.n	80005f8 <fn_system_clock_config_80MHz+0x48>
  {
  };
  
  /* Set APB1 & APB2 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000602:	2000      	movs	r0, #0
 8000604:	f7ff ff44 	bl	8000490 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff ff55 	bl	80004b8 <LL_RCC_SetAPB2Prescaler>

  /* Set systick to 1ms in using frequency set to 80MHz */
  /* This frequency can be calculated through LL RCC macro */
  /* ex: __LL_RCC_CALC_PLLCLK_FREQ(__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, LL_RCC_MSIRANGE_6), 
                                  LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2)*/
  LL_Init1msTick(80000000);
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <fn_system_clock_config_80MHz+0x80>)
 8000610:	f002 f98a 	bl	8002928 <LL_Init1msTick>
  
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(80000000);
 8000614:	4806      	ldr	r0, [pc, #24]	; (8000630 <fn_system_clock_config_80MHz+0x80>)
 8000616:	f002 f995 	bl	8002944 <LL_SetSystemCoreClock>

	rcc_ahb_frequency	= 80e6;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <fn_system_clock_config_80MHz+0x84>)
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <fn_system_clock_config_80MHz+0x80>)
 800061e:	601a      	str	r2, [r3, #0]
	rcc_apb1_frequency	= 80e6;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <fn_system_clock_config_80MHz+0x88>)
 8000622:	4a03      	ldr	r2, [pc, #12]	; (8000630 <fn_system_clock_config_80MHz+0x80>)
 8000624:	601a      	str	r2, [r3, #0]
	rcc_apb2_frequency	= 80e6;
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <fn_system_clock_config_80MHz+0x8c>)
 8000628:	4a01      	ldr	r2, [pc, #4]	; (8000630 <fn_system_clock_config_80MHz+0x80>)
 800062a:	601a      	str	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	04c4b400 	.word	0x04c4b400
 8000634:	20000bc8 	.word	0x20000bc8
 8000638:	20000bcc 	.word	0x20000bcc
 800063c:	20000bd0 	.word	0x20000bd0

08000640 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000640:	b480      	push	{r7}
 8000642:	b08b      	sub	sp, #44	; 0x2c
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	fa93 f3a3 	rbit	r3, r3
 800065a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000666:	2320      	movs	r3, #32
 8000668:	e003      	b.n	8000672 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	fab3 f383 	clz	r3, r3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2103      	movs	r1, #3
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	401a      	ands	r2, r3
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000682:	6a3b      	ldr	r3, [r7, #32]
 8000684:	fa93 f3a3 	rbit	r3, r3
 8000688:	61fb      	str	r3, [r7, #28]
  return result;
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000694:	2320      	movs	r3, #32
 8000696:	e003      	b.n	80006a0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	fab3 f383 	clz	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	431a      	orrs	r2, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	372c      	adds	r7, #44	; 0x2c
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b085      	sub	sp, #20
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	43db      	mvns	r3, r3
 80006ce:	401a      	ands	r2, r3
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	fb01 f303 	mul.w	r3, r1, r3
 80006d8:	431a      	orrs	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	605a      	str	r2, [r3, #4]
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b08b      	sub	sp, #44	; 0x2c
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	fa93 f3a3 	rbit	r3, r3
 8000704:	613b      	str	r3, [r7, #16]
  return result;
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000710:	2320      	movs	r3, #32
 8000712:	e003      	b.n	800071c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fab3 f383 	clz	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	2103      	movs	r1, #3
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	401a      	ands	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800072c:	6a3b      	ldr	r3, [r7, #32]
 800072e:	fa93 f3a3 	rbit	r3, r3
 8000732:	61fb      	str	r3, [r7, #28]
  return result;
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800073e:	2320      	movs	r3, #32
 8000740:	e003      	b.n	800074a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	fab3 f383 	clz	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	431a      	orrs	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000758:	bf00      	nop
 800075a:	372c      	adds	r7, #44	; 0x2c
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000764:	b480      	push	{r7}
 8000766:	b08b      	sub	sp, #44	; 0x2c
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	68da      	ldr	r2, [r3, #12]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa93 f3a3 	rbit	r3, r3
 800077e:	613b      	str	r3, [r7, #16]
  return result;
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800078a:	2320      	movs	r3, #32
 800078c:	e003      	b.n	8000796 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	fab3 f383 	clz	r3, r3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	2103      	movs	r1, #3
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	401a      	ands	r2, r3
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a6:	6a3b      	ldr	r3, [r7, #32]
 80007a8:	fa93 f3a3 	rbit	r3, r3
 80007ac:	61fb      	str	r3, [r7, #28]
  return result;
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d101      	bne.n	80007bc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80007b8:	2320      	movs	r3, #32
 80007ba:	e003      	b.n	80007c4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	fab3 f383 	clz	r3, r3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	431a      	orrs	r2, r3
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	60da      	str	r2, [r3, #12]
}
 80007d2:	bf00      	nop
 80007d4:	372c      	adds	r7, #44	; 0x2c
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80007de:	b480      	push	{r7}
 80007e0:	b08b      	sub	sp, #44	; 0x2c
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	6a1a      	ldr	r2, [r3, #32]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	fa93 f3a3 	rbit	r3, r3
 80007f8:	613b      	str	r3, [r7, #16]
  return result;
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000804:	2320      	movs	r3, #32
 8000806:	e003      	b.n	8000810 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fab3 f383 	clz	r3, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	210f      	movs	r1, #15
 8000814:	fa01 f303 	lsl.w	r3, r1, r3
 8000818:	43db      	mvns	r3, r3
 800081a:	401a      	ands	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	fa93 f3a3 	rbit	r3, r3
 8000826:	61fb      	str	r3, [r7, #28]
  return result;
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000832:	2320      	movs	r3, #32
 8000834:	e003      	b.n	800083e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	fab3 f383 	clz	r3, r3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	431a      	orrs	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800084c:	bf00      	nop
 800084e:	372c      	adds	r7, #44	; 0x2c
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000858:	b480      	push	{r7}
 800085a:	b08b      	sub	sp, #44	; 0x2c
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	0a1b      	lsrs	r3, r3, #8
 800086c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	fa93 f3a3 	rbit	r3, r3
 8000874:	613b      	str	r3, [r7, #16]
  return result;
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d101      	bne.n	8000884 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000880:	2320      	movs	r3, #32
 8000882:	e003      	b.n	800088c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fab3 f383 	clz	r3, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	210f      	movs	r1, #15
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	401a      	ands	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	fa93 f3a3 	rbit	r3, r3
 80008a4:	61fb      	str	r3, [r7, #28]
  return result;
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80008b0:	2320      	movs	r3, #32
 80008b2:	e003      	b.n	80008bc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	fab3 f383 	clz	r3, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	431a      	orrs	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80008ca:	bf00      	nop
 80008cc:	372c      	adds	r7, #44	; 0x2c
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	619a      	str	r2, [r3, #24]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <fn_setup_gpio>:
*	Impact:			changes gpio config
*
* 	Description:
* 		This function setups a gpio using the struct above
*/
void fn_setup_gpio(const GPIO *gpio)	{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	/*enables clock for gpio port*/
	switch ((uint32_t)gpio->pst_port)	{
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a40      	ldr	r2, [pc, #256]	; (8000a20 <fn_setup_gpio+0x110>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d039      	beq.n	8000996 <fn_setup_gpio+0x86>
 8000922:	4a3f      	ldr	r2, [pc, #252]	; (8000a20 <fn_setup_gpio+0x110>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d876      	bhi.n	8000a16 <fn_setup_gpio+0x106>
 8000928:	4a3e      	ldr	r2, [pc, #248]	; (8000a24 <fn_setup_gpio+0x114>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d02f      	beq.n	800098e <fn_setup_gpio+0x7e>
 800092e:	4a3d      	ldr	r2, [pc, #244]	; (8000a24 <fn_setup_gpio+0x114>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d870      	bhi.n	8000a16 <fn_setup_gpio+0x106>
 8000934:	4a3c      	ldr	r2, [pc, #240]	; (8000a28 <fn_setup_gpio+0x118>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d025      	beq.n	8000986 <fn_setup_gpio+0x76>
 800093a:	4a3b      	ldr	r2, [pc, #236]	; (8000a28 <fn_setup_gpio+0x118>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d86a      	bhi.n	8000a16 <fn_setup_gpio+0x106>
 8000940:	4a3a      	ldr	r2, [pc, #232]	; (8000a2c <fn_setup_gpio+0x11c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d01b      	beq.n	800097e <fn_setup_gpio+0x6e>
 8000946:	4a39      	ldr	r2, [pc, #228]	; (8000a2c <fn_setup_gpio+0x11c>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d864      	bhi.n	8000a16 <fn_setup_gpio+0x106>
 800094c:	4a38      	ldr	r2, [pc, #224]	; (8000a30 <fn_setup_gpio+0x120>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d011      	beq.n	8000976 <fn_setup_gpio+0x66>
 8000952:	4a37      	ldr	r2, [pc, #220]	; (8000a30 <fn_setup_gpio+0x120>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d85e      	bhi.n	8000a16 <fn_setup_gpio+0x106>
 8000958:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800095c:	d003      	beq.n	8000966 <fn_setup_gpio+0x56>
 800095e:	4a35      	ldr	r2, [pc, #212]	; (8000a34 <fn_setup_gpio+0x124>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d004      	beq.n	800096e <fn_setup_gpio+0x5e>
		break;
	case (uint32_t)GPIOH:
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
		break;
	default:
		return;
 8000964:	e057      	b.n	8000a16 <fn_setup_gpio+0x106>
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000966:	2001      	movs	r0, #1
 8000968:	f7ff fcf2 	bl	8000350 <LL_AHB2_GRP1_EnableClock>
		break;
 800096c:	e017      	b.n	800099e <fn_setup_gpio+0x8e>
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800096e:	2002      	movs	r0, #2
 8000970:	f7ff fcee 	bl	8000350 <LL_AHB2_GRP1_EnableClock>
		break;
 8000974:	e013      	b.n	800099e <fn_setup_gpio+0x8e>
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000976:	2004      	movs	r0, #4
 8000978:	f7ff fcea 	bl	8000350 <LL_AHB2_GRP1_EnableClock>
		break;
 800097c:	e00f      	b.n	800099e <fn_setup_gpio+0x8e>
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 800097e:	2008      	movs	r0, #8
 8000980:	f7ff fce6 	bl	8000350 <LL_AHB2_GRP1_EnableClock>
		break;
 8000984:	e00b      	b.n	800099e <fn_setup_gpio+0x8e>
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8000986:	2010      	movs	r0, #16
 8000988:	f7ff fce2 	bl	8000350 <LL_AHB2_GRP1_EnableClock>
		break;
 800098c:	e007      	b.n	800099e <fn_setup_gpio+0x8e>
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800098e:	2020      	movs	r0, #32
 8000990:	f7ff fcde 	bl	8000350 <LL_AHB2_GRP1_EnableClock>
		break;
 8000994:	e003      	b.n	800099e <fn_setup_gpio+0x8e>
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000996:	2080      	movs	r0, #128	; 0x80
 8000998:	f7ff fcda 	bl	8000350 <LL_AHB2_GRP1_EnableClock>
		break;
 800099c:	bf00      	nop
		break;
	}

	LL_GPIO_SetPinOutputType(gpio->pst_port, gpio->u32_pin, gpio->u32_type);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6859      	ldr	r1, [r3, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	691b      	ldr	r3, [r3, #16]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f7ff fe85 	bl	80006ba <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinMode(gpio->pst_port, gpio->u32_pin, gpio->u32_mode);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6859      	ldr	r1, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	461a      	mov	r2, r3
 80009be:	f7ff fe3f 	bl	8000640 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinSpeed(gpio->pst_port, gpio->u32_pin, gpio->u32_speed);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6859      	ldr	r1, [r3, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	461a      	mov	r2, r3
 80009d0:	f7ff fe8b 	bl	80006ea <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinPull(gpio->pst_port, gpio->u32_pin, gpio->u32_up_down);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6859      	ldr	r1, [r3, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	461a      	mov	r2, r3
 80009e2:	f7ff febf 	bl	8000764 <LL_GPIO_SetPinPull>
	
	if (gpio->u32_pin <= LL_GPIO_PIN_7)	{
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b80      	cmp	r3, #128	; 0x80
 80009ec:	d809      	bhi.n	8000a02 <fn_setup_gpio+0xf2>
		LL_GPIO_SetAFPin_0_7(gpio->pst_port, gpio->u32_pin, gpio->u32_af);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6859      	ldr	r1, [r3, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	461a      	mov	r2, r3
 80009fc:	f7ff feef 	bl	80007de <LL_GPIO_SetAFPin_0_7>
 8000a00:	e00a      	b.n	8000a18 <fn_setup_gpio+0x108>
	} else {
		LL_GPIO_SetAFPin_8_15(gpio->pst_port, gpio->u32_pin, gpio->u32_af);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6859      	ldr	r1, [r3, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f7ff ff22 	bl	8000858 <LL_GPIO_SetAFPin_8_15>
 8000a14:	e000      	b.n	8000a18 <fn_setup_gpio+0x108>
		return;
 8000a16:	bf00      	nop
	}
}
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	48001c00 	.word	0x48001c00
 8000a24:	48001400 	.word	0x48001400
 8000a28:	48001000 	.word	0x48001000
 8000a2c:	48000c00 	.word	0x48000c00
 8000a30:	48000800 	.word	0x48000800
 8000a34:	48000400 	.word	0x48000400

08000a38 <SET_GPIO_PIN>:
*
* 	Description:
* 		this function uses the gpio struct to set the pin (active high)
*/
__STATIC_INLINE
void SET_GPIO_PIN(const GPIO gpio)	{
 8000a38:	b084      	sub	sp, #16
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	f107 0c08 	add.w	ip, r7, #8
 8000a42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LL_GPIO_SetOutputPin(gpio.pst_port, gpio.u32_pin);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff42 	bl	80008d6 <LL_GPIO_SetOutputPin>
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a5a:	b004      	add	sp, #16
 8000a5c:	4770      	bx	lr

08000a5e <CLEAR_GPIO_PIN>:
*
* 	Description:
* 		this function uses the gpio struct to clear the pin (active high)
*/
__STATIC_INLINE
void CLEAR_GPIO_PIN(const GPIO gpio)	{
 8000a5e:	b084      	sub	sp, #16
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	f107 0c08 	add.w	ip, r7, #8
 8000a68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LL_GPIO_ResetOutputPin(gpio.pst_port, gpio.u32_pin);
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff3d 	bl	80008f2 <LL_GPIO_ResetOutputPin>
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <SET_GPIO_PIN_VAL>:
	return LL_GPIO_ReadInputPort(gpio.pst_port) & gpio.u32_pin;
}


__STATIC_INLINE
void SET_GPIO_PIN_VAL(const GPIO gpio, int val)	{
 8000a84:	b084      	sub	sp, #16
 8000a86:	b590      	push	{r4, r7, lr}
 8000a88:	b085      	sub	sp, #20
 8000a8a:	af04      	add	r7, sp, #16
 8000a8c:	f107 0410 	add.w	r4, r7, #16
 8000a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (val)	{
 8000a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d00c      	beq.n	8000ab4 <SET_GPIO_PIN_VAL+0x30>
		SET_GPIO_PIN(gpio);
 8000a9a:	466c      	mov	r4, sp
 8000a9c:	f107 0320 	add.w	r3, r7, #32
 8000aa0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000aa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aae:	f7ff ffc3 	bl	8000a38 <SET_GPIO_PIN>
	} else {
		CLEAR_GPIO_PIN(gpio);
	}
}
 8000ab2:	e00b      	b.n	8000acc <SET_GPIO_PIN_VAL+0x48>
		CLEAR_GPIO_PIN(gpio);
 8000ab4:	466c      	mov	r4, sp
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac8:	f7ff ffc9 	bl	8000a5e <CLEAR_GPIO_PIN>
}
 8000acc:	bf00      	nop
 8000ace:	3704      	adds	r7, #4
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ad6:	b004      	add	sp, #16
 8000ad8:	4770      	bx	lr

08000ada <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f043 0201 	orr.w	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f023 0201 	bic.w	r2, r3, #1
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <LL_USART_SetTransferDirection>:
  *         @arg @ref LL_USART_DIRECTION_TX
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b089      	sub	sp, #36	; 0x24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	e853 3f00 	ldrex	r3, [r3]
 8000b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	f023 030c 	bic.w	r3, r3, #12
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	69fa      	ldr	r2, [r7, #28]
 8000b40:	61ba      	str	r2, [r7, #24]
 8000b42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b44:	6979      	ldr	r1, [r7, #20]
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	e841 2300 	strex	r3, r2, [r1]
 8000b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1e7      	bne.n	8000b24 <LL_USART_SetTransferDirection+0xa>
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <LL_USART_SetParity>:
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	601a      	str	r2, [r3, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <LL_USART_SetDataWidth>:
  *         @arg @ref LL_USART_DATAWIDTH_8B
  *         @arg @ref LL_USART_DATAWIDTH_9B
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	605a      	str	r2, [r3, #4]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	431a      	orrs	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	609a      	str	r2, [r3, #8]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b087      	sub	sp, #28
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c0e:	d11a      	bne.n	8000c46 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	005a      	lsls	r2, r3, #1
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	085b      	lsrs	r3, r3, #1
 8000c18:	441a      	add	r2, r3
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	085b      	lsrs	r3, r3, #1
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000c44:	e00a      	b.n	8000c5c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	085a      	lsrs	r2, r3, #1
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	441a      	add	r2, r3
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	60da      	str	r2, [r3, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	371c      	adds	r7, #28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c78:	2b80      	cmp	r3, #128	; 0x80
 8000c7a:	d101      	bne.n	8000c80 <LL_USART_IsActiveFlag_TXE+0x18>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000ca2:	d101      	bne.n	8000ca8 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cca:	d101      	bne.n	8000cd0 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <LL_USART_IsActiveFlag_REACK+0x1c>
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b089      	sub	sp, #36	; 0x24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	e853 3f00 	ldrex	r3, [r3]
 8000cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f043 0320 	orr.w	r3, r3, #32
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69fa      	ldr	r2, [r7, #28]
 8000cfe:	61ba      	str	r2, [r7, #24]
 8000d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d02:	6979      	ldr	r1, [r7, #20]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	e841 2300 	strex	r3, r2, [r1]
 8000d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1e9      	bne.n	8000ce6 <LL_USART_EnableIT_RXNE+0x8>
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3724      	adds	r7, #36	; 0x24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	e853 3f00 	ldrex	r3, [r3]
 8000d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	f023 0320 	bic.w	r3, r3, #32
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69fa      	ldr	r2, [r7, #28]
 8000d40:	61ba      	str	r2, [r7, #24]
 8000d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d44:	6979      	ldr	r1, [r7, #20]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	e841 2300 	strex	r3, r2, [r1]
 8000d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1e9      	bne.n	8000d28 <LL_USART_DisableIT_RXNE+0x8>
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b089      	sub	sp, #36	; 0x24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3308      	adds	r3, #8
 8000d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	e853 3f00 	ldrex	r3, [r3]
 8000d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3308      	adds	r3, #8
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	61ba      	str	r2, [r7, #24]
 8000d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d8a:	6979      	ldr	r1, [r7, #20]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	e841 2300 	strex	r3, r2, [r1]
 8000d92:	613b      	str	r3, [r7, #16]
   return(result);
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1e7      	bne.n	8000d6a <LL_USART_EnableDMAReq_RX+0x8>
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	3724      	adds	r7, #36	; 0x24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_USART_DisableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3308      	adds	r3, #8
 8000db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	e853 3f00 	ldrex	r3, [r3]
 8000dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3308      	adds	r3, #8
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	61ba      	str	r2, [r7, #24]
 8000dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000dd0:	6979      	ldr	r1, [r7, #20]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	e841 2300 	strex	r3, r2, [r1]
 8000dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e7      	bne.n	8000db0 <LL_USART_DisableDMAReq_RX+0x8>
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000e1e:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <LL_DMA_EnableChannel+0x40>)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <LL_DMA_EnableChannel+0x40>)
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	440a      	add	r2, r1
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	4611      	mov	r1, r2
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	440a      	add	r2, r1
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6013      	str	r3, [r2, #0]
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	08006734 	.word	0x08006734

08000e54 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000e62:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <LL_DMA_DisableChannel+0x40>)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <LL_DMA_DisableChannel+0x40>)
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	440a      	add	r2, r1
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	440a      	add	r2, r1
 8000e80:	f023 0301 	bic.w	r3, r3, #1
 8000e84:	6013      	str	r3, [r2, #0]
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	08006734 	.word	0x08006734

08000e98 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LL_DMA_ConfigTransfer+0x4c>)
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ec0:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <LL_DMA_ConfigTransfer+0x4c>)
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	440a      	add	r2, r1
 8000ec6:	7812      	ldrb	r2, [r2, #0]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	440a      	add	r2, r1
 8000ece:	4611      	mov	r1, r2
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	08006734 	.word	0x08006734

08000ee8 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <LL_DMA_GetDataTransferDirection+0x30>)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f244 0310 	movw	r3, #16400	; 0x4010
 8000f0a:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	08006734 	.word	0x08006734

08000f1c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LL_DMA_SetDataLength+0x48>)
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4413      	add	r3, r2
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	0c1b      	lsrs	r3, r3, #16
 8000f3e:	041b      	lsls	r3, r3, #16
 8000f40:	4908      	ldr	r1, [pc, #32]	; (8000f64 <LL_DMA_SetDataLength+0x48>)
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	440a      	add	r2, r1
 8000f46:	7812      	ldrb	r2, [r2, #0]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	440a      	add	r2, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	08006734 	.word	0x08006734

08000f68 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <LL_DMA_GetDataLength+0x2c>)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	08006734 	.word	0x08006734

08000f98 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	d114      	bne.n	8000fda <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8000fb0:	4a17      	ldr	r2, [pc, #92]	; (8001010 <LL_DMA_ConfigAddresses+0x78>)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <LL_DMA_ConfigAddresses+0x78>)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 8000fd8:	e013      	b.n	8001002 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8000fda:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <LL_DMA_ConfigAddresses+0x78>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <LL_DMA_ConfigAddresses+0x78>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	60d3      	str	r3, [r2, #12]
}
 8001002:	bf00      	nop
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	08006734 	.word	0x08006734

08001014 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	33a8      	adds	r3, #168	; 0xa8
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	210f      	movs	r1, #15
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	210f      	movs	r1, #15
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	617b      	str	r3, [r7, #20]
  return result;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 8001052:	2320      	movs	r3, #32
 8001054:	e003      	b.n	800105e <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	408b      	lsls	r3, r1
 8001064:	68f9      	ldr	r1, [r7, #12]
 8001066:	31a8      	adds	r1, #168	; 0xa8
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 800106c:	bf00      	nop
 800106e:	3724      	adds	r7, #36	; 0x24
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <fn_setup_usart>:
*	Impact:			changes gpio config, enables USART
*
* 	Description:
* 		This function setups a uart using the defines above
*/
void fn_setup_usart(USART *usart)	{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	/*setup the gpio needed*/
	fn_setup_gpio(usart->pst_gpio_tx);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fc43 	bl	8000910 <fn_setup_gpio>
	fn_setup_gpio(usart->pst_gpio_rx);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fc3e 	bl	8000910 <fn_setup_gpio>

	/*Enables clock for usart*/
	switch ((uint32_t) usart->pst_usart_sel)	{
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <fn_setup_usart+0x160>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01e      	beq.n	80010dc <fn_setup_usart+0x64>
 800109e:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <fn_setup_usart+0x160>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	f200 8094 	bhi.w	80011ce <fn_setup_usart+0x156>
 80010a6:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <fn_setup_usart+0x164>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d030      	beq.n	800110e <fn_setup_usart+0x96>
 80010ac:	4a4b      	ldr	r2, [pc, #300]	; (80011dc <fn_setup_usart+0x164>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	f200 808d 	bhi.w	80011ce <fn_setup_usart+0x156>
 80010b4:	4a4a      	ldr	r2, [pc, #296]	; (80011e0 <fn_setup_usart+0x168>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d024      	beq.n	8001104 <fn_setup_usart+0x8c>
 80010ba:	4a49      	ldr	r2, [pc, #292]	; (80011e0 <fn_setup_usart+0x168>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	f200 8086 	bhi.w	80011ce <fn_setup_usart+0x156>
 80010c2:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <fn_setup_usart+0x16c>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d018      	beq.n	80010fa <fn_setup_usart+0x82>
 80010c8:	4a46      	ldr	r2, [pc, #280]	; (80011e4 <fn_setup_usart+0x16c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d87f      	bhi.n	80011ce <fn_setup_usart+0x156>
 80010ce:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <fn_setup_usart+0x170>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d008      	beq.n	80010e6 <fn_setup_usart+0x6e>
 80010d4:	4a45      	ldr	r2, [pc, #276]	; (80011ec <fn_setup_usart+0x174>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00a      	beq.n	80010f0 <fn_setup_usart+0x78>
		break;
	case (uint32_t) LPUART1:
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
		break;
	default:
		return;
 80010da:	e078      	b.n	80011ce <fn_setup_usart+0x156>
		LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80010dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010e0:	f7ff f966 	bl	80003b0 <LL_APB2_GRP1_EnableClock>
		break;
 80010e4:	e017      	b.n	8001116 <fn_setup_usart+0x9e>
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80010e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010ea:	f7ff f949 	bl	8000380 <LL_APB1_GRP1_EnableClock>
		break;
 80010ee:	e012      	b.n	8001116 <fn_setup_usart+0x9e>
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80010f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80010f4:	f7ff f944 	bl	8000380 <LL_APB1_GRP1_EnableClock>
		break;
 80010f8:	e00d      	b.n	8001116 <fn_setup_usart+0x9e>
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80010fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010fe:	f7ff f93f 	bl	8000380 <LL_APB1_GRP1_EnableClock>
		break;
 8001102:	e008      	b.n	8001116 <fn_setup_usart+0x9e>
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8001104:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001108:	f7ff f93a 	bl	8000380 <LL_APB1_GRP1_EnableClock>
		break;
 800110c:	e003      	b.n	8001116 <fn_setup_usart+0x9e>
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff f936 	bl	8000380 <LL_APB1_GRP1_EnableClock>
		break;
 8001114:	bf00      	nop
	// usart_set_mode(usart->u32_usart_sel, usart->u32_mode);
	// usart_set_parity(usart->u32_usart_sel, usart->u32_parity);
    // usart_set_flow_control(usart->u32_usart_sel, usart->u32_flow_control);


	LL_USART_Disable(usart->pst_usart_sel);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fced 	bl	8000afa <LL_USART_Disable>
	// set baudrate
	if (usart->pst_usart_sel == USART1)	{
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <fn_setup_usart+0x160>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d109      	bne.n	800113e <fn_setup_usart+0xc6>
		LL_USART_SetBaudRate(usart->pst_usart_sel, rcc_apb1_frequency, LL_USART_OVERSAMPLING_16, usart->u32_baudrate);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6898      	ldr	r0, [r3, #8]
 800112e:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <fn_setup_usart+0x178>)
 8001130:	6819      	ldr	r1, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	f7ff fd5f 	bl	8000bfa <LL_USART_SetBaudRate>
 800113c:	e008      	b.n	8001150 <fn_setup_usart+0xd8>
	} else {
		LL_USART_SetBaudRate(usart->pst_usart_sel, rcc_apb2_frequency, LL_USART_OVERSAMPLING_16, usart->u32_baudrate);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6898      	ldr	r0, [r3, #8]
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <fn_setup_usart+0x17c>)
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	f7ff fd55 	bl	8000bfa <LL_USART_SetBaudRate>
	}

	LL_USART_SetDataWidth(usart->pst_usart_sel, usart->u32_data_bits);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	4619      	mov	r1, r3
 800115a:	4610      	mov	r0, r2
 800115c:	f7ff fd14 	bl	8000b88 <LL_USART_SetDataWidth>
	LL_USART_SetStopBitsLength(usart->pst_usart_sel, usart->u32_stop_bits);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	4619      	mov	r1, r3
 800116a:	4610      	mov	r0, r2
 800116c:	f7ff fd1f 	bl	8000bae <LL_USART_SetStopBitsLength>
	LL_USART_SetTransferDirection(usart->pst_usart_sel, usart->u32_mode);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4619      	mov	r1, r3
 800117a:	4610      	mov	r0, r2
 800117c:	f7ff fccd 	bl	8000b1a <LL_USART_SetTransferDirection>
	LL_USART_SetParity(usart->pst_usart_sel, usart->u32_parity);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	4619      	mov	r1, r3
 800118a:	4610      	mov	r0, r2
 800118c:	f7ff fce9 	bl	8000b62 <LL_USART_SetParity>
	LL_USART_SetHWFlowCtrl(usart->pst_usart_sel, usart->u32_flow_control);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f7ff fd1a 	bl	8000bd4 <LL_USART_SetHWFlowCtrl>
	LL_USART_Enable(usart->pst_usart_sel);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fc98 	bl	8000ada <LL_USART_Enable>

    // this came from an example provided by STM
	while((!(LL_USART_IsActiveFlag_TEACK(usart->pst_usart_sel))) || (!(LL_USART_IsActiveFlag_REACK(usart->pst_usart_sel)))); 
 80011aa:	bf00      	nop
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fd6c 	bl	8000c8e <LL_USART_IsActiveFlag_TEACK>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f7      	beq.n	80011ac <fn_setup_usart+0x134>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fd78 	bl	8000cb6 <LL_USART_IsActiveFlag_REACK>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0ef      	beq.n	80011ac <fn_setup_usart+0x134>
 80011cc:	e000      	b.n	80011d0 <fn_setup_usart+0x158>
		return;
 80011ce:	bf00      	nop
}
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40008000 	.word	0x40008000
 80011e0:	40005000 	.word	0x40005000
 80011e4:	40004c00 	.word	0x40004c00
 80011e8:	40004400 	.word	0x40004400
 80011ec:	40004800 	.word	0x40004800
 80011f0:	20000bcc 	.word	0x20000bcc
 80011f4:	20000bd0 	.word	0x20000bd0

080011f8 <fn_setup_usart_dma_rx>:


// code based off https://github.com/STMicroelectronics/STM32CubeL4/blob/master/Projects/NUCLEO-L476RG/Examples_LL/USART/USART_Communication_TxRx_DMA/Src/main.c
void fn_setup_usart_dma_rx(USART *usart, uint8_t *pu8_rx_buffer, uint16_t u32_buffer_size)	{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	4613      	mov	r3, r2
 8001204:	80fb      	strh	r3, [r7, #6]
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff f88a 	bl	8000320 <LL_AHB1_GRP1_EnableClock>

	LL_DMA_ConfigTransfer(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY | LL_DMA_PRIORITY_HIGH | LL_DMA_MODE_NORMAL | LL_DMA_PERIPH_NOINCREMENT | LL_DMA_MEMORY_INCREMENT | LL_DMA_PDATAALIGN_BYTE | LL_DMA_MDATAALIGN_BYTE);
 800120c:	f44f 5202 	mov.w	r2, #8320	; 0x2080
 8001210:	2105      	movs	r1, #5
 8001212:	4816      	ldr	r0, [pc, #88]	; (800126c <fn_setup_usart_dma_rx+0x74>)
 8001214:	f7ff fe40 	bl	8000e98 <LL_DMA_ConfigTransfer>
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6, (uint32_t) &usart->pst_usart_sel->RDR, (uint32_t) pu8_rx_buffer, LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	3324      	adds	r3, #36	; 0x24
 800121e:	461d      	mov	r5, r3
 8001220:	68bc      	ldr	r4, [r7, #8]
 8001222:	2105      	movs	r1, #5
 8001224:	4811      	ldr	r0, [pc, #68]	; (800126c <fn_setup_usart_dma_rx+0x74>)
 8001226:	f7ff fe5f 	bl	8000ee8 <LL_DMA_GetDataTransferDirection>
 800122a:	4603      	mov	r3, r0
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	4623      	mov	r3, r4
 8001230:	462a      	mov	r2, r5
 8001232:	2105      	movs	r1, #5
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <fn_setup_usart_dma_rx+0x74>)
 8001236:	f7ff feaf 	bl	8000f98 <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, u32_buffer_size);
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	461a      	mov	r2, r3
 800123e:	2105      	movs	r1, #5
 8001240:	480a      	ldr	r0, [pc, #40]	; (800126c <fn_setup_usart_dma_rx+0x74>)
 8001242:	f7ff fe6b 	bl	8000f1c <LL_DMA_SetDataLength>
	LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_2);
 8001246:	2202      	movs	r2, #2
 8001248:	2105      	movs	r1, #5
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <fn_setup_usart_dma_rx+0x74>)
 800124c:	f7ff fee2 	bl	8001014 <LL_DMA_SetPeriphRequest>

	LL_USART_EnableDMAReq_RX(usart->pst_usart_sel);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fd84 	bl	8000d62 <LL_USART_EnableDMAReq_RX>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800125a:	2105      	movs	r1, #5
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <fn_setup_usart_dma_rx+0x74>)
 800125e:	f7ff fdd7 	bl	8000e10 <LL_DMA_EnableChannel>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bdb0      	pop	{r4, r5, r7, pc}
 800126a:	bf00      	nop
 800126c:	40020000 	.word	0x40020000

08001270 <fn_usart_disable_dma_rx>:

// returns how much space (in bytes) is left in the buffer
// subtract from length to get how much data is in the buffer
uint16_t fn_usart_disable_dma_rx(USART *usart)	{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001278:	2105      	movs	r1, #5
 800127a:	4809      	ldr	r0, [pc, #36]	; (80012a0 <fn_usart_disable_dma_rx+0x30>)
 800127c:	f7ff fdea 	bl	8000e54 <LL_DMA_DisableChannel>
	LL_USART_DisableDMAReq_RX(usart->pst_usart_sel);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fd8f 	bl	8000da8 <LL_USART_DisableDMAReq_RX>
	return LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800128a:	2105      	movs	r1, #5
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <fn_usart_disable_dma_rx+0x30>)
 800128e:	f7ff fe6b 	bl	8000f68 <LL_DMA_GetDataLength>
 8001292:	4603      	mov	r3, r0
 8001294:	b29b      	uxth	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020000 	.word	0x40020000

080012a4 <fn_usart_get_dma_cntr_rx>:

uint16_t fn_usart_get_dma_cntr_rx(USART *usart)	{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	return LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80012ac:	2105      	movs	r1, #5
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <fn_usart_get_dma_cntr_rx+0x1c>)
 80012b0:	f7ff fe5a 	bl	8000f68 <LL_DMA_GetDataLength>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29b      	uxth	r3, r3
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40020000 	.word	0x40020000

080012c4 <fn_usart_reset_counter_dma_rx>:

void fn_usart_reset_counter_dma_rx(USART *usart, uint16_t u32_buffer_size)	{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, u32_buffer_size);
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	461a      	mov	r2, r3
 80012d4:	2105      	movs	r1, #5
 80012d6:	4803      	ldr	r0, [pc, #12]	; (80012e4 <fn_usart_reset_counter_dma_rx+0x20>)
 80012d8:	f7ff fe20 	bl	8000f1c <LL_DMA_SetDataLength>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40020000 	.word	0x40020000

080012e8 <fn_usart_enable_dma_rx>:

void fn_usart_enable_dma_rx(USART *usart)	{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80012f0:	2105      	movs	r1, #5
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <fn_usart_enable_dma_rx+0x24>)
 80012f4:	f7ff fd8c 	bl	8000e10 <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(usart->pst_usart_sel);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fd30 	bl	8000d62 <LL_USART_EnableDMAReq_RX>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40020000 	.word	0x40020000

08001310 <fn_send_string>:
*
* 	@note Precondition:	fn_setup_usart()
* 	@note Impact: overwrites uart tx buffer
* 	@note Warning: This function could possibly cause an infinite loop if the uart is not setup correctly
*/
void fn_send_string(USART *pst_usart, const uint8_t *car_string)	{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	while (*car_string)	{
 800131a:	e013      	b.n	8001344 <fn_send_string+0x34>
		LL_USART_TransmitData8(pst_usart->pst_usart_sel, *car_string);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	4610      	mov	r0, r2
 8001328:	f7ff fd61 	bl	8000dee <LL_USART_TransmitData8>
		while (!LL_USART_IsActiveFlag_TXE(pst_usart->pst_usart_sel));
 800132c:	bf00      	nop
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fc98 	bl	8000c68 <LL_USART_IsActiveFlag_TXE>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f7      	beq.n	800132e <fn_send_string+0x1e>
		car_string++;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	603b      	str	r3, [r7, #0]
	while (*car_string)	{
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e7      	bne.n	800131c <fn_send_string+0xc>
	}
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <SETUP_USART2>:
	return 0;	// buffer overflow
}


__STATIC_INLINE
void SETUP_USART2(uint32_t u32_baudrate)	{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b09a      	sub	sp, #104	; 0x68
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	g_st_usart2_tx_gpio = (GPIO) {
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <SETUP_USART2+0x74>)
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <SETUP_USART2+0x78>)
 8001364:	4614      	mov	r4, r2
 8001366:	461d      	mov	r5, r3
 8001368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        .u32_type = LL_GPIO_OUTPUT_PUSHPULL,
        .u32_speed = LL_GPIO_SPEED_FREQ_HIGH,
        .u32_af = USART2_TX_AF
    };

    g_st_usart2_rx_gpio = (GPIO) {
 8001374:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <SETUP_USART2+0x7c>)
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <SETUP_USART2+0x80>)
 8001378:	4614      	mov	r4, r2
 800137a:	461d      	mov	r5, r3
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        .u32_speed = LL_GPIO_SPEED_FREQ_HIGH,
        .u32_af = USART2_RX_AF
    };

    // setup USART2
    g_st_usart2 = (USART) {
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <SETUP_USART2+0x84>)
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <SETUP_USART2+0x74>)
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <SETUP_USART2+0x84>)
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <SETUP_USART2+0x7c>)
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <SETUP_USART2+0x84>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <SETUP_USART2+0x88>)
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <SETUP_USART2+0x84>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60d3      	str	r3, [r2, #12]
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <SETUP_USART2+0x84>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <SETUP_USART2+0x84>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <SETUP_USART2+0x84>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	619a      	str	r2, [r3, #24]
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <SETUP_USART2+0x84>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <SETUP_USART2+0x84>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
        .u32_mode = LL_USART_DIRECTION_TX_RX,
        .u32_parity = LL_USART_PARITY_NONE,
        .u32_flow_control = LL_USART_HWCONTROL_NONE,
    };

    fn_setup_usart(&g_st_usart2);
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <SETUP_USART2+0x84>)
 80013c0:	f7ff fe5a 	bl	8001078 <fn_setup_usart>
}
 80013c4:	bf00      	nop
 80013c6:	3768      	adds	r7, #104	; 0x68
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bdb0      	pop	{r4, r5, r7, pc}
 80013cc:	20000bf0 	.word	0x20000bf0
 80013d0:	08006580 	.word	0x08006580
 80013d4:	20000bd4 	.word	0x20000bd4
 80013d8:	0800659c 	.word	0x0800659c
 80013dc:	20000c0c 	.word	0x20000c0c
 80013e0:	40004400 	.word	0x40004400

080013e4 <USART2_SEND_STRING>:


__STATIC_INLINE
void USART2_SEND_STRING(const char *car_string)	{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	fn_send_string(&g_st_usart2, (uint8_t*)car_string);
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4803      	ldr	r0, [pc, #12]	; (80013fc <USART2_SEND_STRING+0x18>)
 80013f0:	f7ff ff8e 	bl	8001310 <fn_send_string>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000c0c 	.word	0x20000c0c

08001400 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f023 0218 	bic.w	r2, r3, #24
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	609a      	str	r2, [r3, #8]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_CRC_SetInputDataReverseMode>:
  *         @arg @ref LL_CRC_INDATA_REVERSE_HALFWORD
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f023 0260 	bic.w	r2, r3, #96	; 0x60
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_CRC_SetOutputDataReverseMode>:
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_NONE
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	609a      	str	r2, [r3, #8]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_CRC_SetInitialData>:
  * @param  CRCx CRC Instance
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	611a      	str	r2, [r3, #16]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	615a      	str	r2, [r3, #20]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <crc_init>:

#include <stm32l4xx.h>
#include <stm32l4xx_ll_bus.h>
#include <stm32l4xx_ll_crc.h>

void crc_init(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80014b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80014b4:	f7fe ff34 	bl	8000320 <LL_AHB1_GRP1_EnableClock>
    LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 80014b8:	2100      	movs	r1, #0
 80014ba:	480b      	ldr	r0, [pc, #44]	; (80014e8 <crc_init+0x3c>)
 80014bc:	f7ff ffb3 	bl	8001426 <LL_CRC_SetInputDataReverseMode>
    LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 80014c0:	2100      	movs	r1, #0
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <crc_init+0x3c>)
 80014c4:	f7ff ffc2 	bl	800144c <LL_CRC_SetOutputDataReverseMode>
    LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 80014c8:	4908      	ldr	r1, [pc, #32]	; (80014ec <crc_init+0x40>)
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <crc_init+0x3c>)
 80014cc:	f7ff ffdf 	bl	800148e <LL_CRC_SetPolynomialCoef>
    LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 80014d0:	2100      	movs	r1, #0
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <crc_init+0x3c>)
 80014d4:	f7ff ff94 	bl	8001400 <LL_CRC_SetPolynomialSize>
    LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <crc_init+0x3c>)
 80014de:	f7ff ffc8 	bl	8001472 <LL_CRC_SetInitialData>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023000 	.word	0x40023000
 80014ec:	04c11db7 	.word	0x04c11db7

080014f0 <fn_seven_seg_init>:
    int active_low;        // 0 = active high, 1 = active low
};
typedef struct Seven_Seg_ Seven_Seg;


void fn_seven_seg_init(Seven_Seg* seven_seg)   {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    fn_setup_gpio(&seven_seg->a);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fa08 	bl	8000910 <fn_setup_gpio>
    fn_setup_gpio(&seven_seg->b);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	331c      	adds	r3, #28
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fa03 	bl	8000910 <fn_setup_gpio>
    fn_setup_gpio(&seven_seg->c);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3338      	adds	r3, #56	; 0x38
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f9fe 	bl	8000910 <fn_setup_gpio>
    fn_setup_gpio(&seven_seg->d);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3354      	adds	r3, #84	; 0x54
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f9f9 	bl	8000910 <fn_setup_gpio>
    fn_setup_gpio(&seven_seg->e);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3370      	adds	r3, #112	; 0x70
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f9f4 	bl	8000910 <fn_setup_gpio>
    fn_setup_gpio(&seven_seg->f);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	338c      	adds	r3, #140	; 0x8c
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f9ef 	bl	8000910 <fn_setup_gpio>
    fn_setup_gpio(&seven_seg->g);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	33a8      	adds	r3, #168	; 0xa8
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f9ea 	bl	8000910 <fn_setup_gpio>
    fn_setup_gpio(&seven_seg->dot);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	33c4      	adds	r3, #196	; 0xc4
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f9e5 	bl	8000910 <fn_setup_gpio>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <fn_seven_seg_clear>:

void fn_seven_seg_clear(Seven_Seg* seven_seg) {
 800154e:	b590      	push	{r4, r7, lr}
 8001550:	b087      	sub	sp, #28
 8001552:	af04      	add	r7, sp, #16
 8001554:	6078      	str	r0, [r7, #4]
    SET_GPIO_PIN_VAL(seven_seg->a, seven_seg->active_low);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	9203      	str	r2, [sp, #12]
 8001560:	466c      	mov	r4, sp
 8001562:	f103 0210 	add.w	r2, r3, #16
 8001566:	ca07      	ldmia	r2, {r0, r1, r2}
 8001568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800156c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156e:	f7ff fa89 	bl	8000a84 <SET_GPIO_PIN_VAL>
    SET_GPIO_PIN_VAL(seven_seg->b, seven_seg->active_low);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	9203      	str	r2, [sp, #12]
 800157c:	466c      	mov	r4, sp
 800157e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001582:	ca07      	ldmia	r2, {r0, r1, r2}
 8001584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001588:	331c      	adds	r3, #28
 800158a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800158c:	f7ff fa7a 	bl	8000a84 <SET_GPIO_PIN_VAL>
    SET_GPIO_PIN_VAL(seven_seg->c, seven_seg->active_low);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	9203      	str	r2, [sp, #12]
 800159a:	466c      	mov	r4, sp
 800159c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80015a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015a6:	3338      	adds	r3, #56	; 0x38
 80015a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015aa:	f7ff fa6b 	bl	8000a84 <SET_GPIO_PIN_VAL>
    SET_GPIO_PIN_VAL(seven_seg->d, seven_seg->active_low);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	9203      	str	r2, [sp, #12]
 80015b8:	466c      	mov	r4, sp
 80015ba:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80015be:	ca07      	ldmia	r2, {r0, r1, r2}
 80015c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015c4:	3354      	adds	r3, #84	; 0x54
 80015c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c8:	f7ff fa5c 	bl	8000a84 <SET_GPIO_PIN_VAL>
    SET_GPIO_PIN_VAL(seven_seg->e, seven_seg->active_low);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	9203      	str	r2, [sp, #12]
 80015d6:	466c      	mov	r4, sp
 80015d8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80015dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80015de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015e2:	3370      	adds	r3, #112	; 0x70
 80015e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015e6:	f7ff fa4d 	bl	8000a84 <SET_GPIO_PIN_VAL>
    SET_GPIO_PIN_VAL(seven_seg->f, seven_seg->active_low);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	9203      	str	r2, [sp, #12]
 80015f4:	466c      	mov	r4, sp
 80015f6:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80015fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80015fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001600:	338c      	adds	r3, #140	; 0x8c
 8001602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001604:	f7ff fa3e 	bl	8000a84 <SET_GPIO_PIN_VAL>
    SET_GPIO_PIN_VAL(seven_seg->g, seven_seg->active_low);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	9203      	str	r2, [sp, #12]
 8001612:	466c      	mov	r4, sp
 8001614:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8001618:	ca07      	ldmia	r2, {r0, r1, r2}
 800161a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800161e:	33a8      	adds	r3, #168	; 0xa8
 8001620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001622:	f7ff fa2f 	bl	8000a84 <SET_GPIO_PIN_VAL>
    SET_GPIO_PIN_VAL(seven_seg->dot, seven_seg->active_low);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	9203      	str	r2, [sp, #12]
 8001630:	466c      	mov	r4, sp
 8001632:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8001636:	ca07      	ldmia	r2, {r0, r1, r2}
 8001638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800163c:	33c4      	adds	r3, #196	; 0xc4
 800163e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001640:	f7ff fa20 	bl	8000a84 <SET_GPIO_PIN_VAL>
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}

0800164c <fn_seven_seg_display>:
    SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
    SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
    SET_GPIO_PIN_VAL(seven_seg->dot, !seven_seg->active_low);
}

void fn_seven_seg_display(Seven_Seg* seven_seg, uint8_t val, uint8_t dot)    {
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b087      	sub	sp, #28
 8001650:	af04      	add	r7, sp, #16
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
 8001658:	4613      	mov	r3, r2
 800165a:	70bb      	strb	r3, [r7, #2]
    fn_seven_seg_clear(seven_seg);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff76 	bl	800154e <fn_seven_seg_clear>
    SET_GPIO_PIN_VAL(seven_seg->dot, dot ^ seven_seg->active_low);
 8001662:	78ba      	ldrb	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166a:	405a      	eors	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	9203      	str	r2, [sp, #12]
 8001670:	466c      	mov	r4, sp
 8001672:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8001676:	ca07      	ldmia	r2, {r0, r1, r2}
 8001678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800167c:	33c4      	adds	r3, #196	; 0xc4
 800167e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001680:	f7ff fa00 	bl	8000a84 <SET_GPIO_PIN_VAL>
    switch(val) {
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	f200 8694 	bhi.w	80023b4 <fn_seven_seg_display+0xd68>
 800168c:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <fn_seven_seg_display+0x48>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016d5 	.word	0x080016d5
 8001698:	080017d3 	.word	0x080017d3
 800169c:	0800182b 	.word	0x0800182b
 80016a0:	080018ff 	.word	0x080018ff
 80016a4:	080019d3 	.word	0x080019d3
 80016a8:	08001a7f 	.word	0x08001a7f
 80016ac:	08001b53 	.word	0x08001b53
 80016b0:	08001c4f 	.word	0x08001c4f
 80016b4:	08001ccd 	.word	0x08001ccd
 80016b8:	08001df3 	.word	0x08001df3
 80016bc:	08001eef 	.word	0x08001eef
 80016c0:	08001feb 	.word	0x08001feb
 80016c4:	080020bf 	.word	0x080020bf
 80016c8:	08002167 	.word	0x08002167
 80016cc:	0800223b 	.word	0x0800223b
 80016d0:	0800230d 	.word	0x0800230d
        case 0:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf0c      	ite	eq
 80016de:	2301      	moveq	r3, #1
 80016e0:	2300      	movne	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	9203      	str	r2, [sp, #12]
 80016ea:	466c      	mov	r4, sp
 80016ec:	f103 0210 	add.w	r2, r3, #16
 80016f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f8:	f7ff f9c4 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->b, !seven_seg->active_low);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	2b00      	cmp	r3, #0
 8001704:	bf0c      	ite	eq
 8001706:	2301      	moveq	r3, #1
 8001708:	2300      	movne	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	9203      	str	r2, [sp, #12]
 8001712:	466c      	mov	r4, sp
 8001714:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001718:	ca07      	ldmia	r2, {r0, r1, r2}
 800171a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800171e:	331c      	adds	r3, #28
 8001720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001722:	f7ff f9af 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	9203      	str	r2, [sp, #12]
 800173c:	466c      	mov	r4, sp
 800173e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001742:	ca07      	ldmia	r2, {r0, r1, r2}
 8001744:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001748:	3338      	adds	r3, #56	; 0x38
 800174a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800174c:	f7ff f99a 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf0c      	ite	eq
 800175a:	2301      	moveq	r3, #1
 800175c:	2300      	movne	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	9203      	str	r2, [sp, #12]
 8001766:	466c      	mov	r4, sp
 8001768:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800176c:	ca07      	ldmia	r2, {r0, r1, r2}
 800176e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001772:	3354      	adds	r3, #84	; 0x54
 8001774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001776:	f7ff f985 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->e, !seven_seg->active_low);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	9203      	str	r2, [sp, #12]
 8001790:	466c      	mov	r4, sp
 8001792:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8001796:	ca07      	ldmia	r2, {r0, r1, r2}
 8001798:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800179c:	3370      	adds	r3, #112	; 0x70
 800179e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a0:	f7ff f970 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	9203      	str	r2, [sp, #12]
 80017ba:	466c      	mov	r4, sp
 80017bc:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80017c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017c6:	338c      	adds	r3, #140	; 0x8c
 80017c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ca:	f7ff f95b 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 80017ce:	f000 bdf2 	b.w	80023b6 <fn_seven_seg_display+0xd6a>
        case 1:
            SET_GPIO_PIN_VAL(seven_seg->b, !seven_seg->active_low);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	9203      	str	r2, [sp, #12]
 80017e8:	466c      	mov	r4, sp
 80017ea:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80017ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017f4:	331c      	adds	r3, #28
 80017f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f8:	f7ff f944 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf0c      	ite	eq
 8001806:	2301      	moveq	r3, #1
 8001808:	2300      	movne	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	9203      	str	r2, [sp, #12]
 8001812:	466c      	mov	r4, sp
 8001814:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001818:	ca07      	ldmia	r2, {r0, r1, r2}
 800181a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800181e:	3338      	adds	r3, #56	; 0x38
 8001820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001822:	f7ff f92f 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 8001826:	f000 bdc6 	b.w	80023b6 <fn_seven_seg_display+0xd6a>
        case 2:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	9203      	str	r2, [sp, #12]
 8001840:	466c      	mov	r4, sp
 8001842:	f103 0210 	add.w	r2, r3, #16
 8001846:	ca07      	ldmia	r2, {r0, r1, r2}
 8001848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800184c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800184e:	f7ff f919 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->b, !seven_seg->active_low);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	9203      	str	r2, [sp, #12]
 8001868:	466c      	mov	r4, sp
 800186a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800186e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001870:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001874:	331c      	adds	r3, #28
 8001876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001878:	f7ff f904 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001882:	2b00      	cmp	r3, #0
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	9203      	str	r2, [sp, #12]
 8001892:	466c      	mov	r4, sp
 8001894:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001898:	ca07      	ldmia	r2, {r0, r1, r2}
 800189a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800189e:	3354      	adds	r3, #84	; 0x54
 80018a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a2:	f7ff f8ef 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->e, !seven_seg->active_low);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf0c      	ite	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2300      	movne	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	9203      	str	r2, [sp, #12]
 80018bc:	466c      	mov	r4, sp
 80018be:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80018c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80018c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80018c8:	3370      	adds	r3, #112	; 0x70
 80018ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018cc:	f7ff f8da 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bf0c      	ite	eq
 80018da:	2301      	moveq	r3, #1
 80018dc:	2300      	movne	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	9203      	str	r2, [sp, #12]
 80018e6:	466c      	mov	r4, sp
 80018e8:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80018ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80018f2:	33a8      	adds	r3, #168	; 0xa8
 80018f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f6:	f7ff f8c5 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 80018fa:	f000 bd5c 	b.w	80023b6 <fn_seven_seg_display+0xd6a>
        case 3:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf0c      	ite	eq
 8001908:	2301      	moveq	r3, #1
 800190a:	2300      	movne	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	9203      	str	r2, [sp, #12]
 8001914:	466c      	mov	r4, sp
 8001916:	f103 0210 	add.w	r2, r3, #16
 800191a:	ca07      	ldmia	r2, {r0, r1, r2}
 800191c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001922:	f7ff f8af 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->b, !seven_seg->active_low);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	9203      	str	r2, [sp, #12]
 800193c:	466c      	mov	r4, sp
 800193e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001942:	ca07      	ldmia	r2, {r0, r1, r2}
 8001944:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001948:	331c      	adds	r3, #28
 800194a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800194c:	f7ff f89a 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001956:	2b00      	cmp	r3, #0
 8001958:	bf0c      	ite	eq
 800195a:	2301      	moveq	r3, #1
 800195c:	2300      	movne	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	9203      	str	r2, [sp, #12]
 8001966:	466c      	mov	r4, sp
 8001968:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800196c:	ca07      	ldmia	r2, {r0, r1, r2}
 800196e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001972:	3338      	adds	r3, #56	; 0x38
 8001974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001976:	f7ff f885 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	9203      	str	r2, [sp, #12]
 8001990:	466c      	mov	r4, sp
 8001992:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001996:	ca07      	ldmia	r2, {r0, r1, r2}
 8001998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800199c:	3354      	adds	r3, #84	; 0x54
 800199e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a0:	f7ff f870 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	9203      	str	r2, [sp, #12]
 80019ba:	466c      	mov	r4, sp
 80019bc:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80019c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019c6:	33a8      	adds	r3, #168	; 0xa8
 80019c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ca:	f7ff f85b 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 80019ce:	f000 bcf2 	b.w	80023b6 <fn_seven_seg_display+0xd6a>
        case 4:
            SET_GPIO_PIN_VAL(seven_seg->b, !seven_seg->active_low);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	9203      	str	r2, [sp, #12]
 80019e8:	466c      	mov	r4, sp
 80019ea:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80019ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019f4:	331c      	adds	r3, #28
 80019f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f8:	f7ff f844 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf0c      	ite	eq
 8001a06:	2301      	moveq	r3, #1
 8001a08:	2300      	movne	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	9203      	str	r2, [sp, #12]
 8001a12:	466c      	mov	r4, sp
 8001a14:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a1e:	3338      	adds	r3, #56	; 0x38
 8001a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a22:	f7ff f82f 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf0c      	ite	eq
 8001a30:	2301      	moveq	r3, #1
 8001a32:	2300      	movne	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	9203      	str	r2, [sp, #12]
 8001a3c:	466c      	mov	r4, sp
 8001a3e:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a48:	338c      	adds	r3, #140	; 0x8c
 8001a4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a4c:	f7ff f81a 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf0c      	ite	eq
 8001a5a:	2301      	moveq	r3, #1
 8001a5c:	2300      	movne	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	9203      	str	r2, [sp, #12]
 8001a66:	466c      	mov	r4, sp
 8001a68:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8001a6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a72:	33a8      	adds	r3, #168	; 0xa8
 8001a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a76:	f7ff f805 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 8001a7a:	f000 bc9c 	b.w	80023b6 <fn_seven_seg_display+0xd6a>
        case 5:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	9203      	str	r2, [sp, #12]
 8001a94:	466c      	mov	r4, sp
 8001a96:	f103 0210 	add.w	r2, r3, #16
 8001a9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa2:	f7fe ffef 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	9203      	str	r2, [sp, #12]
 8001abc:	466c      	mov	r4, sp
 8001abe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001ac2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ac4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ac8:	3338      	adds	r3, #56	; 0x38
 8001aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001acc:	f7fe ffda 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	9203      	str	r2, [sp, #12]
 8001ae6:	466c      	mov	r4, sp
 8001ae8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001af2:	3354      	adds	r3, #84	; 0x54
 8001af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001af6:	f7fe ffc5 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	9203      	str	r2, [sp, #12]
 8001b10:	466c      	mov	r4, sp
 8001b12:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001b16:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b1c:	338c      	adds	r3, #140	; 0x8c
 8001b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b20:	f7fe ffb0 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf0c      	ite	eq
 8001b2e:	2301      	moveq	r3, #1
 8001b30:	2300      	movne	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	9203      	str	r2, [sp, #12]
 8001b3a:	466c      	mov	r4, sp
 8001b3c:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8001b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b46:	33a8      	adds	r3, #168	; 0xa8
 8001b48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b4a:	f7fe ff9b 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 8001b4e:	f000 bc32 	b.w	80023b6 <fn_seven_seg_display+0xd6a>
        case 6:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	9203      	str	r2, [sp, #12]
 8001b68:	466c      	mov	r4, sp
 8001b6a:	f103 0210 	add.w	r2, r3, #16
 8001b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b76:	f7fe ff85 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	9203      	str	r2, [sp, #12]
 8001b90:	466c      	mov	r4, sp
 8001b92:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001b96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b9c:	3338      	adds	r3, #56	; 0x38
 8001b9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba0:	f7fe ff70 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bf0c      	ite	eq
 8001bae:	2301      	moveq	r3, #1
 8001bb0:	2300      	movne	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	9203      	str	r2, [sp, #12]
 8001bba:	466c      	mov	r4, sp
 8001bbc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001bc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001bc6:	3354      	adds	r3, #84	; 0x54
 8001bc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bca:	f7fe ff5b 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->e, !seven_seg->active_low);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	9203      	str	r2, [sp, #12]
 8001be4:	466c      	mov	r4, sp
 8001be6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8001bea:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001bf0:	3370      	adds	r3, #112	; 0x70
 8001bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bf4:	f7fe ff46 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	9203      	str	r2, [sp, #12]
 8001c0e:	466c      	mov	r4, sp
 8001c10:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001c14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c1a:	338c      	adds	r3, #140	; 0x8c
 8001c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c1e:	f7fe ff31 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf0c      	ite	eq
 8001c2c:	2301      	moveq	r3, #1
 8001c2e:	2300      	movne	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	9203      	str	r2, [sp, #12]
 8001c38:	466c      	mov	r4, sp
 8001c3a:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8001c3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c44:	33a8      	adds	r3, #168	; 0xa8
 8001c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c48:	f7fe ff1c 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 8001c4c:	e3b3      	b.n	80023b6 <fn_seven_seg_display+0xd6a>
        case 7:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	9203      	str	r2, [sp, #12]
 8001c64:	466c      	mov	r4, sp
 8001c66:	f103 0210 	add.w	r2, r3, #16
 8001c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c72:	f7fe ff07 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->b, !seven_seg->active_low);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	9203      	str	r2, [sp, #12]
 8001c8c:	466c      	mov	r4, sp
 8001c8e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c98:	331c      	adds	r3, #28
 8001c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c9c:	f7fe fef2 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf0c      	ite	eq
 8001caa:	2301      	moveq	r3, #1
 8001cac:	2300      	movne	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	9203      	str	r2, [sp, #12]
 8001cb6:	466c      	mov	r4, sp
 8001cb8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001cbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cc2:	3338      	adds	r3, #56	; 0x38
 8001cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc6:	f7fe fedd 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 8001cca:	e374      	b.n	80023b6 <fn_seven_seg_display+0xd6a>
        case 8:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf0c      	ite	eq
 8001cd6:	2301      	moveq	r3, #1
 8001cd8:	2300      	movne	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	9203      	str	r2, [sp, #12]
 8001ce2:	466c      	mov	r4, sp
 8001ce4:	f103 0210 	add.w	r2, r3, #16
 8001ce8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf0:	f7fe fec8 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->b, !seven_seg->active_low);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2301      	moveq	r3, #1
 8001d00:	2300      	movne	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	9203      	str	r2, [sp, #12]
 8001d0a:	466c      	mov	r4, sp
 8001d0c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001d10:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d16:	331c      	adds	r3, #28
 8001d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d1a:	f7fe feb3 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	9203      	str	r2, [sp, #12]
 8001d34:	466c      	mov	r4, sp
 8001d36:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001d3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d40:	3338      	adds	r3, #56	; 0x38
 8001d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d44:	f7fe fe9e 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf0c      	ite	eq
 8001d52:	2301      	moveq	r3, #1
 8001d54:	2300      	movne	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	9203      	str	r2, [sp, #12]
 8001d5e:	466c      	mov	r4, sp
 8001d60:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001d64:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d6a:	3354      	adds	r3, #84	; 0x54
 8001d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d6e:	f7fe fe89 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->e, !seven_seg->active_low);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	9203      	str	r2, [sp, #12]
 8001d88:	466c      	mov	r4, sp
 8001d8a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8001d8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d94:	3370      	adds	r3, #112	; 0x70
 8001d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d98:	f7fe fe74 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	9203      	str	r2, [sp, #12]
 8001db2:	466c      	mov	r4, sp
 8001db4:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001db8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001dbe:	338c      	adds	r3, #140	; 0x8c
 8001dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc2:	f7fe fe5f 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	9203      	str	r2, [sp, #12]
 8001ddc:	466c      	mov	r4, sp
 8001dde:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8001de2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001de4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001de8:	33a8      	adds	r3, #168	; 0xa8
 8001dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dec:	f7fe fe4a 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 8001df0:	e2e1      	b.n	80023b6 <fn_seven_seg_display+0xd6a>
        case 9:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	9203      	str	r2, [sp, #12]
 8001e08:	466c      	mov	r4, sp
 8001e0a:	f103 0210 	add.w	r2, r3, #16
 8001e0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e16:	f7fe fe35 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->b, !seven_seg->active_low);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	9203      	str	r2, [sp, #12]
 8001e30:	466c      	mov	r4, sp
 8001e32:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001e36:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e3c:	331c      	adds	r3, #28
 8001e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e40:	f7fe fe20 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf0c      	ite	eq
 8001e4e:	2301      	moveq	r3, #1
 8001e50:	2300      	movne	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	9203      	str	r2, [sp, #12]
 8001e5a:	466c      	mov	r4, sp
 8001e5c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001e60:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e66:	3338      	adds	r3, #56	; 0x38
 8001e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e6a:	f7fe fe0b 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	9203      	str	r2, [sp, #12]
 8001e84:	466c      	mov	r4, sp
 8001e86:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e90:	3354      	adds	r3, #84	; 0x54
 8001e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e94:	f7fe fdf6 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	9203      	str	r2, [sp, #12]
 8001eae:	466c      	mov	r4, sp
 8001eb0:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001eba:	338c      	adds	r3, #140	; 0x8c
 8001ebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ebe:	f7fe fde1 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	9203      	str	r2, [sp, #12]
 8001ed8:	466c      	mov	r4, sp
 8001eda:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8001ede:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ee4:	33a8      	adds	r3, #168	; 0xa8
 8001ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee8:	f7fe fdcc 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 8001eec:	e263      	b.n	80023b6 <fn_seven_seg_display+0xd6a>
        case 10:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2301      	moveq	r3, #1
 8001efa:	2300      	movne	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	9203      	str	r2, [sp, #12]
 8001f04:	466c      	mov	r4, sp
 8001f06:	f103 0210 	add.w	r2, r3, #16
 8001f0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f12:	f7fe fdb7 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->b, !seven_seg->active_low);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	9203      	str	r2, [sp, #12]
 8001f2c:	466c      	mov	r4, sp
 8001f2e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001f32:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f38:	331c      	adds	r3, #28
 8001f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f3c:	f7fe fda2 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	9203      	str	r2, [sp, #12]
 8001f56:	466c      	mov	r4, sp
 8001f58:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001f5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f62:	3338      	adds	r3, #56	; 0x38
 8001f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f66:	f7fe fd8d 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->e, !seven_seg->active_low);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	9203      	str	r2, [sp, #12]
 8001f80:	466c      	mov	r4, sp
 8001f82:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8001f86:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f8c:	3370      	adds	r3, #112	; 0x70
 8001f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f90:	f7fe fd78 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	9203      	str	r2, [sp, #12]
 8001faa:	466c      	mov	r4, sp
 8001fac:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001fb6:	338c      	adds	r3, #140	; 0x8c
 8001fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fba:	f7fe fd63 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	9203      	str	r2, [sp, #12]
 8001fd4:	466c      	mov	r4, sp
 8001fd6:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8001fda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001fe0:	33a8      	adds	r3, #168	; 0xa8
 8001fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe4:	f7fe fd4e 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 8001fe8:	e1e5      	b.n	80023b6 <fn_seven_seg_display+0xd6a>
        case 11:
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2301      	moveq	r3, #1
 8001ff6:	2300      	movne	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	9203      	str	r2, [sp, #12]
 8002000:	466c      	mov	r4, sp
 8002002:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002006:	ca07      	ldmia	r2, {r0, r1, r2}
 8002008:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800200c:	3338      	adds	r3, #56	; 0x38
 800200e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002010:	f7fe fd38 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	9203      	str	r2, [sp, #12]
 800202a:	466c      	mov	r4, sp
 800202c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002030:	ca07      	ldmia	r2, {r0, r1, r2}
 8002032:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002036:	3354      	adds	r3, #84	; 0x54
 8002038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800203a:	f7fe fd23 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->e, !seven_seg->active_low);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	9203      	str	r2, [sp, #12]
 8002054:	466c      	mov	r4, sp
 8002056:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800205a:	ca07      	ldmia	r2, {r0, r1, r2}
 800205c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002060:	3370      	adds	r3, #112	; 0x70
 8002062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002064:	f7fe fd0e 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	9203      	str	r2, [sp, #12]
 800207e:	466c      	mov	r4, sp
 8002080:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8002084:	ca07      	ldmia	r2, {r0, r1, r2}
 8002086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800208a:	338c      	adds	r3, #140	; 0x8c
 800208c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208e:	f7fe fcf9 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	9203      	str	r2, [sp, #12]
 80020a8:	466c      	mov	r4, sp
 80020aa:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80020ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80020b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020b4:	33a8      	adds	r3, #168	; 0xa8
 80020b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b8:	f7fe fce4 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 80020bc:	e17b      	b.n	80023b6 <fn_seven_seg_display+0xd6a>
        case 12:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	9203      	str	r2, [sp, #12]
 80020d4:	466c      	mov	r4, sp
 80020d6:	f103 0210 	add.w	r2, r3, #16
 80020da:	ca07      	ldmia	r2, {r0, r1, r2}
 80020dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e2:	f7fe fccf 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	9203      	str	r2, [sp, #12]
 80020fc:	466c      	mov	r4, sp
 80020fe:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002102:	ca07      	ldmia	r2, {r0, r1, r2}
 8002104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002108:	3354      	adds	r3, #84	; 0x54
 800210a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800210c:	f7fe fcba 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->e, !seven_seg->active_low);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	9203      	str	r2, [sp, #12]
 8002126:	466c      	mov	r4, sp
 8002128:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800212c:	ca07      	ldmia	r2, {r0, r1, r2}
 800212e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002132:	3370      	adds	r3, #112	; 0x70
 8002134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002136:	f7fe fca5 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	9203      	str	r2, [sp, #12]
 8002150:	466c      	mov	r4, sp
 8002152:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8002156:	ca07      	ldmia	r2, {r0, r1, r2}
 8002158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800215c:	338c      	adds	r3, #140	; 0x8c
 800215e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002160:	f7fe fc90 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 8002164:	e127      	b.n	80023b6 <fn_seven_seg_display+0xd6a>
        case 13:
            SET_GPIO_PIN_VAL(seven_seg->b, !seven_seg->active_low);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	9203      	str	r2, [sp, #12]
 800217c:	466c      	mov	r4, sp
 800217e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002182:	ca07      	ldmia	r2, {r0, r1, r2}
 8002184:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002188:	331c      	adds	r3, #28
 800218a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800218c:	f7fe fc7a 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->c, !seven_seg->active_low);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002196:	2b00      	cmp	r3, #0
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	9203      	str	r2, [sp, #12]
 80021a6:	466c      	mov	r4, sp
 80021a8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80021ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80021ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021b2:	3338      	adds	r3, #56	; 0x38
 80021b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b6:	f7fe fc65 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	9203      	str	r2, [sp, #12]
 80021d0:	466c      	mov	r4, sp
 80021d2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80021d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80021d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021dc:	3354      	adds	r3, #84	; 0x54
 80021de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e0:	f7fe fc50 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->e, !seven_seg->active_low);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	9203      	str	r2, [sp, #12]
 80021fa:	466c      	mov	r4, sp
 80021fc:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002200:	ca07      	ldmia	r2, {r0, r1, r2}
 8002202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002206:	3370      	adds	r3, #112	; 0x70
 8002208:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220a:	f7fe fc3b 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	9203      	str	r2, [sp, #12]
 8002224:	466c      	mov	r4, sp
 8002226:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 800222a:	ca07      	ldmia	r2, {r0, r1, r2}
 800222c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002230:	33a8      	adds	r3, #168	; 0xa8
 8002232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002234:	f7fe fc26 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 8002238:	e0bd      	b.n	80023b6 <fn_seven_seg_display+0xd6a>
        case 14:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	9203      	str	r2, [sp, #12]
 8002250:	466c      	mov	r4, sp
 8002252:	f103 0210 	add.w	r2, r3, #16
 8002256:	ca07      	ldmia	r2, {r0, r1, r2}
 8002258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800225c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800225e:	f7fe fc11 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->d, !seven_seg->active_low);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	9203      	str	r2, [sp, #12]
 8002278:	466c      	mov	r4, sp
 800227a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800227e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002284:	3354      	adds	r3, #84	; 0x54
 8002286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002288:	f7fe fbfc 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->e, !seven_seg->active_low);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002292:	2b00      	cmp	r3, #0
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	9203      	str	r2, [sp, #12]
 80022a2:	466c      	mov	r4, sp
 80022a4:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80022a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022ae:	3370      	adds	r3, #112	; 0x70
 80022b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b2:	f7fe fbe7 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	9203      	str	r2, [sp, #12]
 80022cc:	466c      	mov	r4, sp
 80022ce:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80022d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80022d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022d8:	338c      	adds	r3, #140	; 0x8c
 80022da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022dc:	f7fe fbd2 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	9203      	str	r2, [sp, #12]
 80022f6:	466c      	mov	r4, sp
 80022f8:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80022fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80022fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002302:	33a8      	adds	r3, #168	; 0xa8
 8002304:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002306:	f7fe fbbd 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 800230a:	e054      	b.n	80023b6 <fn_seven_seg_display+0xd6a>
        case 15:
            SET_GPIO_PIN_VAL(seven_seg->a, !seven_seg->active_low);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	9203      	str	r2, [sp, #12]
 8002322:	466c      	mov	r4, sp
 8002324:	f103 0210 	add.w	r2, r3, #16
 8002328:	ca07      	ldmia	r2, {r0, r1, r2}
 800232a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800232e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002330:	f7fe fba8 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->e, !seven_seg->active_low);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	9203      	str	r2, [sp, #12]
 800234a:	466c      	mov	r4, sp
 800234c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002350:	ca07      	ldmia	r2, {r0, r1, r2}
 8002352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002356:	3370      	adds	r3, #112	; 0x70
 8002358:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800235a:	f7fe fb93 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->f, !seven_seg->active_low);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	9203      	str	r2, [sp, #12]
 8002374:	466c      	mov	r4, sp
 8002376:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800237a:	ca07      	ldmia	r2, {r0, r1, r2}
 800237c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002380:	338c      	adds	r3, #140	; 0x8c
 8002382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002384:	f7fe fb7e 	bl	8000a84 <SET_GPIO_PIN_VAL>
            SET_GPIO_PIN_VAL(seven_seg->g, !seven_seg->active_low);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	9203      	str	r2, [sp, #12]
 800239e:	466c      	mov	r4, sp
 80023a0:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80023a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80023a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80023aa:	33a8      	adds	r3, #168	; 0xa8
 80023ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ae:	f7fe fb69 	bl	8000a84 <SET_GPIO_PIN_VAL>
            break;
 80023b2:	e000      	b.n	80023b6 <fn_seven_seg_display+0xd6a>
        default:
            break;
 80023b4:	bf00      	nop
    }
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	bf00      	nop

080023c0 <enable_usart_interupt>:
uint8_t* data_ctrl_get_img(void);
void seven_seg_init(Seven_Seg*);
uint8_t process_img(uint8_t*);

__STATIC_INLINE
void enable_usart_interupt(void)  {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
    LL_USART_EnableIT_RXNE(g_st_usart2.pst_usart_sel);
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <enable_usart_interupt+0x20>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fc88 	bl	8000cde <LL_USART_EnableIT_RXNE>
    NVIC_EnableIRQ(USART2_IRQn);
 80023ce:	2026      	movs	r0, #38	; 0x26
 80023d0:	f7fd ff24 	bl	800021c <__NVIC_EnableIRQ>
    NVIC_SetPriority(USART2_IRQn, 0);
 80023d4:	2100      	movs	r1, #0
 80023d6:	2026      	movs	r0, #38	; 0x26
 80023d8:	f7fd ff62 	bl	80002a0 <__NVIC_SetPriority>
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000c0c 	.word	0x20000c0c

080023e4 <disable_usart_interupt>:

__STATIC_INLINE
void disable_usart_interupt(void)  {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
    LL_USART_DisableIT_RXNE(g_st_usart2.pst_usart_sel);
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <disable_usart_interupt+0x18>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe fc97 	bl	8000d20 <LL_USART_DisableIT_RXNE>
    NVIC_DisableIRQ(USART2_IRQn);
 80023f2:	2026      	movs	r0, #38	; 0x26
 80023f4:	f7fd ff30 	bl	8000258 <__NVIC_DisableIRQ>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000c0c 	.word	0x20000c0c

08002400 <main>:
ai_float out_data[AI_NETWORK_OUT_1_SIZE];

static ai_buffer* ai_input;
static ai_buffer* ai_output;

int main(void)  {
 8002400:	b580      	push	{r7, lr}
 8002402:	b0bc      	sub	sp, #240	; 0xf0
 8002404:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002406:	b672      	cpsid	i
}
 8002408:	bf00      	nop
    __disable_irq(); 
    fn_system_clock_config_80MHz();  // Initialize the system clock
 800240a:	f7fe f8d1 	bl	80005b0 <fn_system_clock_config_80MHz>
    crc_init();             // initialize CRC peripheral       
 800240e:	f7ff f84d 	bl	80014ac <crc_init>
    SETUP_USART2(115200);     // setup USART2 for printf
 8002412:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002416:	f7fe ff9f 	bl	8001358 <SETUP_USART2>

    Seven_Seg seven_seg;
    aiInit();
 800241a:	f000 f81b 	bl	8002454 <aiInit>
    data_ctrl_init();
 800241e:	f000 f87d 	bl	800251c <data_ctrl_init>
    seven_seg_init(&seven_seg);
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f8df 	bl	80025e8 <seven_seg_init>
  __ASM volatile ("cpsie i" : : : "memory");
 800242a:	b662      	cpsie	i
}
 800242c:	bf00      	nop

    __enable_irq();     // enable interrupts

    while (1) {
        uint8_t *img = data_ctrl_get_img();
 800242e:	f000 f88d 	bl	800254c <data_ctrl_get_img>
 8002432:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
        uint8_t pred = process_img(img);
 8002436:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800243a:	f000 f94f 	bl	80026dc <process_img>
 800243e:	4603      	mov	r3, r0
 8002440:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
        fn_seven_seg_display(&seven_seg, pred, 1);
 8002444:	f897 10eb 	ldrb.w	r1, [r7, #235]	; 0xeb
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2201      	movs	r2, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff f8fd 	bl	800164c <fn_seven_seg_display>
    while (1) {
 8002452:	e7ec      	b.n	800242e <main+0x2e>

08002454 <aiInit>:
//     // Update CMSIS variable
//     LL_SetSystemCoreClock(__LL_RCC_CALC_PLLCLK_FREQ(__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, LL_RCC_MSI_GetRange()), PLLM, PLLN, PLLR));
//     // LL_SetSystemCoreClock(80000000);
// }

int aiInit() {
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
    ai_error err;
    
    const ai_handle acts[] = {activations};
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <aiInit+0x54>)
 800245c:	603b      	str	r3, [r7, #0]
    err = ai_network_create_and_init(&network, acts, NULL);
 800245e:	463b      	mov	r3, r7
 8002460:	2200      	movs	r2, #0
 8002462:	4619      	mov	r1, r3
 8002464:	4811      	ldr	r0, [pc, #68]	; (80024ac <aiInit+0x58>)
 8002466:	f000 fc53 	bl	8002d10 <ai_network_create_and_init>
 800246a:	4603      	mov	r3, r0
 800246c:	607b      	str	r3, [r7, #4]
    if (err.type != AI_ERROR_NONE) {
 800246e:	793b      	ldrb	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <aiInit+0x26>
        return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002478:	e012      	b.n	80024a0 <aiInit+0x4c>
    }

    ai_input = ai_network_inputs_get(network, NULL);
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <aiInit+0x58>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fcb9 	bl	8002df8 <ai_network_inputs_get>
 8002486:	4603      	mov	r3, r0
 8002488:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <aiInit+0x5c>)
 800248a:	6013      	str	r3, [r2, #0]
    ai_output = ai_network_outputs_get(network, NULL);
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <aiInit+0x58>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fcca 	bl	8002e2c <ai_network_outputs_get>
 8002498:	4603      	mov	r3, r0
 800249a:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <aiInit+0x60>)
 800249c:	6013      	str	r3, [r2, #0]
    return 0;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	2000247c 	.word	0x2000247c
 80024ac:	20002478 	.word	0x20002478
 80024b0:	200144a4 	.word	0x200144a4
 80024b4:	200144a8 	.word	0x200144a8

080024b8 <aiRun>:

int aiRun(const void *in_data, void *out_data) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;
    ai_error err;

    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <aiRun+0x58>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <aiRun+0x5c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	605a      	str	r2, [r3, #4]

    n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <aiRun+0x60>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <aiRun+0x58>)
 80024d8:	6811      	ldr	r1, [r2, #0]
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <aiRun+0x5c>)
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fcfa 	bl	8002ed8 <ai_network_run>
 80024e4:	60f8      	str	r0, [r7, #12]
    if (n_batch != 1) {
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d00c      	beq.n	8002506 <aiRun+0x4e>
        err = ai_network_get_error(network);
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <aiRun+0x60>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fbeb 	bl	8002ccc <ai_network_get_error>
 80024f6:	4603      	mov	r3, r0
 80024f8:	60bb      	str	r3, [r7, #8]
        if (err.type != AI_ERROR_NONE) {
 80024fa:	7a3b      	ldrb	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <aiRun+0x4e>
            return -1;
 8002500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002504:	e000      	b.n	8002508 <aiRun+0x50>
        }
    };

    return 0;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200144a4 	.word	0x200144a4
 8002514:	200144a8 	.word	0x200144a8
 8002518:	20002478 	.word	0x20002478

0800251c <data_ctrl_init>:

void data_ctrl_init(void)    {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
    // setup DMA for USART2
    fn_usart_disable_dma_rx(&g_st_usart2);
 8002520:	4808      	ldr	r0, [pc, #32]	; (8002544 <data_ctrl_init+0x28>)
 8002522:	f7fe fea5 	bl	8001270 <fn_usart_disable_dma_rx>
    fn_setup_usart_dma_rx(&g_st_usart2, dma_rx_active_buffer, DMA_RX_BUFFER_SIZE);
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <data_ctrl_init+0x2c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f44f 6242 	mov.w	r2, #3104	; 0xc20
 800252e:	4619      	mov	r1, r3
 8002530:	4804      	ldr	r0, [pc, #16]	; (8002544 <data_ctrl_init+0x28>)
 8002532:	f7fe fe61 	bl	80011f8 <fn_setup_usart_dma_rx>
    fn_usart_enable_dma_rx(&g_st_usart2);
 8002536:	4803      	ldr	r0, [pc, #12]	; (8002544 <data_ctrl_init+0x28>)
 8002538:	f7fe fed6 	bl	80012e8 <fn_usart_enable_dma_rx>

    // enable intrupts for receiving commands
    enable_usart_interupt();
 800253c:	f7ff ff40 	bl	80023c0 <enable_usart_interupt>
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000c0c 	.word	0x20000c0c
 8002548:	20000000 	.word	0x20000000

0800254c <data_ctrl_get_img>:


uint8_t* data_ctrl_get_img(void) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0

    while(dma_rx_buffer_ready);        // wait for image to start being loaded into the buffer
 8002552:	bf00      	nop
 8002554:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <data_ctrl_get_img+0x88>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1fb      	bne.n	8002554 <data_ctrl_get_img+0x8>

    uint32_t data_read = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	607b      	str	r3, [r7, #4]

    // loop till we get a full image
    while(data_read < IMAGE_SIZE)   {
 8002560:	e006      	b.n	8002570 <data_ctrl_get_img+0x24>
        data_read = DMA_RX_BUFFER_SIZE - fn_usart_get_dma_cntr_rx(&g_st_usart2);
 8002562:	481d      	ldr	r0, [pc, #116]	; (80025d8 <data_ctrl_get_img+0x8c>)
 8002564:	f7fe fe9e 	bl	80012a4 <fn_usart_get_dma_cntr_rx>
 8002568:	4603      	mov	r3, r0
 800256a:	f5c3 6342 	rsb	r3, r3, #3104	; 0xc20
 800256e:	607b      	str	r3, [r7, #4]
    while(data_read < IMAGE_SIZE)   {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002576:	d3f4      	bcc.n	8002562 <data_ctrl_get_img+0x16>
    }

    // disable dma
    fn_usart_disable_dma_rx(&g_st_usart2);
 8002578:	4817      	ldr	r0, [pc, #92]	; (80025d8 <data_ctrl_get_img+0x8c>)
 800257a:	f7fe fe79 	bl	8001270 <fn_usart_disable_dma_rx>
    fn_usart_reset_counter_dma_rx(&g_st_usart2, DMA_RX_BUFFER_SIZE);
 800257e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002582:	4815      	ldr	r0, [pc, #84]	; (80025d8 <data_ctrl_get_img+0x8c>)
 8002584:	f7fe fe9e 	bl	80012c4 <fn_usart_reset_counter_dma_rx>

    // swap buffers
    uint8_t * image_ready;
    if (dma_rx_active_buffer == dma_rx_buffer_1) {
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <data_ctrl_get_img+0x90>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <data_ctrl_get_img+0x94>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d105      	bne.n	800259e <data_ctrl_get_img+0x52>
        dma_rx_active_buffer = dma_rx_buffer_2;
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <data_ctrl_get_img+0x90>)
 8002594:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <data_ctrl_get_img+0x98>)
 8002596:	601a      	str	r2, [r3, #0]
        image_ready = dma_rx_buffer_1;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <data_ctrl_get_img+0x94>)
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	e004      	b.n	80025a8 <data_ctrl_get_img+0x5c>
    } else {
        dma_rx_active_buffer = dma_rx_buffer_1;
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <data_ctrl_get_img+0x90>)
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <data_ctrl_get_img+0x94>)
 80025a2:	601a      	str	r2, [r3, #0]
        image_ready = dma_rx_buffer_2;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <data_ctrl_get_img+0x98>)
 80025a6:	603b      	str	r3, [r7, #0]
    }

    // enable dma
    dma_rx_buffer_ready = true;
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <data_ctrl_get_img+0x88>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
    fn_setup_usart_dma_rx(&g_st_usart2, dma_rx_active_buffer, DMA_RX_BUFFER_SIZE);
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <data_ctrl_get_img+0x90>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f44f 6242 	mov.w	r2, #3104	; 0xc20
 80025b6:	4619      	mov	r1, r3
 80025b8:	4807      	ldr	r0, [pc, #28]	; (80025d8 <data_ctrl_get_img+0x8c>)
 80025ba:	f7fe fe1d 	bl	80011f8 <fn_setup_usart_dma_rx>
    fn_usart_enable_dma_rx(&g_st_usart2);
 80025be:	4806      	ldr	r0, [pc, #24]	; (80025d8 <data_ctrl_get_img+0x8c>)
 80025c0:	f7fe fe92 	bl	80012e8 <fn_usart_enable_dma_rx>
    enable_usart_interupt();
 80025c4:	f7ff fefc 	bl	80023c0 <enable_usart_interupt>

    return image_ready;
 80025c8:	683b      	ldr	r3, [r7, #0]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000004 	.word	0x20000004
 80025d8:	20000c0c 	.word	0x20000c0c
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20000c30 	.word	0x20000c30
 80025e4:	20001854 	.word	0x20001854

080025e8 <seven_seg_init>:

void seven_seg_init(Seven_Seg *seven_seg) {
 80025e8:	b5b0      	push	{r4, r5, r7, lr}
 80025ea:	b0ba      	sub	sp, #232	; 0xe8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
    seven_seg->a = GPIO_OUTPUT_DEFAULT(GPIOB, LL_GPIO_PIN_1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a32      	ldr	r2, [pc, #200]	; (80026bc <seven_seg_init+0xd4>)
 80025f4:	461c      	mov	r4, r3
 80025f6:	4615      	mov	r5, r2
 80025f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    seven_seg->b = GPIO_OUTPUT_DEFAULT(GPIOB, LL_GPIO_PIN_2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <seven_seg_init+0xd8>)
 8002608:	f103 041c 	add.w	r4, r3, #28
 800260c:	4615      	mov	r5, r2
 800260e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    seven_seg->c = GPIO_OUTPUT_DEFAULT(GPIOB, LL_GPIO_PIN_3);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <seven_seg_init+0xdc>)
 800261e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8002622:	4615      	mov	r5, r2
 8002624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800262c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    seven_seg->d = GPIO_OUTPUT_DEFAULT(GPIOB, LL_GPIO_PIN_4);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a25      	ldr	r2, [pc, #148]	; (80026c8 <seven_seg_init+0xe0>)
 8002634:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8002638:	4615      	mov	r5, r2
 800263a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    seven_seg->e = GPIO_OUTPUT_DEFAULT(GPIOB, LL_GPIO_PIN_5);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a20      	ldr	r2, [pc, #128]	; (80026cc <seven_seg_init+0xe4>)
 800264a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800264e:	4615      	mov	r5, r2
 8002650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    seven_seg->f = GPIO_OUTPUT_DEFAULT(GPIOB, LL_GPIO_PIN_6);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <seven_seg_init+0xe8>)
 8002660:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 8002664:	4615      	mov	r5, r2
 8002666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800266a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800266e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    seven_seg->g = GPIO_OUTPUT_DEFAULT(GPIOB, LL_GPIO_PIN_7);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <seven_seg_init+0xec>)
 8002676:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 800267a:	4615      	mov	r5, r2
 800267c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    seven_seg->dot = GPIO_OUTPUT_DEFAULT(GPIOB, LL_GPIO_PIN_8);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <seven_seg_init+0xf0>)
 800268c:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8002690:	4615      	mov	r5, r2
 8002692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800269a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    seven_seg->active_low = 0;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    fn_seven_seg_init(seven_seg);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe ff22 	bl	80014f0 <fn_seven_seg_init>
    fn_seven_seg_clear(seven_seg);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7fe ff4e 	bl	800154e <fn_seven_seg_clear>
}
 80026b2:	bf00      	nop
 80026b4:	37e8      	adds	r7, #232	; 0xe8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	080065b8 	.word	0x080065b8
 80026c0:	080065d4 	.word	0x080065d4
 80026c4:	080065f0 	.word	0x080065f0
 80026c8:	0800660c 	.word	0x0800660c
 80026cc:	08006628 	.word	0x08006628
 80026d0:	08006644 	.word	0x08006644
 80026d4:	08006660 	.word	0x08006660
 80026d8:	0800667c 	.word	0x0800667c

080026dc <process_img>:

uint8_t process_img(uint8_t* img)  {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    // copy the image data into the input buffer
    for (int i = 0; i < AI_NETWORK_IN_1_SIZE; i++) {
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e010      	b.n	800270c <process_img+0x30>
        in_data[i] = (ai_float) img[i];
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fa:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <process_img+0x88>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < AI_NETWORK_IN_1_SIZE; i++) {
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3301      	adds	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002712:	dbea      	blt.n	80026ea <process_img+0xe>
    }

    // run the AI
    aiRun(in_data, out_data);
 8002714:	4914      	ldr	r1, [pc, #80]	; (8002768 <process_img+0x8c>)
 8002716:	4813      	ldr	r0, [pc, #76]	; (8002764 <process_img+0x88>)
 8002718:	f7ff fece 	bl	80024b8 <aiRun>

    // get the prediction (the index of the highest value in the output buffer)
    uint8_t prediction = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8002720:	2300      	movs	r3, #0
 8002722:	72bb      	strb	r3, [r7, #10]
 8002724:	e015      	b.n	8002752 <process_img+0x76>
        if (out_data[i] > out_data[prediction]) {
 8002726:	7abb      	ldrb	r3, [r7, #10]
 8002728:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <process_img+0x8c>)
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	ed93 7a00 	vldr	s14, [r3]
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <process_img+0x8c>)
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	dd01      	ble.n	800274c <process_img+0x70>
            prediction = i;
 8002748:	7abb      	ldrb	r3, [r7, #10]
 800274a:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 800274c:	7abb      	ldrb	r3, [r7, #10]
 800274e:	3301      	adds	r3, #1
 8002750:	72bb      	strb	r3, [r7, #10]
 8002752:	7abb      	ldrb	r3, [r7, #10]
 8002754:	2b09      	cmp	r3, #9
 8002756:	d9e6      	bls.n	8002726 <process_img+0x4a>
        }
    }
    return prediction;
 8002758:	7afb      	ldrb	r3, [r7, #11]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	2001147c 	.word	0x2001147c
 8002768:	2001447c 	.word	0x2001447c

0800276c <USART2_IRQHandler>:

/* uart handler to catch commands*/
void USART2_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0

    uint16_t data_read = DMA_RX_BUFFER_SIZE - fn_usart_get_dma_cntr_rx(&g_st_usart2);
 8002772:	4837      	ldr	r0, [pc, #220]	; (8002850 <USART2_IRQHandler+0xe4>)
 8002774:	f7fe fd96 	bl	80012a4 <fn_usart_get_dma_cntr_rx>
 8002778:	4603      	mov	r3, r0
 800277a:	f5c3 6342 	rsb	r3, r3, #3104	; 0xc20
 800277e:	80fb      	strh	r3, [r7, #6]

    if (data_read == 0)     // this should never happen, but just in case
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d05d      	beq.n	8002842 <USART2_IRQHandler+0xd6>
        return;

    if (data_read >= DMA_RX_BUFFER_SIZE)    {   // dma overflow
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800278c:	d305      	bcc.n	800279a <USART2_IRQHandler+0x2e>
        system_error = true;
 800278e:	4b31      	ldr	r3, [pc, #196]	; (8002854 <USART2_IRQHandler+0xe8>)
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
        USART2_SEND_STRING(AT_CMD_TS_STATUS_ERROR);     // we dont know what they wanted so send error
 8002794:	4830      	ldr	r0, [pc, #192]	; (8002858 <USART2_IRQHandler+0xec>)
 8002796:	f7fe fe25 	bl	80013e4 <USART2_SEND_STRING>
    }

    if (dma_rx_active_buffer[data_read-1] != '\n')      // we are looking for the newline character as a deliniator
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <USART2_IRQHandler+0xf0>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b0a      	cmp	r3, #10
 80027a8:	d14d      	bne.n	8002846 <USART2_IRQHandler+0xda>
        return;

    dma_rx_active_buffer[data_read] = '\0';     // convert to a string
 80027aa:	4b2c      	ldr	r3, [pc, #176]	; (800285c <USART2_IRQHandler+0xf0>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	4413      	add	r3, r2
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]

    if(STRING_CHK_EQ(AT_CMD_RQ_STATUS, (char *)dma_rx_active_buffer)) {
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <USART2_IRQHandler+0xf0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	4828      	ldr	r0, [pc, #160]	; (8002860 <USART2_IRQHandler+0xf4>)
 80027be:	f7fd fd03 	bl	80001c8 <STRING_CHK_EQ>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <USART2_IRQHandler+0x74>
        if(dma_rx_buffer_ready) {
 80027c8:	4b26      	ldr	r3, [pc, #152]	; (8002864 <USART2_IRQHandler+0xf8>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <USART2_IRQHandler+0x6c>
            USART2_SEND_STRING(AT_CMD_TS_STATUS_READY);
 80027d0:	4825      	ldr	r0, [pc, #148]	; (8002868 <USART2_IRQHandler+0xfc>)
 80027d2:	f7fe fe07 	bl	80013e4 <USART2_SEND_STRING>
 80027d6:	e028      	b.n	800282a <USART2_IRQHandler+0xbe>
        } else {
            USART2_SEND_STRING(AT_CMD_TS_STATUS_BUSY);
 80027d8:	4824      	ldr	r0, [pc, #144]	; (800286c <USART2_IRQHandler+0x100>)
 80027da:	f7fe fe03 	bl	80013e4 <USART2_SEND_STRING>
 80027de:	e024      	b.n	800282a <USART2_IRQHandler+0xbe>
        }
    } else if (STRING_CHK_EQ(AT_CMD_RD_IMAGE, (char *)dma_rx_active_buffer)) {      // image is being sent, disable interupt because this will take a while
 80027e0:	4b1e      	ldr	r3, [pc, #120]	; (800285c <USART2_IRQHandler+0xf0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	4822      	ldr	r0, [pc, #136]	; (8002870 <USART2_IRQHandler+0x104>)
 80027e8:	f7fd fcee 	bl	80001c8 <STRING_CHK_EQ>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <USART2_IRQHandler+0xa2>
        if(dma_rx_buffer_ready) {
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <USART2_IRQHandler+0xf8>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <USART2_IRQHandler+0x9a>
            dma_rx_buffer_ready = false;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <USART2_IRQHandler+0xf8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
            disable_usart_interupt();
 8002800:	f7ff fdf0 	bl	80023e4 <disable_usart_interupt>
 8002804:	e011      	b.n	800282a <USART2_IRQHandler+0xbe>
        } else {
            USART2_SEND_STRING(AT_CMD_TS_STATUS_BUSY);
 8002806:	4819      	ldr	r0, [pc, #100]	; (800286c <USART2_IRQHandler+0x100>)
 8002808:	f7fe fdec 	bl	80013e4 <USART2_SEND_STRING>
 800280c:	e00d      	b.n	800282a <USART2_IRQHandler+0xbe>
        }
    }
    else if (STRING_CHK_EQ(AT_CMD_RC_RESET, (char *)dma_rx_active_buffer)) {        // the oh sh!t button
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <USART2_IRQHandler+0xf0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	4817      	ldr	r0, [pc, #92]	; (8002874 <USART2_IRQHandler+0x108>)
 8002816:	f7fd fcd7 	bl	80001c8 <STRING_CHK_EQ>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <USART2_IRQHandler+0xb8>
        NVIC_SystemReset();
 8002820:	f7fd fd68 	bl	80002f4 <__NVIC_SystemReset>
    } else {
        USART2_SEND_STRING(AT_CMD_TS_CMD_INVALID);          // Invalid command - it doesn't speak stupid
 8002824:	4814      	ldr	r0, [pc, #80]	; (8002878 <USART2_IRQHandler+0x10c>)
 8002826:	f7fe fddd 	bl	80013e4 <USART2_SEND_STRING>
    }

    // reset dma counter
    fn_usart_disable_dma_rx(&g_st_usart2);
 800282a:	4809      	ldr	r0, [pc, #36]	; (8002850 <USART2_IRQHandler+0xe4>)
 800282c:	f7fe fd20 	bl	8001270 <fn_usart_disable_dma_rx>
    fn_usart_reset_counter_dma_rx(&g_st_usart2, DMA_RX_BUFFER_SIZE);
 8002830:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002834:	4806      	ldr	r0, [pc, #24]	; (8002850 <USART2_IRQHandler+0xe4>)
 8002836:	f7fe fd45 	bl	80012c4 <fn_usart_reset_counter_dma_rx>
    fn_usart_enable_dma_rx(&g_st_usart2);
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <USART2_IRQHandler+0xe4>)
 800283c:	f7fe fd54 	bl	80012e8 <fn_usart_enable_dma_rx>
 8002840:	e002      	b.n	8002848 <USART2_IRQHandler+0xdc>
        return;
 8002842:	bf00      	nop
 8002844:	e000      	b.n	8002848 <USART2_IRQHandler+0xdc>
        return;
 8002846:	bf00      	nop
            
}
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000c0c 	.word	0x20000c0c
 8002854:	20002475 	.word	0x20002475
 8002858:	08006698 	.word	0x08006698
 800285c:	20000000 	.word	0x20000000
 8002860:	080066ac 	.word	0x080066ac
 8002864:	20000004 	.word	0x20000004
 8002868:	080066b8 	.word	0x080066b8
 800286c:	080066cc 	.word	0x080066cc
 8002870:	080066dc 	.word	0x080066dc
 8002874:	080066e8 	.word	0x080066e8
 8002878:	080066f4 	.word	0x080066f4

0800287c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <SystemInit+0x20>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	4a05      	ldr	r2, [pc, #20]	; (800289c <SystemInit+0x20>)
 8002888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800288c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028a4:	f7ff ffea 	bl	800287c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028a8:	480c      	ldr	r0, [pc, #48]	; (80028dc <LoopForever+0x6>)
  ldr r1, =_edata
 80028aa:	490d      	ldr	r1, [pc, #52]	; (80028e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <LoopForever+0xe>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b0:	e002      	b.n	80028b8 <LoopCopyDataInit>

080028b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b6:	3304      	adds	r3, #4

080028b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028bc:	d3f9      	bcc.n	80028b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028c0:	4c0a      	ldr	r4, [pc, #40]	; (80028ec <LoopForever+0x16>)
  movs r3, #0
 80028c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c4:	e001      	b.n	80028ca <LoopFillZerobss>

080028c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c8:	3204      	adds	r2, #4

080028ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028cc:	d3fb      	bcc.n	80028c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ce:	f003 fe17 	bl	8006500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028d2:	f7ff fd95 	bl	8002400 <main>

080028d6 <LoopForever>:

LoopForever:
    b LoopForever
 80028d6:	e7fe      	b.n	80028d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e0:	20000bac 	.word	0x20000bac
  ldr r2, =_sidata
 80028e4:	08087f20 	.word	0x08087f20
  ldr r2, =_sbss
 80028e8:	20000bac 	.word	0x20000bac
  ldr r4, =_ebss
 80028ec:	20014560 	.word	0x20014560

080028f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028f0:	e7fe      	b.n	80028f0 <ADC1_2_IRQHandler>
	...

080028f4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	4a07      	ldr	r2, [pc, #28]	; (8002924 <LL_InitTick+0x30>)
 8002908:	3b01      	subs	r3, #1
 800290a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <LL_InitTick+0x30>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <LL_InitTick+0x30>)
 8002914:	2205      	movs	r2, #5
 8002916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000e010 	.word	0xe000e010

08002928 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002930:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ffdd 	bl	80028f4 <LL_InitTick>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <LL_SetSystemCoreClock+0x1c>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6013      	str	r3, [r2, #0]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000008 	.word	0x20000008

08002964 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	4847      	ldr	r0, [pc, #284]	; (8002a90 <network_configure_activations+0x12c>)
 8002974:	f000 fb8e 	bl	8003094 <ai_platform_get_activations_map>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d07d      	beq.n	8002a7a <network_configure_activations+0x116>
    /* Updating activations (byte) offsets */
    
    input_output_array.data = AI_PTR(g_network_activations_map[0] + 16896);
 800297e:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <network_configure_activations+0x12c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002986:	4a43      	ldr	r2, [pc, #268]	; (8002a94 <network_configure_activations+0x130>)
 8002988:	6093      	str	r3, [r2, #8]
    input_output_array.data_start = AI_PTR(g_network_activations_map[0] + 16896);
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <network_configure_activations+0x12c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002992:	4a40      	ldr	r2, [pc, #256]	; (8002a94 <network_configure_activations+0x130>)
 8002994:	60d3      	str	r3, [r2, #12]
    
    input_Transpose_output_array.data = AI_PTR(g_network_activations_map[0] + 29184);
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <network_configure_activations+0x12c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f503 43e4 	add.w	r3, r3, #29184	; 0x7200
 800299e:	4a3e      	ldr	r2, [pc, #248]	; (8002a98 <network_configure_activations+0x134>)
 80029a0:	6093      	str	r3, [r2, #8]
    input_Transpose_output_array.data_start = AI_PTR(g_network_activations_map[0] + 29184);
 80029a2:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <network_configure_activations+0x12c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f503 43e4 	add.w	r3, r3, #29184	; 0x7200
 80029aa:	4a3b      	ldr	r2, [pc, #236]	; (8002a98 <network_configure_activations+0x134>)
 80029ac:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_0_Conv_output_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 16896);
 80029ae:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <network_configure_activations+0x12c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80029b6:	4a39      	ldr	r2, [pc, #228]	; (8002a9c <network_configure_activations+0x138>)
 80029b8:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_0_Conv_output_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 16896);
 80029ba:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <network_configure_activations+0x12c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80029c2:	4a36      	ldr	r2, [pc, #216]	; (8002a9c <network_configure_activations+0x138>)
 80029c4:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_0_Conv_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 80029c6:	4b32      	ldr	r3, [pc, #200]	; (8002a90 <network_configure_activations+0x12c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80029ce:	4a34      	ldr	r2, [pc, #208]	; (8002aa0 <network_configure_activations+0x13c>)
 80029d0:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_0_Conv_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 80029d2:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <network_configure_activations+0x12c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80029da:	4a31      	ldr	r2, [pc, #196]	; (8002aa0 <network_configure_activations+0x13c>)
 80029dc:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_3_Conv_output_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 24576);
 80029de:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <network_configure_activations+0x12c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80029e6:	4a2f      	ldr	r2, [pc, #188]	; (8002aa4 <network_configure_activations+0x140>)
 80029e8:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_3_Conv_output_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 24576);
 80029ea:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <network_configure_activations+0x12c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80029f2:	4a2c      	ldr	r2, [pc, #176]	; (8002aa4 <network_configure_activations+0x140>)
 80029f4:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_3_Conv_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 26624);
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <network_configure_activations+0x12c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f503 43d0 	add.w	r3, r3, #26624	; 0x6800
 80029fe:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <network_configure_activations+0x144>)
 8002a00:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_3_Conv_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 26624);
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <network_configure_activations+0x12c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f503 43d0 	add.w	r3, r3, #26624	; 0x6800
 8002a0a:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <network_configure_activations+0x144>)
 8002a0c:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_6_Conv_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 30720);
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <network_configure_activations+0x12c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 43f0 	add.w	r3, r3, #30720	; 0x7800
 8002a16:	4a25      	ldr	r2, [pc, #148]	; (8002aac <network_configure_activations+0x148>)
 8002a18:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_6_Conv_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 30720);
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <network_configure_activations+0x12c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f503 43f0 	add.w	r3, r3, #30720	; 0x7800
 8002a22:	4a22      	ldr	r2, [pc, #136]	; (8002aac <network_configure_activations+0x148>)
 8002a24:	60d3      	str	r3, [r2, #12]
    
    _Flatten_output_0_to_chlast_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <network_configure_activations+0x12c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <network_configure_activations+0x14c>)
 8002a2c:	6093      	str	r3, [r2, #8]
    _Flatten_output_0_to_chlast_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <network_configure_activations+0x12c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <network_configure_activations+0x14c>)
 8002a34:	60d3      	str	r3, [r2, #12]
    
    _classifier_classifier_0_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 30720);
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <network_configure_activations+0x12c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f503 43f0 	add.w	r3, r3, #30720	; 0x7800
 8002a3e:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <network_configure_activations+0x150>)
 8002a40:	6093      	str	r3, [r2, #8]
    _classifier_classifier_0_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 30720);
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <network_configure_activations+0x12c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f503 43f0 	add.w	r3, r3, #30720	; 0x7800
 8002a4a:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <network_configure_activations+0x150>)
 8002a4c:	60d3      	str	r3, [r2, #12]
    
    _classifier_classifier_1_Relu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <network_configure_activations+0x12c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <network_configure_activations+0x154>)
 8002a54:	6093      	str	r3, [r2, #8]
    _classifier_classifier_1_Relu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <network_configure_activations+0x12c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <network_configure_activations+0x154>)
 8002a5c:	60d3      	str	r3, [r2, #12]
    
    output_output_array.data = AI_PTR(g_network_activations_map[0] + 336);
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <network_configure_activations+0x12c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002a66:	4a15      	ldr	r2, [pc, #84]	; (8002abc <network_configure_activations+0x158>)
 8002a68:	6093      	str	r3, [r2, #8]
    output_output_array.data_start = AI_PTR(g_network_activations_map[0] + 336);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <network_configure_activations+0x12c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002a72:	4a12      	ldr	r2, [pc, #72]	; (8002abc <network_configure_activations+0x158>)
 8002a74:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e005      	b.n	8002a86 <network_configure_activations+0x122>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002a7a:	2213      	movs	r2, #19
 8002a7c:	2130      	movs	r1, #48	; 0x30
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fbec 	bl	800325c <ai_platform_network_set_error>
  return false;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200144ac 	.word	0x200144ac
 8002a94:	2000006c 	.word	0x2000006c
 8002a98:	2000007c 	.word	0x2000007c
 8002a9c:	2000004c 	.word	0x2000004c
 8002aa0:	2000008c 	.word	0x2000008c
 8002aa4:	2000005c 	.word	0x2000005c
 8002aa8:	2000009c 	.word	0x2000009c
 8002aac:	200000ac 	.word	0x200000ac
 8002ab0:	200000bc 	.word	0x200000bc
 8002ab4:	200000cc 	.word	0x200000cc
 8002ab8:	200000dc 	.word	0x200000dc
 8002abc:	200000ec 	.word	0x200000ec

08002ac0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	2101      	movs	r1, #1
 8002ace:	4874      	ldr	r0, [pc, #464]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002ad0:	f000 fa8c 	bl	8002fec <ai_platform_get_weights_map>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80d7 	beq.w	8002c8a <network_configure_weights+0x1ca>
    /* Updating weights (byte) offsets */
    
    _classifier_classifier_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002adc:	4b71      	ldr	r3, [pc, #452]	; (8002ca4 <network_configure_weights+0x1e4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ae4:	4a6f      	ldr	r2, [pc, #444]	; (8002ca4 <network_configure_weights+0x1e4>)
 8002ae6:	6013      	str	r3, [r2, #0]
    _classifier_classifier_0_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 64);
 8002ae8:	4b6d      	ldr	r3, [pc, #436]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3340      	adds	r3, #64	; 0x40
 8002aee:	4a6d      	ldr	r2, [pc, #436]	; (8002ca4 <network_configure_weights+0x1e4>)
 8002af0:	6093      	str	r3, [r2, #8]
    _classifier_classifier_0_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8002af2:	4b6b      	ldr	r3, [pc, #428]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a6b      	ldr	r2, [pc, #428]	; (8002ca4 <network_configure_weights+0x1e4>)
 8002af8:	60d3      	str	r3, [r2, #12]
    
    _classifier_classifier_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002afa:	4b6b      	ldr	r3, [pc, #428]	; (8002ca8 <network_configure_weights+0x1e8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b02:	4a69      	ldr	r2, [pc, #420]	; (8002ca8 <network_configure_weights+0x1e8>)
 8002b04:	6013      	str	r3, [r2, #0]
    _classifier_classifier_0_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 322624);
 8002b06:	4b66      	ldr	r3, [pc, #408]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f503 239d 	add.w	r3, r3, #321536	; 0x4e800
 8002b0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b12:	4a65      	ldr	r2, [pc, #404]	; (8002ca8 <network_configure_weights+0x1e8>)
 8002b14:	6093      	str	r3, [r2, #8]
    _classifier_classifier_0_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 322624);
 8002b16:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f503 239d 	add.w	r3, r3, #321536	; 0x4e800
 8002b1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b22:	4a61      	ldr	r2, [pc, #388]	; (8002ca8 <network_configure_weights+0x1e8>)
 8002b24:	60d3      	str	r3, [r2, #12]
    
    output_weights_array.format |= AI_FMT_FLAG_CONST;
 8002b26:	4b61      	ldr	r3, [pc, #388]	; (8002cac <network_configure_weights+0x1ec>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b2e:	4a5f      	ldr	r2, [pc, #380]	; (8002cac <network_configure_weights+0x1ec>)
 8002b30:	6013      	str	r3, [r2, #0]
    output_weights_array.data = AI_PTR(g_network_weights_map[0] + 322960);
 8002b32:	4b5b      	ldr	r3, [pc, #364]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f503 239d 	add.w	r3, r3, #321536	; 0x4e800
 8002b3a:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8002b3e:	4a5b      	ldr	r2, [pc, #364]	; (8002cac <network_configure_weights+0x1ec>)
 8002b40:	6093      	str	r3, [r2, #8]
    output_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 322960);
 8002b42:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f503 239d 	add.w	r3, r3, #321536	; 0x4e800
 8002b4a:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8002b4e:	4a57      	ldr	r2, [pc, #348]	; (8002cac <network_configure_weights+0x1ec>)
 8002b50:	60d3      	str	r3, [r2, #12]
    
    output_bias_array.format |= AI_FMT_FLAG_CONST;
 8002b52:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <network_configure_weights+0x1f0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b5a:	4a55      	ldr	r2, [pc, #340]	; (8002cb0 <network_configure_weights+0x1f0>)
 8002b5c:	6013      	str	r3, [r2, #0]
    output_bias_array.data = AI_PTR(g_network_weights_map[0] + 326320);
 8002b5e:	4b50      	ldr	r3, [pc, #320]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f503 239f 	add.w	r3, r3, #325632	; 0x4f800
 8002b66:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002b6a:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <network_configure_weights+0x1f0>)
 8002b6c:	6093      	str	r3, [r2, #8]
    output_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 326320);
 8002b6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f503 239f 	add.w	r3, r3, #325632	; 0x4f800
 8002b76:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002b7a:	4a4d      	ldr	r2, [pc, #308]	; (8002cb0 <network_configure_weights+0x1f0>)
 8002b7c:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_0_Conv_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002b7e:	4b4d      	ldr	r3, [pc, #308]	; (8002cb4 <network_configure_weights+0x1f4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b86:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <network_configure_weights+0x1f4>)
 8002b88:	6013      	str	r3, [r2, #0]
    _feature_extractor_feature_extractor_0_Conv_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 326360);
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f503 239f 	add.w	r3, r3, #325632	; 0x4f800
 8002b92:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8002b96:	4a47      	ldr	r2, [pc, #284]	; (8002cb4 <network_configure_weights+0x1f4>)
 8002b98:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_0_Conv_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 326360);
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f503 239f 	add.w	r3, r3, #325632	; 0x4f800
 8002ba2:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8002ba6:	4a43      	ldr	r2, [pc, #268]	; (8002cb4 <network_configure_weights+0x1f4>)
 8002ba8:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_0_Conv_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002baa:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <network_configure_weights+0x1f8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bb2:	4a41      	ldr	r2, [pc, #260]	; (8002cb8 <network_configure_weights+0x1f8>)
 8002bb4:	6013      	str	r3, [r2, #0]
    _feature_extractor_feature_extractor_0_Conv_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 328160);
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8002bbe:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002bc2:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <network_configure_weights+0x1f8>)
 8002bc4:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_0_Conv_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 328160);
 8002bc6:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8002bce:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002bd2:	4a39      	ldr	r2, [pc, #228]	; (8002cb8 <network_configure_weights+0x1f8>)
 8002bd4:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_3_Conv_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <network_configure_weights+0x1fc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bde:	4a37      	ldr	r2, [pc, #220]	; (8002cbc <network_configure_weights+0x1fc>)
 8002be0:	6013      	str	r3, [r2, #0]
    _feature_extractor_feature_extractor_3_Conv_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 328184);
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8002bea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bee:	4a33      	ldr	r2, [pc, #204]	; (8002cbc <network_configure_weights+0x1fc>)
 8002bf0:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_3_Conv_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 328184);
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8002bfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <network_configure_weights+0x1fc>)
 8002c00:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_3_Conv_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002c02:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <network_configure_weights+0x200>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c0a:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <network_configure_weights+0x200>)
 8002c0c:	6013      	str	r3, [r2, #0]
    _feature_extractor_feature_extractor_3_Conv_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 337784);
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f503 23a4 	add.w	r3, r3, #335872	; 0x52000
 8002c16:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8002c1a:	4a29      	ldr	r2, [pc, #164]	; (8002cc0 <network_configure_weights+0x200>)
 8002c1c:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_3_Conv_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 337784);
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f503 23a4 	add.w	r3, r3, #335872	; 0x52000
 8002c26:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8002c2a:	4a25      	ldr	r2, [pc, #148]	; (8002cc0 <network_configure_weights+0x200>)
 8002c2c:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_6_Conv_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002c2e:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <network_configure_weights+0x204>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c36:	4a23      	ldr	r2, [pc, #140]	; (8002cc4 <network_configure_weights+0x204>)
 8002c38:	6013      	str	r3, [r2, #0]
    _feature_extractor_feature_extractor_6_Conv_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 337848);
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f503 23a4 	add.w	r3, r3, #335872	; 0x52000
 8002c42:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8002c46:	4a1f      	ldr	r2, [pc, #124]	; (8002cc4 <network_configure_weights+0x204>)
 8002c48:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_6_Conv_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 337848);
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f503 23a4 	add.w	r3, r3, #335872	; 0x52000
 8002c52:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8002c56:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <network_configure_weights+0x204>)
 8002c58:	60d3      	str	r3, [r2, #12]
    
    _feature_extractor_feature_extractor_6_Conv_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <network_configure_weights+0x208>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c62:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <network_configure_weights+0x208>)
 8002c64:	6013      	str	r3, [r2, #0]
    _feature_extractor_feature_extractor_6_Conv_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 529848);
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f503 2301 	add.w	r3, r3, #528384	; 0x81000
 8002c6e:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8002c72:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <network_configure_weights+0x208>)
 8002c74:	6093      	str	r3, [r2, #8]
    _feature_extractor_feature_extractor_6_Conv_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 529848);
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <network_configure_weights+0x1e0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f503 2301 	add.w	r3, r3, #528384	; 0x81000
 8002c7e:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8002c82:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <network_configure_weights+0x208>)
 8002c84:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e005      	b.n	8002c96 <network_configure_weights+0x1d6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002c8a:	2212      	movs	r2, #18
 8002c8c:	2130      	movs	r1, #48	; 0x30
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fae4 	bl	800325c <ai_platform_network_set_error>
  return false;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200144b0 	.word	0x200144b0
 8002ca4:	2000000c 	.word	0x2000000c
 8002ca8:	2000001c 	.word	0x2000001c
 8002cac:	2000002c 	.word	0x2000002c
 8002cb0:	2000003c 	.word	0x2000003c
 8002cb4:	200000fc 	.word	0x200000fc
 8002cb8:	2000010c 	.word	0x2000010c
 8002cbc:	2000011c 	.word	0x2000011c
 8002cc0:	2000012c 	.word	0x2000012c
 8002cc4:	2000013c 	.word	0x2000013c
 8002cc8:	2000014c 	.word	0x2000014c

08002ccc <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fa53 	bl	8003180 <ai_platform_network_get_error>
 8002cda:	4603      	mov	r3, r0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <ai_network_create+0x28>)
 8002cfa:	6839      	ldr	r1, [r7, #0]
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fc59 	bl	80035b4 <ai_platform_network_create>
 8002d02:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000b08 	.word	0x20000b08

08002d10 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b096      	sub	sp, #88	; 0x58
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff ffe0 	bl	8002ce4 <ai_network_create>
 8002d24:	4603      	mov	r3, r0
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8002d28:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <ai_network_create_and_init+0x24>
        return err;
 8002d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d32:	e05d      	b.n	8002df0 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f8dd 	bl	8002ef8 <ai_network_data_params_get>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f083 0301 	eor.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ffbc 	bl	8002ccc <ai_network_get_error>
 8002d54:	4603      	mov	r3, r0
 8002d56:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8002d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5a:	e049      	b.n	8002df0 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	657b      	str	r3, [r7, #84]	; 0x54
 8002d66:	e00e      	b.n	8002d86 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8002d68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4413      	add	r3, r2
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	330c      	adds	r3, #12
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f922 	bl	8002fc4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d82:	3301      	adds	r3, #1
 8002d84:	657b      	str	r3, [r7, #84]	; 0x54
 8002d86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	dbeb      	blt.n	8002d68 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	653b      	str	r3, [r7, #80]	; 0x50
 8002d9a:	e00e      	b.n	8002dba <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002d9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	3304      	adds	r3, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f908 	bl	8002fc4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db6:	3301      	adds	r3, #1
 8002db8:	653b      	str	r3, [r7, #80]	; 0x50
 8002dba:	8b7b      	ldrh	r3, [r7, #26]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	dbeb      	blt.n	8002d9c <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f107 0214 	add.w	r2, r7, #20
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f846 	bl	8002e60 <ai_network_init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f083 0301 	eor.w	r3, r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff71 	bl	8002ccc <ai_network_get_error>
 8002dea:	4603      	mov	r3, r0
 8002dec:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8002dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3758      	adds	r7, #88	; 0x58
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <ai_network_inputs_get+0x2c>)
 8002e0a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <ai_network_inputs_get+0x30>)
 8002e10:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8002e12:	6839      	ldr	r1, [r7, #0]
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fa27 	bl	8003268 <ai_platform_inputs_get>
 8002e1a:	4603      	mov	r3, r0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000b08 	.word	0x20000b08
 8002e28:	a1c00100 	.word	0xa1c00100

08002e2c <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d104      	bne.n	8002e46 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <ai_network_outputs_get+0x2c>)
 8002e3e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <ai_network_outputs_get+0x30>)
 8002e44:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002e46:	6839      	ldr	r1, [r7, #0]
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fae3 	bl	8003414 <ai_platform_outputs_get>
 8002e4e:	4603      	mov	r3, r0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000b08 	.word	0x20000b08
 8002e5c:	a1c00100 	.word	0xa1c00100

08002e60 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002e6a:	6839      	ldr	r1, [r7, #0]
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fc77 	bl	8003760 <ai_platform_network_init>
 8002e72:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <ai_network_init+0x1e>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e028      	b.n	8002ed0 <ai_network_init+0x70>

  ai_bool ok = true;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f7ff fe1b 	bl	8002ac0 <network_configure_weights>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf14      	ite	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	2300      	moveq	r3, #0
 8002e9a:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8002e9c:	6839      	ldr	r1, [r7, #0]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff fd60 	bl	8002964 <network_configure_activations>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	7afb      	ldrb	r3, [r7, #11]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fd40 	bl	800393c <ai_platform_network_post_init>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	7afb      	ldrb	r3, [r7, #11]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	72fb      	strb	r3, [r7, #11]

  return ok;
 8002ece:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fdaf 	bl	8003a4c <ai_platform_network_process>
 8002eee:	4603      	mov	r3, r0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <ai_network_data_params_get+0x12>
 8002f06:	2300      	movs	r3, #0
 8002f08:	e016      	b.n	8002f38 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <ai_network_data_params_get+0x48>)
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f14:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <ai_network_data_params_get+0x4c>)
 8002f1a:	f107 0308 	add.w	r3, r7, #8
 8002f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f22:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8002f26:	f107 0210 	add.w	r2, r7, #16
 8002f2a:	f107 0308 	add.w	r3, r7, #8
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f903 	bl	800313c <ai_platform_bind_network_params>
 8002f36:	4603      	mov	r3, r0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	08006724 	.word	0x08006724
 8002f44:	0800672c 	.word	0x0800672c

08002f48 <ai_buffer_get_size>:
 8002f48:	b378      	cbz	r0, 8002faa <ai_buffer_get_size+0x62>
 8002f4a:	b410      	push	{r4}
 8002f4c:	6803      	ldr	r3, [r0, #0]
 8002f4e:	4a17      	ldr	r2, [pc, #92]	; (8002fac <ai_buffer_get_size+0x64>)
 8002f50:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002f54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d01e      	beq.n	8002f9a <ai_buffer_get_size+0x52>
 8002f5c:	6984      	ldr	r4, [r0, #24]
 8002f5e:	6862      	ldr	r2, [r4, #4]
 8002f60:	7d03      	ldrb	r3, [r0, #20]
 8002f62:	6941      	ldr	r1, [r0, #20]
 8002f64:	f1a3 0301 	sub.w	r3, r3, #1
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8002f72:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8002f76:	da0b      	bge.n	8002f90 <ai_buffer_get_size+0x48>
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <ai_buffer_get_size+0x3a>
 8002f7c:	2802      	cmp	r0, #2
 8002f7e:	d007      	beq.n	8002f90 <ai_buffer_get_size+0x48>
 8002f80:	2302      	movs	r3, #2
 8002f82:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4298      	cmp	r0, r3
 8002f8a:	fb01 f202 	mul.w	r2, r1, r2
 8002f8e:	d1f3      	bne.n	8002f78 <ai_buffer_get_size+0x30>
 8002f90:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	d0de      	beq.n	8002f5c <ai_buffer_get_size+0x14>
 8002f9e:	6984      	ldr	r4, [r0, #24]
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	331f      	adds	r3, #31
 8002fa4:	f023 021f 	bic.w	r2, r3, #31
 8002fa8:	e7da      	b.n	8002f60 <ai_buffer_get_size+0x18>
 8002faa:	4770      	bx	lr
 8002fac:	000400c0 	.word	0x000400c0

08002fb0 <ai_buffer_array_sane>:
 8002fb0:	b138      	cbz	r0, 8002fc2 <ai_buffer_array_sane+0x12>
 8002fb2:	6843      	ldr	r3, [r0, #4]
 8002fb4:	b123      	cbz	r3, 8002fc0 <ai_buffer_array_sane+0x10>
 8002fb6:	8840      	ldrh	r0, [r0, #2]
 8002fb8:	3800      	subs	r0, #0
 8002fba:	bf18      	it	ne
 8002fbc:	2001      	movne	r0, #1
 8002fbe:	4770      	bx	lr
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	4770      	bx	lr

08002fc4 <ai_buffer_array_item_set_address>:
 8002fc4:	b150      	cbz	r0, 8002fdc <ai_buffer_array_item_set_address+0x18>
 8002fc6:	6843      	ldr	r3, [r0, #4]
 8002fc8:	b14b      	cbz	r3, 8002fde <ai_buffer_array_item_set_address+0x1a>
 8002fca:	8840      	ldrh	r0, [r0, #2]
 8002fcc:	b900      	cbnz	r0, 8002fd0 <ai_buffer_array_item_set_address+0xc>
 8002fce:	4770      	bx	lr
 8002fd0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002fd4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002fd8:	2001      	movs	r0, #1
 8002fda:	604a      	str	r2, [r1, #4]
 8002fdc:	4770      	bx	lr
 8002fde:	4618      	mov	r0, r3
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <_ai_platform_acquire_crc>:
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	4770      	bx	lr

08002fe8 <_ai_platform_release_crc>:
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop

08002fec <ai_platform_get_weights_map>:
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	d037      	beq.n	8003060 <ai_platform_get_weights_map+0x74>
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	b1a0      	cbz	r0, 8003020 <ai_platform_get_weights_map+0x34>
 8002ff6:	460f      	mov	r7, r1
 8002ff8:	b191      	cbz	r1, 8003020 <ai_platform_get_weights_map+0x34>
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <ai_platform_get_weights_map+0xa4>)
 8002ffc:	6810      	ldr	r0, [r2, #0]
 8002ffe:	4298      	cmp	r0, r3
 8003000:	4615      	mov	r5, r2
 8003002:	d00f      	beq.n	8003024 <ai_platform_get_weights_map+0x38>
 8003004:	6855      	ldr	r5, [r2, #4]
 8003006:	b15d      	cbz	r5, 8003020 <ai_platform_get_weights_map+0x34>
 8003008:	682e      	ldr	r6, [r5, #0]
 800300a:	429e      	cmp	r6, r3
 800300c:	d02a      	beq.n	8003064 <ai_platform_get_weights_map+0x78>
 800300e:	f1a1 0001 	sub.w	r0, r1, #1
 8003012:	6025      	str	r5, [r4, #0]
 8003014:	fab0 f080 	clz	r0, r0
 8003018:	0940      	lsrs	r0, r0, #5
 800301a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800301c:	42a7      	cmp	r7, r4
 800301e:	d034      	beq.n	800308a <ai_platform_get_weights_map+0x9e>
 8003020:	2000      	movs	r0, #0
 8003022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003024:	1d10      	adds	r0, r2, #4
 8003026:	f7ff ffc3 	bl	8002fb0 <ai_buffer_array_sane>
 800302a:	2800      	cmp	r0, #0
 800302c:	d0f8      	beq.n	8003020 <ai_platform_get_weights_map+0x34>
 800302e:	88eb      	ldrh	r3, [r5, #6]
 8003030:	429f      	cmp	r7, r3
 8003032:	d1f5      	bne.n	8003020 <ai_platform_get_weights_map+0x34>
 8003034:	f04f 0e00 	mov.w	lr, #0
 8003038:	1f23      	subs	r3, r4, #4
 800303a:	4670      	mov	r0, lr
 800303c:	68aa      	ldr	r2, [r5, #8]
 800303e:	eb02 0c0e 	add.w	ip, r2, lr
 8003042:	f10e 0e1c 	add.w	lr, lr, #28
 8003046:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800304a:	b124      	cbz	r4, 8003056 <ai_platform_get_weights_map+0x6a>
 800304c:	3001      	adds	r0, #1
 800304e:	4287      	cmp	r7, r0
 8003050:	f843 4f04 	str.w	r4, [r3, #4]!
 8003054:	d1f2      	bne.n	800303c <ai_platform_get_weights_map+0x50>
 8003056:	1a38      	subs	r0, r7, r0
 8003058:	fab0 f080 	clz	r0, r0
 800305c:	0940      	lsrs	r0, r0, #5
 800305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003060:	2000      	movs	r0, #0
 8003062:	4770      	bx	lr
 8003064:	1f23      	subs	r3, r4, #4
 8003066:	4628      	mov	r0, r5
 8003068:	2400      	movs	r4, #0
 800306a:	e000      	b.n	800306e <ai_platform_get_weights_map+0x82>
 800306c:	4614      	mov	r4, r2
 800306e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003072:	42b2      	cmp	r2, r6
 8003074:	d0d2      	beq.n	800301c <ai_platform_get_weights_map+0x30>
 8003076:	f843 2f04 	str.w	r2, [r3, #4]!
 800307a:	1c62      	adds	r2, r4, #1
 800307c:	4297      	cmp	r7, r2
 800307e:	d1f5      	bne.n	800306c <ai_platform_get_weights_map+0x80>
 8003080:	3402      	adds	r4, #2
 8003082:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003086:	42b3      	cmp	r3, r6
 8003088:	d1ca      	bne.n	8003020 <ai_platform_get_weights_map+0x34>
 800308a:	2001      	movs	r0, #1
 800308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800308e:	bf00      	nop
 8003090:	a1facade 	.word	0xa1facade

08003094 <ai_platform_get_activations_map>:
 8003094:	2a00      	cmp	r2, #0
 8003096:	d038      	beq.n	800310a <ai_platform_get_activations_map+0x76>
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	4604      	mov	r4, r0
 800309c:	b1a0      	cbz	r0, 80030c8 <ai_platform_get_activations_map+0x34>
 800309e:	460f      	mov	r7, r1
 80030a0:	b191      	cbz	r1, 80030c8 <ai_platform_get_activations_map+0x34>
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <ai_platform_get_activations_map+0xa4>)
 80030a4:	6810      	ldr	r0, [r2, #0]
 80030a6:	4298      	cmp	r0, r3
 80030a8:	4615      	mov	r5, r2
 80030aa:	d00f      	beq.n	80030cc <ai_platform_get_activations_map+0x38>
 80030ac:	6a15      	ldr	r5, [r2, #32]
 80030ae:	b15d      	cbz	r5, 80030c8 <ai_platform_get_activations_map+0x34>
 80030b0:	682e      	ldr	r6, [r5, #0]
 80030b2:	429e      	cmp	r6, r3
 80030b4:	d02b      	beq.n	800310e <ai_platform_get_activations_map+0x7a>
 80030b6:	f1a1 0001 	sub.w	r0, r1, #1
 80030ba:	6025      	str	r5, [r4, #0]
 80030bc:	fab0 f080 	clz	r0, r0
 80030c0:	0940      	lsrs	r0, r0, #5
 80030c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030c4:	42a7      	cmp	r7, r4
 80030c6:	d035      	beq.n	8003134 <ai_platform_get_activations_map+0xa0>
 80030c8:	2000      	movs	r0, #0
 80030ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030cc:	f102 000c 	add.w	r0, r2, #12
 80030d0:	f7ff ff6e 	bl	8002fb0 <ai_buffer_array_sane>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d0f7      	beq.n	80030c8 <ai_platform_get_activations_map+0x34>
 80030d8:	89eb      	ldrh	r3, [r5, #14]
 80030da:	429f      	cmp	r7, r3
 80030dc:	d1f4      	bne.n	80030c8 <ai_platform_get_activations_map+0x34>
 80030de:	f04f 0e00 	mov.w	lr, #0
 80030e2:	1f23      	subs	r3, r4, #4
 80030e4:	4670      	mov	r0, lr
 80030e6:	692a      	ldr	r2, [r5, #16]
 80030e8:	eb02 0c0e 	add.w	ip, r2, lr
 80030ec:	f10e 0e1c 	add.w	lr, lr, #28
 80030f0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80030f4:	b124      	cbz	r4, 8003100 <ai_platform_get_activations_map+0x6c>
 80030f6:	3001      	adds	r0, #1
 80030f8:	4287      	cmp	r7, r0
 80030fa:	f843 4f04 	str.w	r4, [r3, #4]!
 80030fe:	d1f2      	bne.n	80030e6 <ai_platform_get_activations_map+0x52>
 8003100:	1a38      	subs	r0, r7, r0
 8003102:	fab0 f080 	clz	r0, r0
 8003106:	0940      	lsrs	r0, r0, #5
 8003108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800310a:	2000      	movs	r0, #0
 800310c:	4770      	bx	lr
 800310e:	1f23      	subs	r3, r4, #4
 8003110:	4628      	mov	r0, r5
 8003112:	2400      	movs	r4, #0
 8003114:	e000      	b.n	8003118 <ai_platform_get_activations_map+0x84>
 8003116:	4614      	mov	r4, r2
 8003118:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800311c:	42b2      	cmp	r2, r6
 800311e:	d0d1      	beq.n	80030c4 <ai_platform_get_activations_map+0x30>
 8003120:	f843 2f04 	str.w	r2, [r3, #4]!
 8003124:	1c62      	adds	r2, r4, #1
 8003126:	4297      	cmp	r7, r2
 8003128:	d1f5      	bne.n	8003116 <ai_platform_get_activations_map+0x82>
 800312a:	3402      	adds	r4, #2
 800312c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003130:	42b3      	cmp	r3, r6
 8003132:	d1c9      	bne.n	80030c8 <ai_platform_get_activations_map+0x34>
 8003134:	2001      	movs	r0, #1
 8003136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003138:	a1facade 	.word	0xa1facade

0800313c <ai_platform_bind_network_params>:
 800313c:	b1a0      	cbz	r0, 8003168 <ai_platform_bind_network_params+0x2c>
 800313e:	b1b1      	cbz	r1, 800316e <ai_platform_bind_network_params+0x32>
 8003140:	b1c2      	cbz	r2, 8003174 <ai_platform_bind_network_params+0x38>
 8003142:	b410      	push	{r4}
 8003144:	4603      	mov	r3, r0
 8003146:	4c0d      	ldr	r4, [pc, #52]	; (800317c <ai_platform_bind_network_params+0x40>)
 8003148:	f843 4b04 	str.w	r4, [r3], #4
 800314c:	f100 0c0c 	add.w	ip, r0, #12
 8003150:	c903      	ldmia	r1, {r0, r1}
 8003152:	e883 0003 	stmia.w	r3, {r0, r1}
 8003156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800315a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800315e:	2301      	movs	r3, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	4603      	mov	r3, r0
 800316a:	4618      	mov	r0, r3
 800316c:	4770      	bx	lr
 800316e:	460b      	mov	r3, r1
 8003170:	4618      	mov	r0, r3
 8003172:	4770      	bx	lr
 8003174:	4613      	mov	r3, r2
 8003176:	4618      	mov	r0, r3
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	a1facade 	.word	0xa1facade

08003180 <ai_platform_network_get_error>:
 8003180:	b510      	push	{r4, lr}
 8003182:	b1f0      	cbz	r0, 80031c2 <ai_platform_network_get_error+0x42>
 8003184:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <ai_platform_network_get_error+0xc4>)
 8003186:	6802      	ldr	r2, [r0, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	4604      	mov	r4, r0
 800318c:	d119      	bne.n	80031c2 <ai_platform_network_get_error+0x42>
 800318e:	f7ff ff29 	bl	8002fe4 <_ai_platform_acquire_crc>
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <ai_platform_network_get_error+0xc8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319e:	d03c      	beq.n	800321a <ai_platform_network_get_error+0x9a>
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <ai_platform_network_get_error+0xcc>)
 80031a2:	2301      	movs	r3, #1
 80031a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80031a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1fb      	bne.n	80031a8 <ai_platform_network_get_error+0x28>
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <ai_platform_network_get_error+0xd0>)
 80031b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80031b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80031ba:	4b26      	ldr	r3, [pc, #152]	; (8003254 <ai_platform_network_get_error+0xd4>)
 80031bc:	429a      	cmp	r2, r3
 80031be:	d038      	beq.n	8003232 <ai_platform_network_get_error+0xb2>
 80031c0:	e7fe      	b.n	80031c0 <ai_platform_network_get_error+0x40>
 80031c2:	f7ff ff0f 	bl	8002fe4 <_ai_platform_acquire_crc>
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <ai_platform_network_get_error+0xc8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d2:	d010      	beq.n	80031f6 <ai_platform_network_get_error+0x76>
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <ai_platform_network_get_error+0xcc>)
 80031d6:	2301      	movs	r3, #1
 80031d8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80031dc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1fb      	bne.n	80031dc <ai_platform_network_get_error+0x5c>
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <ai_platform_network_get_error+0xd0>)
 80031e6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80031ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80031ee:	4b19      	ldr	r3, [pc, #100]	; (8003254 <ai_platform_network_get_error+0xd4>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d00d      	beq.n	8003210 <ai_platform_network_get_error+0x90>
 80031f4:	e7fe      	b.n	80031f4 <ai_platform_network_get_error+0x74>
 80031f6:	4a18      	ldr	r2, [pc, #96]	; (8003258 <ai_platform_network_get_error+0xd8>)
 80031f8:	2301      	movs	r3, #1
 80031fa:	6093      	str	r3, [r2, #8]
 80031fc:	6893      	ldr	r3, [r2, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1fc      	bne.n	80031fc <ai_platform_network_get_error+0x7c>
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <ai_platform_network_get_error+0xd0>)
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <ai_platform_network_get_error+0xd4>)
 800320a:	429a      	cmp	r2, r3
 800320c:	d000      	beq.n	8003210 <ai_platform_network_get_error+0x90>
 800320e:	e7fe      	b.n	800320e <ai_platform_network_get_error+0x8e>
 8003210:	f7ff feea 	bl	8002fe8 <_ai_platform_release_crc>
 8003214:	f241 0010 	movw	r0, #4112	; 0x1010
 8003218:	bd10      	pop	{r4, pc}
 800321a:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <ai_platform_network_get_error+0xd8>)
 800321c:	2301      	movs	r3, #1
 800321e:	6093      	str	r3, [r2, #8]
 8003220:	6893      	ldr	r3, [r2, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1fc      	bne.n	8003220 <ai_platform_network_get_error+0xa0>
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <ai_platform_network_get_error+0xd0>)
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <ai_platform_network_get_error+0xd4>)
 800322e:	429a      	cmp	r2, r3
 8003230:	d107      	bne.n	8003242 <ai_platform_network_get_error+0xc2>
 8003232:	f7ff fed9 	bl	8002fe8 <_ai_platform_release_crc>
 8003236:	f104 0010 	add.w	r0, r4, #16
 800323a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800323e:	f000 be8d 	b.w	8003f5c <core_get_error>
 8003242:	e7fe      	b.n	8003242 <ai_platform_network_get_error+0xc2>
 8003244:	a1c00100 	.word	0xa1c00100
 8003248:	e0042000 	.word	0xe0042000
 800324c:	58024000 	.word	0x58024000
 8003250:	f407a5c2 	.word	0xf407a5c2
 8003254:	b5e8b5cd 	.word	0xb5e8b5cd
 8003258:	40023000 	.word	0x40023000

0800325c <ai_platform_network_set_error>:
 800325c:	b110      	cbz	r0, 8003264 <ai_platform_network_set_error+0x8>
 800325e:	3010      	adds	r0, #16
 8003260:	f000 be82 	b.w	8003f68 <core_set_error>
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop

08003268 <ai_platform_inputs_get>:
 8003268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800326c:	b085      	sub	sp, #20
 800326e:	9102      	str	r1, [sp, #8]
 8003270:	b1f0      	cbz	r0, 80032b0 <ai_platform_inputs_get+0x48>
 8003272:	4b62      	ldr	r3, [pc, #392]	; (80033fc <ai_platform_inputs_get+0x194>)
 8003274:	6802      	ldr	r2, [r0, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	4607      	mov	r7, r0
 800327a:	d119      	bne.n	80032b0 <ai_platform_inputs_get+0x48>
 800327c:	f7ff feb2 	bl	8002fe4 <_ai_platform_acquire_crc>
 8003280:	4b5f      	ldr	r3, [pc, #380]	; (8003400 <ai_platform_inputs_get+0x198>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	d03d      	beq.n	800330a <ai_platform_inputs_get+0xa2>
 800328e:	4a5d      	ldr	r2, [pc, #372]	; (8003404 <ai_platform_inputs_get+0x19c>)
 8003290:	2301      	movs	r3, #1
 8003292:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003296:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1fb      	bne.n	8003296 <ai_platform_inputs_get+0x2e>
 800329e:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <ai_platform_inputs_get+0x1a0>)
 80032a0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80032a4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80032a8:	4b58      	ldr	r3, [pc, #352]	; (800340c <ai_platform_inputs_get+0x1a4>)
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d039      	beq.n	8003322 <ai_platform_inputs_get+0xba>
 80032ae:	e7fe      	b.n	80032ae <ai_platform_inputs_get+0x46>
 80032b0:	f7ff fe98 	bl	8002fe4 <_ai_platform_acquire_crc>
 80032b4:	4b52      	ldr	r3, [pc, #328]	; (8003400 <ai_platform_inputs_get+0x198>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c0:	d010      	beq.n	80032e4 <ai_platform_inputs_get+0x7c>
 80032c2:	4a50      	ldr	r2, [pc, #320]	; (8003404 <ai_platform_inputs_get+0x19c>)
 80032c4:	2301      	movs	r3, #1
 80032c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80032ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1fb      	bne.n	80032ca <ai_platform_inputs_get+0x62>
 80032d2:	4b4d      	ldr	r3, [pc, #308]	; (8003408 <ai_platform_inputs_get+0x1a0>)
 80032d4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80032d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80032dc:	4b4b      	ldr	r3, [pc, #300]	; (800340c <ai_platform_inputs_get+0x1a4>)
 80032de:	429a      	cmp	r2, r3
 80032e0:	d00d      	beq.n	80032fe <ai_platform_inputs_get+0x96>
 80032e2:	e7fe      	b.n	80032e2 <ai_platform_inputs_get+0x7a>
 80032e4:	4a4a      	ldr	r2, [pc, #296]	; (8003410 <ai_platform_inputs_get+0x1a8>)
 80032e6:	2301      	movs	r3, #1
 80032e8:	6093      	str	r3, [r2, #8]
 80032ea:	6893      	ldr	r3, [r2, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1fc      	bne.n	80032ea <ai_platform_inputs_get+0x82>
 80032f0:	4b45      	ldr	r3, [pc, #276]	; (8003408 <ai_platform_inputs_get+0x1a0>)
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	4b45      	ldr	r3, [pc, #276]	; (800340c <ai_platform_inputs_get+0x1a4>)
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d000      	beq.n	80032fe <ai_platform_inputs_get+0x96>
 80032fc:	e7fe      	b.n	80032fc <ai_platform_inputs_get+0x94>
 80032fe:	f7ff fe73 	bl	8002fe8 <_ai_platform_release_crc>
 8003302:	2000      	movs	r0, #0
 8003304:	b005      	add	sp, #20
 8003306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800330a:	4a41      	ldr	r2, [pc, #260]	; (8003410 <ai_platform_inputs_get+0x1a8>)
 800330c:	2301      	movs	r3, #1
 800330e:	6093      	str	r3, [r2, #8]
 8003310:	6893      	ldr	r3, [r2, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1fc      	bne.n	8003310 <ai_platform_inputs_get+0xa8>
 8003316:	4b3c      	ldr	r3, [pc, #240]	; (8003408 <ai_platform_inputs_get+0x1a0>)
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	4b3b      	ldr	r3, [pc, #236]	; (800340c <ai_platform_inputs_get+0x1a4>)
 800331e:	429a      	cmp	r2, r3
 8003320:	d155      	bne.n	80033ce <ai_platform_inputs_get+0x166>
 8003322:	f7ff fe61 	bl	8002fe8 <_ai_platform_release_crc>
 8003326:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d051      	beq.n	80033d0 <ai_platform_inputs_get+0x168>
 800332c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8003330:	f1ba 0f00 	cmp.w	sl, #0
 8003334:	d04c      	beq.n	80033d0 <ai_platform_inputs_get+0x168>
 8003336:	f04f 0b00 	mov.w	fp, #0
 800333a:	465d      	mov	r5, fp
 800333c:	9703      	str	r7, [sp, #12]
 800333e:	e016      	b.n	800336e <ai_platform_inputs_get+0x106>
 8003340:	9901      	ldr	r1, [sp, #4]
 8003342:	2301      	movs	r3, #1
 8003344:	507b      	str	r3, [r7, r1]
 8003346:	69b1      	ldr	r1, [r6, #24]
 8003348:	6849      	ldr	r1, [r1, #4]
 800334a:	6121      	str	r1, [r4, #16]
 800334c:	f04f 0301 	mov.w	r3, #1
 8003350:	7523      	strb	r3, [r4, #20]
 8003352:	e9c4 c200 	strd	ip, r2, [r4]
 8003356:	6962      	ldr	r2, [r4, #20]
 8003358:	60a0      	str	r0, [r4, #8]
 800335a:	2300      	movs	r3, #0
 800335c:	f369 221f 	bfi	r2, r9, #8, #24
 8003360:	f8c4 8018 	str.w	r8, [r4, #24]
 8003364:	60e3      	str	r3, [r4, #12]
 8003366:	3501      	adds	r5, #1
 8003368:	f10b 0b1c 	add.w	fp, fp, #28
 800336c:	6162      	str	r2, [r4, #20]
 800336e:	f8ba 3000 	ldrh.w	r3, [sl]
 8003372:	42ab      	cmp	r3, r5
 8003374:	b2aa      	uxth	r2, r5
 8003376:	d93a      	bls.n	80033ee <ai_platform_inputs_get+0x186>
 8003378:	f8da 3004 	ldr.w	r3, [sl, #4]
 800337c:	00e9      	lsls	r1, r5, #3
 800337e:	9101      	str	r1, [sp, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d034      	beq.n	80033ee <ai_platform_inputs_get+0x186>
 8003384:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003388:	2e00      	cmp	r6, #0
 800338a:	d030      	beq.n	80033ee <ai_platform_inputs_get+0x186>
 800338c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003390:	69b2      	ldr	r2, [r6, #24]
 8003392:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003396:	6810      	ldr	r0, [r2, #0]
 8003398:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800339c:	68b3      	ldr	r3, [r6, #8]
 800339e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80033a2:	f003 f807 	bl	80063b4 <ai_array_to_buffer_fmt>
 80033a6:	69b1      	ldr	r1, [r6, #24]
 80033a8:	4684      	mov	ip, r0
 80033aa:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80033ae:	688a      	ldr	r2, [r1, #8]
 80033b0:	445c      	add	r4, fp
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d0c8      	beq.n	8003348 <ai_platform_inputs_get+0xe0>
 80033b6:	2100      	movs	r1, #0
 80033b8:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80033bc:	6831      	ldr	r1, [r6, #0]
 80033be:	6041      	str	r1, [r0, #4]
 80033c0:	b111      	cbz	r1, 80033c8 <ai_platform_inputs_get+0x160>
 80033c2:	8849      	ldrh	r1, [r1, #2]
 80033c4:	2900      	cmp	r1, #0
 80033c6:	d1bb      	bne.n	8003340 <ai_platform_inputs_get+0xd8>
 80033c8:	69b1      	ldr	r1, [r6, #24]
 80033ca:	2000      	movs	r0, #0
 80033cc:	e7bc      	b.n	8003348 <ai_platform_inputs_get+0xe0>
 80033ce:	e7fe      	b.n	80033ce <ai_platform_inputs_get+0x166>
 80033d0:	2218      	movs	r2, #24
 80033d2:	2111      	movs	r1, #17
 80033d4:	f107 0010 	add.w	r0, r7, #16
 80033d8:	f000 fdc6 	bl	8003f68 <core_set_error>
 80033dc:	2200      	movs	r2, #0
 80033de:	4610      	mov	r0, r2
 80033e0:	9b02      	ldr	r3, [sp, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d08e      	beq.n	8003304 <ai_platform_inputs_get+0x9c>
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	b005      	add	sp, #20
 80033ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ee:	9f03      	ldr	r7, [sp, #12]
 80033f0:	2a00      	cmp	r2, #0
 80033f2:	d0ed      	beq.n	80033d0 <ai_platform_inputs_get+0x168>
 80033f4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80033f8:	6858      	ldr	r0, [r3, #4]
 80033fa:	e7f1      	b.n	80033e0 <ai_platform_inputs_get+0x178>
 80033fc:	a1c00100 	.word	0xa1c00100
 8003400:	e0042000 	.word	0xe0042000
 8003404:	58024000 	.word	0x58024000
 8003408:	f407a5c2 	.word	0xf407a5c2
 800340c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003410:	40023000 	.word	0x40023000

08003414 <ai_platform_outputs_get>:
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	b085      	sub	sp, #20
 800341a:	9102      	str	r1, [sp, #8]
 800341c:	b1f0      	cbz	r0, 800345c <ai_platform_outputs_get+0x48>
 800341e:	4b5f      	ldr	r3, [pc, #380]	; (800359c <ai_platform_outputs_get+0x188>)
 8003420:	6802      	ldr	r2, [r0, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	4607      	mov	r7, r0
 8003426:	d119      	bne.n	800345c <ai_platform_outputs_get+0x48>
 8003428:	f7ff fddc 	bl	8002fe4 <_ai_platform_acquire_crc>
 800342c:	4b5c      	ldr	r3, [pc, #368]	; (80035a0 <ai_platform_outputs_get+0x18c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003438:	d03d      	beq.n	80034b6 <ai_platform_outputs_get+0xa2>
 800343a:	4a5a      	ldr	r2, [pc, #360]	; (80035a4 <ai_platform_outputs_get+0x190>)
 800343c:	2301      	movs	r3, #1
 800343e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003442:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1fb      	bne.n	8003442 <ai_platform_outputs_get+0x2e>
 800344a:	4b57      	ldr	r3, [pc, #348]	; (80035a8 <ai_platform_outputs_get+0x194>)
 800344c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003450:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003454:	4b55      	ldr	r3, [pc, #340]	; (80035ac <ai_platform_outputs_get+0x198>)
 8003456:	429a      	cmp	r2, r3
 8003458:	d039      	beq.n	80034ce <ai_platform_outputs_get+0xba>
 800345a:	e7fe      	b.n	800345a <ai_platform_outputs_get+0x46>
 800345c:	f7ff fdc2 	bl	8002fe4 <_ai_platform_acquire_crc>
 8003460:	4b4f      	ldr	r3, [pc, #316]	; (80035a0 <ai_platform_outputs_get+0x18c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346c:	d010      	beq.n	8003490 <ai_platform_outputs_get+0x7c>
 800346e:	4a4d      	ldr	r2, [pc, #308]	; (80035a4 <ai_platform_outputs_get+0x190>)
 8003470:	2301      	movs	r3, #1
 8003472:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003476:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1fb      	bne.n	8003476 <ai_platform_outputs_get+0x62>
 800347e:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <ai_platform_outputs_get+0x194>)
 8003480:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003484:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003488:	4b48      	ldr	r3, [pc, #288]	; (80035ac <ai_platform_outputs_get+0x198>)
 800348a:	429a      	cmp	r2, r3
 800348c:	d00d      	beq.n	80034aa <ai_platform_outputs_get+0x96>
 800348e:	e7fe      	b.n	800348e <ai_platform_outputs_get+0x7a>
 8003490:	4a47      	ldr	r2, [pc, #284]	; (80035b0 <ai_platform_outputs_get+0x19c>)
 8003492:	2301      	movs	r3, #1
 8003494:	6093      	str	r3, [r2, #8]
 8003496:	6893      	ldr	r3, [r2, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1fc      	bne.n	8003496 <ai_platform_outputs_get+0x82>
 800349c:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <ai_platform_outputs_get+0x194>)
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	4b42      	ldr	r3, [pc, #264]	; (80035ac <ai_platform_outputs_get+0x198>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d000      	beq.n	80034aa <ai_platform_outputs_get+0x96>
 80034a8:	e7fe      	b.n	80034a8 <ai_platform_outputs_get+0x94>
 80034aa:	f7ff fd9d 	bl	8002fe8 <_ai_platform_release_crc>
 80034ae:	2000      	movs	r0, #0
 80034b0:	b005      	add	sp, #20
 80034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b6:	4a3e      	ldr	r2, [pc, #248]	; (80035b0 <ai_platform_outputs_get+0x19c>)
 80034b8:	2301      	movs	r3, #1
 80034ba:	6093      	str	r3, [r2, #8]
 80034bc:	6893      	ldr	r3, [r2, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1fc      	bne.n	80034bc <ai_platform_outputs_get+0xa8>
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <ai_platform_outputs_get+0x194>)
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	4b38      	ldr	r3, [pc, #224]	; (80035ac <ai_platform_outputs_get+0x198>)
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d150      	bne.n	8003570 <ai_platform_outputs_get+0x15c>
 80034ce:	f7ff fd8b 	bl	8002fe8 <_ai_platform_release_crc>
 80034d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d958      	bls.n	800358a <ai_platform_outputs_get+0x176>
 80034d8:	f04f 0b00 	mov.w	fp, #0
 80034dc:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80034e0:	9703      	str	r7, [sp, #12]
 80034e2:	465d      	mov	r5, fp
 80034e4:	e016      	b.n	8003514 <ai_platform_outputs_get+0x100>
 80034e6:	9901      	ldr	r1, [sp, #4]
 80034e8:	2301      	movs	r3, #1
 80034ea:	507b      	str	r3, [r7, r1]
 80034ec:	69b1      	ldr	r1, [r6, #24]
 80034ee:	6849      	ldr	r1, [r1, #4]
 80034f0:	6121      	str	r1, [r4, #16]
 80034f2:	f04f 0301 	mov.w	r3, #1
 80034f6:	7523      	strb	r3, [r4, #20]
 80034f8:	e9c4 c200 	strd	ip, r2, [r4]
 80034fc:	6962      	ldr	r2, [r4, #20]
 80034fe:	60a0      	str	r0, [r4, #8]
 8003500:	2300      	movs	r3, #0
 8003502:	f369 221f 	bfi	r2, r9, #8, #24
 8003506:	f8c4 8018 	str.w	r8, [r4, #24]
 800350a:	60e3      	str	r3, [r4, #12]
 800350c:	3501      	adds	r5, #1
 800350e:	f10b 0b1c 	add.w	fp, fp, #28
 8003512:	6162      	str	r2, [r4, #20]
 8003514:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003518:	42ab      	cmp	r3, r5
 800351a:	b2aa      	uxth	r2, r5
 800351c:	d929      	bls.n	8003572 <ai_platform_outputs_get+0x15e>
 800351e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003522:	00e9      	lsls	r1, r5, #3
 8003524:	9101      	str	r1, [sp, #4]
 8003526:	b323      	cbz	r3, 8003572 <ai_platform_outputs_get+0x15e>
 8003528:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800352c:	b30e      	cbz	r6, 8003572 <ai_platform_outputs_get+0x15e>
 800352e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003532:	69b2      	ldr	r2, [r6, #24]
 8003534:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003538:	6810      	ldr	r0, [r2, #0]
 800353a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800353e:	68b3      	ldr	r3, [r6, #8]
 8003540:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003544:	f002 ff36 	bl	80063b4 <ai_array_to_buffer_fmt>
 8003548:	69b1      	ldr	r1, [r6, #24]
 800354a:	4684      	mov	ip, r0
 800354c:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8003550:	688a      	ldr	r2, [r1, #8]
 8003552:	445c      	add	r4, fp
 8003554:	2800      	cmp	r0, #0
 8003556:	d0ca      	beq.n	80034ee <ai_platform_outputs_get+0xda>
 8003558:	2100      	movs	r1, #0
 800355a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800355e:	6831      	ldr	r1, [r6, #0]
 8003560:	6041      	str	r1, [r0, #4]
 8003562:	b111      	cbz	r1, 800356a <ai_platform_outputs_get+0x156>
 8003564:	8849      	ldrh	r1, [r1, #2]
 8003566:	2900      	cmp	r1, #0
 8003568:	d1bd      	bne.n	80034e6 <ai_platform_outputs_get+0xd2>
 800356a:	69b1      	ldr	r1, [r6, #24]
 800356c:	2000      	movs	r0, #0
 800356e:	e7be      	b.n	80034ee <ai_platform_outputs_get+0xda>
 8003570:	e7fe      	b.n	8003570 <ai_platform_outputs_get+0x15c>
 8003572:	9f03      	ldr	r7, [sp, #12]
 8003574:	b14a      	cbz	r2, 800358a <ai_platform_outputs_get+0x176>
 8003576:	f8da 3014 	ldr.w	r3, [sl, #20]
 800357a:	6858      	ldr	r0, [r3, #4]
 800357c:	9b02      	ldr	r3, [sp, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d096      	beq.n	80034b0 <ai_platform_outputs_get+0x9c>
 8003582:	801a      	strh	r2, [r3, #0]
 8003584:	b005      	add	sp, #20
 8003586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358a:	2218      	movs	r2, #24
 800358c:	2111      	movs	r1, #17
 800358e:	f107 0010 	add.w	r0, r7, #16
 8003592:	f000 fce9 	bl	8003f68 <core_set_error>
 8003596:	2200      	movs	r2, #0
 8003598:	4610      	mov	r0, r2
 800359a:	e7ef      	b.n	800357c <ai_platform_outputs_get+0x168>
 800359c:	a1c00100 	.word	0xa1c00100
 80035a0:	e0042000 	.word	0xe0042000
 80035a4:	58024000 	.word	0x58024000
 80035a8:	f407a5c2 	.word	0xf407a5c2
 80035ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80035b0:	40023000 	.word	0x40023000

080035b4 <ai_platform_network_create>:
 80035b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035b8:	b083      	sub	sp, #12
 80035ba:	4606      	mov	r6, r0
 80035bc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80035c0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80035c4:	4615      	mov	r5, r2
 80035c6:	461f      	mov	r7, r3
 80035c8:	f7ff fd0c 	bl	8002fe4 <_ai_platform_acquire_crc>
 80035cc:	b188      	cbz	r0, 80035f2 <ai_platform_network_create+0x3e>
 80035ce:	4a5d      	ldr	r2, [pc, #372]	; (8003744 <ai_platform_network_create+0x190>)
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80035d6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80035da:	4603      	mov	r3, r0
 80035dc:	d00e      	beq.n	80035fc <ai_platform_network_create+0x48>
 80035de:	4a5a      	ldr	r2, [pc, #360]	; (8003748 <ai_platform_network_create+0x194>)
 80035e0:	2118      	movs	r1, #24
 80035e2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80035e6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80035ea:	2918      	cmp	r1, #24
 80035ec:	d018      	beq.n	8003620 <ai_platform_network_create+0x6c>
 80035ee:	f7ff fcfb 	bl	8002fe8 <_ai_platform_release_crc>
 80035f2:	f244 1033 	movw	r0, #16691	; 0x4133
 80035f6:	b003      	add	sp, #12
 80035f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035fc:	4a53      	ldr	r2, [pc, #332]	; (800374c <ai_platform_network_create+0x198>)
 80035fe:	2101      	movs	r1, #1
 8003600:	6091      	str	r1, [r2, #8]
 8003602:	2114      	movs	r1, #20
 8003604:	e001      	b.n	800360a <ai_platform_network_create+0x56>
 8003606:	3901      	subs	r1, #1
 8003608:	d002      	beq.n	8003610 <ai_platform_network_create+0x5c>
 800360a:	6894      	ldr	r4, [r2, #8]
 800360c:	2c00      	cmp	r4, #0
 800360e:	d1fa      	bne.n	8003606 <ai_platform_network_create+0x52>
 8003610:	4a4e      	ldr	r2, [pc, #312]	; (800374c <ai_platform_network_create+0x198>)
 8003612:	6891      	ldr	r1, [r2, #8]
 8003614:	b911      	cbnz	r1, 800361c <ai_platform_network_create+0x68>
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	3201      	adds	r2, #1
 800361a:	d008      	beq.n	800362e <ai_platform_network_create+0x7a>
 800361c:	4618      	mov	r0, r3
 800361e:	e7e6      	b.n	80035ee <ai_platform_network_create+0x3a>
 8003620:	2101      	movs	r1, #1
 8003622:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003626:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800362a:	2900      	cmp	r1, #0
 800362c:	d1fb      	bne.n	8003626 <ai_platform_network_create+0x72>
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fcda 	bl	8002fe8 <_ai_platform_release_crc>
 8003634:	f7ff fcd6 	bl	8002fe4 <_ai_platform_acquire_crc>
 8003638:	4b42      	ldr	r3, [pc, #264]	; (8003744 <ai_platform_network_create+0x190>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003644:	d010      	beq.n	8003668 <ai_platform_network_create+0xb4>
 8003646:	4b40      	ldr	r3, [pc, #256]	; (8003748 <ai_platform_network_create+0x194>)
 8003648:	2201      	movs	r2, #1
 800364a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800364e:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8003652:	2900      	cmp	r1, #0
 8003654:	d1fb      	bne.n	800364e <ai_platform_network_create+0x9a>
 8003656:	4a3e      	ldr	r2, [pc, #248]	; (8003750 <ai_platform_network_create+0x19c>)
 8003658:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800365c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003660:	4b3c      	ldr	r3, [pc, #240]	; (8003754 <ai_platform_network_create+0x1a0>)
 8003662:	429a      	cmp	r2, r3
 8003664:	d00c      	beq.n	8003680 <ai_platform_network_create+0xcc>
 8003666:	e7fe      	b.n	8003666 <ai_platform_network_create+0xb2>
 8003668:	4a38      	ldr	r2, [pc, #224]	; (800374c <ai_platform_network_create+0x198>)
 800366a:	2301      	movs	r3, #1
 800366c:	6093      	str	r3, [r2, #8]
 800366e:	6893      	ldr	r3, [r2, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1fc      	bne.n	800366e <ai_platform_network_create+0xba>
 8003674:	4b36      	ldr	r3, [pc, #216]	; (8003750 <ai_platform_network_create+0x19c>)
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	4b36      	ldr	r3, [pc, #216]	; (8003754 <ai_platform_network_create+0x1a0>)
 800367c:	429a      	cmp	r2, r3
 800367e:	d122      	bne.n	80036c6 <ai_platform_network_create+0x112>
 8003680:	f7ff fcb2 	bl	8002fe8 <_ai_platform_release_crc>
 8003684:	b38e      	cbz	r6, 80036ea <ai_platform_network_create+0x136>
 8003686:	4b34      	ldr	r3, [pc, #208]	; (8003758 <ai_platform_network_create+0x1a4>)
 8003688:	602b      	str	r3, [r5, #0]
 800368a:	6035      	str	r5, [r6, #0]
 800368c:	f000 fc64 	bl	8003f58 <core_init>
 8003690:	b1d0      	cbz	r0, 80036c8 <ai_platform_network_create+0x114>
 8003692:	f7ff fca7 	bl	8002fe4 <_ai_platform_acquire_crc>
 8003696:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <ai_platform_network_create+0x190>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d025      	beq.n	80036f0 <ai_platform_network_create+0x13c>
 80036a4:	4a28      	ldr	r2, [pc, #160]	; (8003748 <ai_platform_network_create+0x194>)
 80036a6:	2301      	movs	r3, #1
 80036a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80036ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1fb      	bne.n	80036ac <ai_platform_network_create+0xf8>
 80036b4:	4b26      	ldr	r3, [pc, #152]	; (8003750 <ai_platform_network_create+0x19c>)
 80036b6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80036ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80036be:	4b25      	ldr	r3, [pc, #148]	; (8003754 <ai_platform_network_create+0x1a0>)
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d022      	beq.n	800370a <ai_platform_network_create+0x156>
 80036c4:	e7fe      	b.n	80036c4 <ai_platform_network_create+0x110>
 80036c6:	e7fe      	b.n	80036c6 <ai_platform_network_create+0x112>
 80036c8:	2430      	movs	r4, #48	; 0x30
 80036ca:	2300      	movs	r3, #0
 80036cc:	6033      	str	r3, [r6, #0]
 80036ce:	2610      	movs	r6, #16
 80036d0:	464a      	mov	r2, r9
 80036d2:	4641      	mov	r1, r8
 80036d4:	4638      	mov	r0, r7
 80036d6:	f002 fe4f 	bl	8006378 <ai_version_get>
 80036da:	4603      	mov	r3, r0
 80036dc:	2000      	movs	r0, #0
 80036de:	f364 0007 	bfi	r0, r4, #0, #8
 80036e2:	64ab      	str	r3, [r5, #72]	; 0x48
 80036e4:	f366 201f 	bfi	r0, r6, #8, #24
 80036e8:	e785      	b.n	80035f6 <ai_platform_network_create+0x42>
 80036ea:	f241 0010 	movw	r0, #4112	; 0x1010
 80036ee:	e782      	b.n	80035f6 <ai_platform_network_create+0x42>
 80036f0:	4a16      	ldr	r2, [pc, #88]	; (800374c <ai_platform_network_create+0x198>)
 80036f2:	2301      	movs	r3, #1
 80036f4:	6093      	str	r3, [r2, #8]
 80036f6:	6893      	ldr	r3, [r2, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1fc      	bne.n	80036f6 <ai_platform_network_create+0x142>
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <ai_platform_network_create+0x19c>)
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	4b14      	ldr	r3, [pc, #80]	; (8003754 <ai_platform_network_create+0x1a0>)
 8003704:	429a      	cmp	r2, r3
 8003706:	d000      	beq.n	800370a <ai_platform_network_create+0x156>
 8003708:	e7fe      	b.n	8003708 <ai_platform_network_create+0x154>
 800370a:	f7ff fc6d 	bl	8002fe8 <_ai_platform_release_crc>
 800370e:	2200      	movs	r2, #0
 8003710:	4641      	mov	r1, r8
 8003712:	4638      	mov	r0, r7
 8003714:	f002 fe30 	bl	8006378 <ai_version_get>
 8003718:	2200      	movs	r2, #0
 800371a:	4604      	mov	r4, r0
 800371c:	2105      	movs	r1, #5
 800371e:	2001      	movs	r0, #1
 8003720:	f002 fe2a 	bl	8006378 <ai_version_get>
 8003724:	4284      	cmp	r4, r0
 8003726:	d001      	beq.n	800372c <ai_platform_network_create+0x178>
 8003728:	2401      	movs	r4, #1
 800372a:	e7ce      	b.n	80036ca <ai_platform_network_create+0x116>
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <ai_platform_network_create+0x1a8>)
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	a801      	add	r0, sp, #4
 8003732:	f002 fc67 	bl	8006004 <ai_check_custom_types>
 8003736:	b110      	cbz	r0, 800373e <ai_platform_network_create+0x18a>
 8003738:	2600      	movs	r6, #0
 800373a:	4634      	mov	r4, r6
 800373c:	e7c8      	b.n	80036d0 <ai_platform_network_create+0x11c>
 800373e:	2402      	movs	r4, #2
 8003740:	e7c3      	b.n	80036ca <ai_platform_network_create+0x116>
 8003742:	bf00      	nop
 8003744:	e0042000 	.word	0xe0042000
 8003748:	58024000 	.word	0x58024000
 800374c:	40023000 	.word	0x40023000
 8003750:	f407a5c2 	.word	0xf407a5c2
 8003754:	b5e8b5cd 	.word	0xb5e8b5cd
 8003758:	a1c00100 	.word	0xa1c00100
 800375c:	84048403 	.word	0x84048403

08003760 <ai_platform_network_init>:
 8003760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003764:	b1f8      	cbz	r0, 80037a6 <ai_platform_network_init+0x46>
 8003766:	4b6e      	ldr	r3, [pc, #440]	; (8003920 <ai_platform_network_init+0x1c0>)
 8003768:	6802      	ldr	r2, [r0, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	4604      	mov	r4, r0
 800376e:	d11a      	bne.n	80037a6 <ai_platform_network_init+0x46>
 8003770:	460e      	mov	r6, r1
 8003772:	f7ff fc37 	bl	8002fe4 <_ai_platform_acquire_crc>
 8003776:	4b6b      	ldr	r3, [pc, #428]	; (8003924 <ai_platform_network_init+0x1c4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800377e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003782:	d03d      	beq.n	8003800 <ai_platform_network_init+0xa0>
 8003784:	4a68      	ldr	r2, [pc, #416]	; (8003928 <ai_platform_network_init+0x1c8>)
 8003786:	2301      	movs	r3, #1
 8003788:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800378c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1fb      	bne.n	800378c <ai_platform_network_init+0x2c>
 8003794:	4b65      	ldr	r3, [pc, #404]	; (800392c <ai_platform_network_init+0x1cc>)
 8003796:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800379a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800379e:	4b64      	ldr	r3, [pc, #400]	; (8003930 <ai_platform_network_init+0x1d0>)
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d039      	beq.n	8003818 <ai_platform_network_init+0xb8>
 80037a4:	e7fe      	b.n	80037a4 <ai_platform_network_init+0x44>
 80037a6:	f7ff fc1d 	bl	8002fe4 <_ai_platform_acquire_crc>
 80037aa:	4b5e      	ldr	r3, [pc, #376]	; (8003924 <ai_platform_network_init+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b6:	d010      	beq.n	80037da <ai_platform_network_init+0x7a>
 80037b8:	4a5b      	ldr	r2, [pc, #364]	; (8003928 <ai_platform_network_init+0x1c8>)
 80037ba:	2301      	movs	r3, #1
 80037bc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80037c0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1fb      	bne.n	80037c0 <ai_platform_network_init+0x60>
 80037c8:	4b58      	ldr	r3, [pc, #352]	; (800392c <ai_platform_network_init+0x1cc>)
 80037ca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80037ce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80037d2:	4b57      	ldr	r3, [pc, #348]	; (8003930 <ai_platform_network_init+0x1d0>)
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d00d      	beq.n	80037f4 <ai_platform_network_init+0x94>
 80037d8:	e7fe      	b.n	80037d8 <ai_platform_network_init+0x78>
 80037da:	4a56      	ldr	r2, [pc, #344]	; (8003934 <ai_platform_network_init+0x1d4>)
 80037dc:	2301      	movs	r3, #1
 80037de:	6093      	str	r3, [r2, #8]
 80037e0:	6893      	ldr	r3, [r2, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1fc      	bne.n	80037e0 <ai_platform_network_init+0x80>
 80037e6:	4b51      	ldr	r3, [pc, #324]	; (800392c <ai_platform_network_init+0x1cc>)
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	4b50      	ldr	r3, [pc, #320]	; (8003930 <ai_platform_network_init+0x1d0>)
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d000      	beq.n	80037f4 <ai_platform_network_init+0x94>
 80037f2:	e7fe      	b.n	80037f2 <ai_platform_network_init+0x92>
 80037f4:	f7ff fbf8 	bl	8002fe8 <_ai_platform_release_crc>
 80037f8:	2600      	movs	r6, #0
 80037fa:	4630      	mov	r0, r6
 80037fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003800:	4a4c      	ldr	r2, [pc, #304]	; (8003934 <ai_platform_network_init+0x1d4>)
 8003802:	2301      	movs	r3, #1
 8003804:	6093      	str	r3, [r2, #8]
 8003806:	6893      	ldr	r3, [r2, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1fc      	bne.n	8003806 <ai_platform_network_init+0xa6>
 800380c:	4b47      	ldr	r3, [pc, #284]	; (800392c <ai_platform_network_init+0x1cc>)
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	4b47      	ldr	r3, [pc, #284]	; (8003930 <ai_platform_network_init+0x1d0>)
 8003814:	429a      	cmp	r2, r3
 8003816:	d11c      	bne.n	8003852 <ai_platform_network_init+0xf2>
 8003818:	f7ff fbe6 	bl	8002fe8 <_ai_platform_release_crc>
 800381c:	2e00      	cmp	r6, #0
 800381e:	d06f      	beq.n	8003900 <ai_platform_network_init+0x1a0>
 8003820:	4b45      	ldr	r3, [pc, #276]	; (8003938 <ai_platform_network_init+0x1d8>)
 8003822:	6832      	ldr	r2, [r6, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d115      	bne.n	8003854 <ai_platform_network_init+0xf4>
 8003828:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800382c:	6933      	ldr	r3, [r6, #16]
 800382e:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8003832:	89f7      	ldrh	r7, [r6, #14]
 8003834:	62a3      	str	r3, [r4, #40]	; 0x28
 8003836:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800383a:	2303      	movs	r3, #3
 800383c:	84e7      	strh	r7, [r4, #38]	; 0x26
 800383e:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8003842:	60e3      	str	r3, [r4, #12]
 8003844:	4620      	mov	r0, r4
 8003846:	4626      	mov	r6, r4
 8003848:	f002 fc06 	bl	8006058 <ai_layers_init_all>
 800384c:	4630      	mov	r0, r6
 800384e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003852:	e7fe      	b.n	8003852 <ai_platform_network_init+0xf2>
 8003854:	2101      	movs	r1, #1
 8003856:	4630      	mov	r0, r6
 8003858:	4635      	mov	r5, r6
 800385a:	6876      	ldr	r6, [r6, #4]
 800385c:	f7ff fb74 	bl	8002f48 <ai_buffer_get_size>
 8003860:	f105 081c 	add.w	r8, r5, #28
 8003864:	4681      	mov	r9, r0
 8003866:	2101      	movs	r1, #1
 8003868:	4640      	mov	r0, r8
 800386a:	6a2f      	ldr	r7, [r5, #32]
 800386c:	f7ff fb6c 	bl	8002f48 <ai_buffer_get_size>
 8003870:	f1b9 0f00 	cmp.w	r9, #0
 8003874:	d025      	beq.n	80038c2 <ai_platform_network_init+0x162>
 8003876:	2201      	movs	r2, #1
 8003878:	4696      	mov	lr, r2
 800387a:	bb30      	cbnz	r0, 80038ca <ai_platform_network_init+0x16a>
 800387c:	4680      	mov	r8, r0
 800387e:	4607      	mov	r7, r0
 8003880:	b376      	cbz	r6, 80038e0 <ai_platform_network_init+0x180>
 8003882:	8be3      	ldrh	r3, [r4, #30]
 8003884:	4573      	cmp	r3, lr
 8003886:	d323      	bcc.n	80038d0 <ai_platform_network_init+0x170>
 8003888:	b142      	cbz	r2, 800389c <ai_platform_network_init+0x13c>
 800388a:	46ac      	mov	ip, r5
 800388c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003890:	6a25      	ldr	r5, [r4, #32]
 8003892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003894:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003898:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800389c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800389e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80038a2:	2600      	movs	r6, #0
 80038a4:	42bb      	cmp	r3, r7
 80038a6:	83a6      	strh	r6, [r4, #28]
 80038a8:	d323      	bcc.n	80038f2 <ai_platform_network_init+0x192>
 80038aa:	b37f      	cbz	r7, 800390c <ai_platform_network_init+0x1ac>
 80038ac:	46c4      	mov	ip, r8
 80038ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80038b2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80038b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80038ba:	46b6      	mov	lr, r6
 80038bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80038c0:	e7bb      	b.n	800383a <ai_platform_network_init+0xda>
 80038c2:	464a      	mov	r2, r9
 80038c4:	46ce      	mov	lr, r9
 80038c6:	464d      	mov	r5, r9
 80038c8:	e7d7      	b.n	800387a <ai_platform_network_init+0x11a>
 80038ca:	b30f      	cbz	r7, 8003910 <ai_platform_network_init+0x1b0>
 80038cc:	2701      	movs	r7, #1
 80038ce:	e7d7      	b.n	8003880 <ai_platform_network_init+0x120>
 80038d0:	2212      	movs	r2, #18
 80038d2:	2116      	movs	r1, #22
 80038d4:	f104 0010 	add.w	r0, r4, #16
 80038d8:	f000 fb46 	bl	8003f68 <core_set_error>
 80038dc:	2600      	movs	r6, #0
 80038de:	e78c      	b.n	80037fa <ai_platform_network_init+0x9a>
 80038e0:	f1b9 0f00 	cmp.w	r9, #0
 80038e4:	d0cd      	beq.n	8003882 <ai_platform_network_init+0x122>
 80038e6:	2110      	movs	r1, #16
 80038e8:	2212      	movs	r2, #18
 80038ea:	1860      	adds	r0, r4, r1
 80038ec:	f000 fb3c 	bl	8003f68 <core_set_error>
 80038f0:	e783      	b.n	80037fa <ai_platform_network_init+0x9a>
 80038f2:	2213      	movs	r2, #19
 80038f4:	2116      	movs	r1, #22
 80038f6:	f104 0010 	add.w	r0, r4, #16
 80038fa:	f000 fb35 	bl	8003f68 <core_set_error>
 80038fe:	e77c      	b.n	80037fa <ai_platform_network_init+0x9a>
 8003900:	2110      	movs	r1, #16
 8003902:	2211      	movs	r2, #17
 8003904:	1860      	adds	r0, r4, r1
 8003906:	f000 fb2f 	bl	8003f68 <core_set_error>
 800390a:	e776      	b.n	80037fa <ai_platform_network_init+0x9a>
 800390c:	46be      	mov	lr, r7
 800390e:	e794      	b.n	800383a <ai_platform_network_init+0xda>
 8003910:	2110      	movs	r1, #16
 8003912:	2213      	movs	r2, #19
 8003914:	1860      	adds	r0, r4, r1
 8003916:	f000 fb27 	bl	8003f68 <core_set_error>
 800391a:	463e      	mov	r6, r7
 800391c:	e76d      	b.n	80037fa <ai_platform_network_init+0x9a>
 800391e:	bf00      	nop
 8003920:	a1c00100 	.word	0xa1c00100
 8003924:	e0042000 	.word	0xe0042000
 8003928:	58024000 	.word	0x58024000
 800392c:	f407a5c2 	.word	0xf407a5c2
 8003930:	b5e8b5cd 	.word	0xb5e8b5cd
 8003934:	40023000 	.word	0x40023000
 8003938:	a1facade 	.word	0xa1facade

0800393c <ai_platform_network_post_init>:
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	b1f0      	cbz	r0, 800397e <ai_platform_network_post_init+0x42>
 8003940:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <ai_platform_network_post_init+0xf8>)
 8003942:	6802      	ldr	r2, [r0, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	4604      	mov	r4, r0
 8003948:	d119      	bne.n	800397e <ai_platform_network_post_init+0x42>
 800394a:	f7ff fb4b 	bl	8002fe4 <_ai_platform_acquire_crc>
 800394e:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <ai_platform_network_post_init+0xfc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395a:	d03b      	beq.n	80039d4 <ai_platform_network_post_init+0x98>
 800395c:	4a37      	ldr	r2, [pc, #220]	; (8003a3c <ai_platform_network_post_init+0x100>)
 800395e:	2301      	movs	r3, #1
 8003960:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003964:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1fb      	bne.n	8003964 <ai_platform_network_post_init+0x28>
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <ai_platform_network_post_init+0x104>)
 800396e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003972:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003976:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <ai_platform_network_post_init+0x108>)
 8003978:	429a      	cmp	r2, r3
 800397a:	d037      	beq.n	80039ec <ai_platform_network_post_init+0xb0>
 800397c:	e7fe      	b.n	800397c <ai_platform_network_post_init+0x40>
 800397e:	f7ff fb31 	bl	8002fe4 <_ai_platform_acquire_crc>
 8003982:	4b2d      	ldr	r3, [pc, #180]	; (8003a38 <ai_platform_network_post_init+0xfc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800398a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398e:	d010      	beq.n	80039b2 <ai_platform_network_post_init+0x76>
 8003990:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <ai_platform_network_post_init+0x100>)
 8003992:	2301      	movs	r3, #1
 8003994:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003998:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1fb      	bne.n	8003998 <ai_platform_network_post_init+0x5c>
 80039a0:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <ai_platform_network_post_init+0x104>)
 80039a2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80039a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80039aa:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <ai_platform_network_post_init+0x108>)
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d00d      	beq.n	80039cc <ai_platform_network_post_init+0x90>
 80039b0:	e7fe      	b.n	80039b0 <ai_platform_network_post_init+0x74>
 80039b2:	4a25      	ldr	r2, [pc, #148]	; (8003a48 <ai_platform_network_post_init+0x10c>)
 80039b4:	2301      	movs	r3, #1
 80039b6:	6093      	str	r3, [r2, #8]
 80039b8:	6893      	ldr	r3, [r2, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1fc      	bne.n	80039b8 <ai_platform_network_post_init+0x7c>
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <ai_platform_network_post_init+0x104>)
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <ai_platform_network_post_init+0x108>)
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d000      	beq.n	80039cc <ai_platform_network_post_init+0x90>
 80039ca:	e7fe      	b.n	80039ca <ai_platform_network_post_init+0x8e>
 80039cc:	f7ff fb0c 	bl	8002fe8 <_ai_platform_release_crc>
 80039d0:	2000      	movs	r0, #0
 80039d2:	bd38      	pop	{r3, r4, r5, pc}
 80039d4:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <ai_platform_network_post_init+0x10c>)
 80039d6:	2301      	movs	r3, #1
 80039d8:	6093      	str	r3, [r2, #8]
 80039da:	6893      	ldr	r3, [r2, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1fc      	bne.n	80039da <ai_platform_network_post_init+0x9e>
 80039e0:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <ai_platform_network_post_init+0x104>)
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <ai_platform_network_post_init+0x108>)
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d11a      	bne.n	8003a22 <ai_platform_network_post_init+0xe6>
 80039ec:	f7ff fafc 	bl	8002fe8 <_ai_platform_release_crc>
 80039f0:	68e3      	ldr	r3, [r4, #12]
 80039f2:	f013 0502 	ands.w	r5, r3, #2
 80039f6:	d015      	beq.n	8003a24 <ai_platform_network_post_init+0xe8>
 80039f8:	4620      	mov	r0, r4
 80039fa:	f002 fb3b 	bl	8006074 <ai_layers_post_init_all>
 80039fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a00:	b16b      	cbz	r3, 8003a1e <ai_platform_network_post_init+0xe2>
 8003a02:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003a04:	e007      	b.n	8003a16 <ai_platform_network_post_init+0xda>
 8003a06:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8003a0a:	4798      	blx	r3
 8003a0c:	692b      	ldr	r3, [r5, #16]
 8003a0e:	42ab      	cmp	r3, r5
 8003a10:	d005      	beq.n	8003a1e <ai_platform_network_post_init+0xe2>
 8003a12:	b123      	cbz	r3, 8003a1e <ai_platform_network_post_init+0xe2>
 8003a14:	461d      	mov	r5, r3
 8003a16:	4629      	mov	r1, r5
 8003a18:	2000      	movs	r0, #0
 8003a1a:	2d00      	cmp	r5, #0
 8003a1c:	d1f3      	bne.n	8003a06 <ai_platform_network_post_init+0xca>
 8003a1e:	2001      	movs	r0, #1
 8003a20:	bd38      	pop	{r3, r4, r5, pc}
 8003a22:	e7fe      	b.n	8003a22 <ai_platform_network_post_init+0xe6>
 8003a24:	2210      	movs	r2, #16
 8003a26:	2111      	movs	r1, #17
 8003a28:	18a0      	adds	r0, r4, r2
 8003a2a:	f000 fa9d 	bl	8003f68 <core_set_error>
 8003a2e:	4628      	mov	r0, r5
 8003a30:	bd38      	pop	{r3, r4, r5, pc}
 8003a32:	bf00      	nop
 8003a34:	a1c00100 	.word	0xa1c00100
 8003a38:	e0042000 	.word	0xe0042000
 8003a3c:	58024000 	.word	0x58024000
 8003a40:	f407a5c2 	.word	0xf407a5c2
 8003a44:	b5e8b5cd 	.word	0xb5e8b5cd
 8003a48:	40023000 	.word	0x40023000

08003a4c <ai_platform_network_process>:
 8003a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a50:	460e      	mov	r6, r1
 8003a52:	b085      	sub	sp, #20
 8003a54:	4693      	mov	fp, r2
 8003a56:	4605      	mov	r5, r0
 8003a58:	b120      	cbz	r0, 8003a64 <ai_platform_network_process+0x18>
 8003a5a:	4bb8      	ldr	r3, [pc, #736]	; (8003d3c <ai_platform_network_process+0x2f0>)
 8003a5c:	6802      	ldr	r2, [r0, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	bf18      	it	ne
 8003a62:	2500      	movne	r5, #0
 8003a64:	f7ff fabe 	bl	8002fe4 <_ai_platform_acquire_crc>
 8003a68:	4bb5      	ldr	r3, [pc, #724]	; (8003d40 <ai_platform_network_process+0x2f4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a74:	d010      	beq.n	8003a98 <ai_platform_network_process+0x4c>
 8003a76:	4ab3      	ldr	r2, [pc, #716]	; (8003d44 <ai_platform_network_process+0x2f8>)
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a7e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1fb      	bne.n	8003a7e <ai_platform_network_process+0x32>
 8003a86:	4bb0      	ldr	r3, [pc, #704]	; (8003d48 <ai_platform_network_process+0x2fc>)
 8003a88:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003a8c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003a90:	4bae      	ldr	r3, [pc, #696]	; (8003d4c <ai_platform_network_process+0x300>)
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d00d      	beq.n	8003ab2 <ai_platform_network_process+0x66>
 8003a96:	e7fe      	b.n	8003a96 <ai_platform_network_process+0x4a>
 8003a98:	4aad      	ldr	r2, [pc, #692]	; (8003d50 <ai_platform_network_process+0x304>)
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	6093      	str	r3, [r2, #8]
 8003a9e:	6893      	ldr	r3, [r2, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1fc      	bne.n	8003a9e <ai_platform_network_process+0x52>
 8003aa4:	4ba8      	ldr	r3, [pc, #672]	; (8003d48 <ai_platform_network_process+0x2fc>)
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	4ba8      	ldr	r3, [pc, #672]	; (8003d4c <ai_platform_network_process+0x300>)
 8003aac:	429a      	cmp	r2, r3
 8003aae:	f040 812c 	bne.w	8003d0a <ai_platform_network_process+0x2be>
 8003ab2:	f7ff fa99 	bl	8002fe8 <_ai_platform_release_crc>
 8003ab6:	2d00      	cmp	r5, #0
 8003ab8:	f000 8154 	beq.w	8003d64 <ai_platform_network_process+0x318>
 8003abc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8124 	beq.w	8003d0c <ai_platform_network_process+0x2c0>
 8003ac4:	68eb      	ldr	r3, [r5, #12]
 8003ac6:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2700      	movs	r7, #0
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	616f      	str	r7, [r5, #20]
 8003ad4:	f040 813e 	bne.w	8003d54 <ai_platform_network_process+0x308>
 8003ad8:	2e00      	cmp	r6, #0
 8003ada:	f000 811d 	beq.w	8003d18 <ai_platform_network_process+0x2cc>
 8003ade:	f1ba 0f00 	cmp.w	sl, #0
 8003ae2:	f000 8119 	beq.w	8003d18 <ai_platform_network_process+0x2cc>
 8003ae6:	f8ba 3000 	ldrh.w	r3, [sl]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8114 	beq.w	8003d18 <ai_platform_network_process+0x2cc>
 8003af0:	69b3      	ldr	r3, [r6, #24]
 8003af2:	f8cd b00c 	str.w	fp, [sp, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8003afc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d072      	beq.n	8003bea <ai_platform_network_process+0x19e>
 8003b04:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003b08:	2c00      	cmp	r4, #0
 8003b0a:	d06e      	beq.n	8003bea <ai_platform_network_process+0x19e>
 8003b0c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003b10:	f8d3 9000 	ldr.w	r9, [r3]
 8003b14:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8003b18:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003b1c:	f000 81e0 	beq.w	8003ee0 <ai_platform_network_process+0x494>
 8003b20:	69a3      	ldr	r3, [r4, #24]
 8003b22:	2101      	movs	r1, #1
 8003b24:	4630      	mov	r0, r6
 8003b26:	685d      	ldr	r5, [r3, #4]
 8003b28:	f7ff fa0e 	bl	8002f48 <ai_buffer_get_size>
 8003b2c:	4285      	cmp	r5, r0
 8003b2e:	f0c0 811b 	bcc.w	8003d68 <ai_platform_network_process+0x31c>
 8003b32:	68e0      	ldr	r0, [r4, #12]
 8003b34:	69b1      	ldr	r1, [r6, #24]
 8003b36:	68c2      	ldr	r2, [r0, #12]
 8003b38:	68cb      	ldr	r3, [r1, #12]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	f040 8114 	bne.w	8003d68 <ai_platform_network_process+0x31c>
 8003b40:	6882      	ldr	r2, [r0, #8]
 8003b42:	688b      	ldr	r3, [r1, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	f040 810f 	bne.w	8003d68 <ai_platform_network_process+0x31c>
 8003b4a:	6842      	ldr	r2, [r0, #4]
 8003b4c:	684b      	ldr	r3, [r1, #4]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	f040 810a 	bne.w	8003d68 <ai_platform_network_process+0x31c>
 8003b54:	69a3      	ldr	r3, [r4, #24]
 8003b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b5a:	f002 fcbf 	bl	80064dc <ai_array_get_data_byte_size>
 8003b5e:	4605      	mov	r5, r0
 8003b60:	4620      	mov	r0, r4
 8003b62:	f002 fc0f 	bl	8006384 <get_tensor_byte_size>
 8003b66:	4285      	cmp	r5, r0
 8003b68:	f0c0 80fe 	bcc.w	8003d68 <ai_platform_network_process+0x31c>
 8003b6c:	69a3      	ldr	r3, [r4, #24]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	f002 fc20 	bl	80063b4 <ai_array_to_buffer_fmt>
 8003b74:	6833      	ldr	r3, [r6, #0]
 8003b76:	4058      	eors	r0, r3
 8003b78:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003b7c:	f040 81bb 	bne.w	8003ef6 <ai_platform_network_process+0x4aa>
 8003b80:	6873      	ldr	r3, [r6, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 81ae 	beq.w	8003ee4 <ai_platform_network_process+0x498>
 8003b88:	69b3      	ldr	r3, [r6, #24]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 819e 	beq.w	8003ece <ai_platform_network_process+0x482>
 8003b92:	9a01      	ldr	r2, [sp, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	bf38      	it	cc
 8003b98:	461a      	movcc	r2, r3
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	9201      	str	r2, [sp, #4]
 8003b9e:	f002 fbf1 	bl	8006384 <get_tensor_byte_size>
 8003ba2:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ba6:	69b3      	ldr	r3, [r6, #24]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	fb00 f303 	mul.w	r3, r0, r3
 8003bae:	f8c8 300c 	str.w	r3, [r8, #12]
 8003bb2:	6871      	ldr	r1, [r6, #4]
 8003bb4:	f8c8 1004 	str.w	r1, [r8, #4]
 8003bb8:	440b      	add	r3, r1
 8003bba:	f849 300b 	str.w	r3, [r9, fp]
 8003bbe:	69a0      	ldr	r0, [r4, #24]
 8003bc0:	6803      	ldr	r3, [r0, #0]
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	f107 0701 	add.w	r7, r7, #1
 8003bc8:	f106 061c 	add.w	r6, r6, #28
 8003bcc:	f100 80af 	bmi.w	8003d2e <ai_platform_network_process+0x2e2>
 8003bd0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	4419      	add	r1, r3
 8003bd8:	6081      	str	r1, [r0, #8]
 8003bda:	69a3      	ldr	r3, [r4, #24]
 8003bdc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	f8ba 3000 	ldrh.w	r3, [sl]
 8003be6:	42bb      	cmp	r3, r7
 8003be8:	d888      	bhi.n	8003afc <ai_platform_network_process+0xb0>
 8003bea:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8003bee:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8003bf0:	f1bb 0f00 	cmp.w	fp, #0
 8003bf4:	f000 8188 	beq.w	8003f08 <ai_platform_network_process+0x4bc>
 8003bf8:	2a01      	cmp	r2, #1
 8003bfa:	f240 8160 	bls.w	8003ebe <ai_platform_network_process+0x472>
 8003bfe:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8003c02:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8159 	beq.w	8003ebe <ai_platform_network_process+0x472>
 8003c0c:	465e      	mov	r6, fp
 8003c0e:	2700      	movs	r7, #0
 8003c10:	462c      	mov	r4, r5
 8003c12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80b4 	beq.w	8003d84 <ai_platform_network_process+0x338>
 8003c1c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	f000 80af 	beq.w	8003d84 <ai_platform_network_process+0x338>
 8003c26:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003c2a:	f8d3 8000 	ldr.w	r8, [r3]
 8003c2e:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8003c32:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003c36:	f000 8173 	beq.w	8003f20 <ai_platform_network_process+0x4d4>
 8003c3a:	69ab      	ldr	r3, [r5, #24]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	9302      	str	r3, [sp, #8]
 8003c42:	4630      	mov	r0, r6
 8003c44:	f7ff f980 	bl	8002f48 <ai_buffer_get_size>
 8003c48:	9b02      	ldr	r3, [sp, #8]
 8003c4a:	4283      	cmp	r3, r0
 8003c4c:	f0c0 8136 	bcc.w	8003ebc <ai_platform_network_process+0x470>
 8003c50:	68e8      	ldr	r0, [r5, #12]
 8003c52:	69b1      	ldr	r1, [r6, #24]
 8003c54:	68c2      	ldr	r2, [r0, #12]
 8003c56:	68cb      	ldr	r3, [r1, #12]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	f040 812f 	bne.w	8003ebc <ai_platform_network_process+0x470>
 8003c5e:	6882      	ldr	r2, [r0, #8]
 8003c60:	688b      	ldr	r3, [r1, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	f040 812a 	bne.w	8003ebc <ai_platform_network_process+0x470>
 8003c68:	6842      	ldr	r2, [r0, #4]
 8003c6a:	684b      	ldr	r3, [r1, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	f040 8125 	bne.w	8003ebc <ai_platform_network_process+0x470>
 8003c72:	69ab      	ldr	r3, [r5, #24]
 8003c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c78:	f002 fc30 	bl	80064dc <ai_array_get_data_byte_size>
 8003c7c:	9002      	str	r0, [sp, #8]
 8003c7e:	4628      	mov	r0, r5
 8003c80:	f002 fb80 	bl	8006384 <get_tensor_byte_size>
 8003c84:	9b02      	ldr	r3, [sp, #8]
 8003c86:	4283      	cmp	r3, r0
 8003c88:	f0c0 8118 	bcc.w	8003ebc <ai_platform_network_process+0x470>
 8003c8c:	69ab      	ldr	r3, [r5, #24]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	f002 fb90 	bl	80063b4 <ai_array_to_buffer_fmt>
 8003c94:	6833      	ldr	r3, [r6, #0]
 8003c96:	4058      	eors	r0, r3
 8003c98:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003c9c:	f040 8138 	bne.w	8003f10 <ai_platform_network_process+0x4c4>
 8003ca0:	6873      	ldr	r3, [r6, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 814f 	beq.w	8003f46 <ai_platform_network_process+0x4fa>
 8003ca8:	69b3      	ldr	r3, [r6, #24]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8141 	beq.w	8003f34 <ai_platform_network_process+0x4e8>
 8003cb2:	9a01      	ldr	r2, [sp, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	bf38      	it	cc
 8003cb8:	461a      	movcc	r2, r3
 8003cba:	4628      	mov	r0, r5
 8003cbc:	9201      	str	r2, [sp, #4]
 8003cbe:	f002 fb61 	bl	8006384 <get_tensor_byte_size>
 8003cc2:	f8ca 0008 	str.w	r0, [sl, #8]
 8003cc6:	69b3      	ldr	r3, [r6, #24]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	fb00 f303 	mul.w	r3, r0, r3
 8003cce:	f8ca 300c 	str.w	r3, [sl, #12]
 8003cd2:	6871      	ldr	r1, [r6, #4]
 8003cd4:	f8ca 1004 	str.w	r1, [sl, #4]
 8003cd8:	440b      	add	r3, r1
 8003cda:	f848 300b 	str.w	r3, [r8, fp]
 8003cde:	69a8      	ldr	r0, [r5, #24]
 8003ce0:	6803      	ldr	r3, [r0, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	f107 0701 	add.w	r7, r7, #1
 8003ce8:	f106 061c 	add.w	r6, r6, #28
 8003cec:	d445      	bmi.n	8003d7a <ai_platform_network_process+0x32e>
 8003cee:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	4419      	add	r1, r3
 8003cf6:	6081      	str	r1, [r0, #8]
 8003cf8:	69ab      	ldr	r3, [r5, #24]
 8003cfa:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003cfe:	60da      	str	r2, [r3, #12]
 8003d00:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d04:	429f      	cmp	r7, r3
 8003d06:	d384      	bcc.n	8003c12 <ai_platform_network_process+0x1c6>
 8003d08:	e03c      	b.n	8003d84 <ai_platform_network_process+0x338>
 8003d0a:	e7fe      	b.n	8003d0a <ai_platform_network_process+0x2be>
 8003d0c:	68ea      	ldr	r2, [r5, #12]
 8003d0e:	616b      	str	r3, [r5, #20]
 8003d10:	f002 0203 	and.w	r2, r2, #3
 8003d14:	2a03      	cmp	r2, #3
 8003d16:	d11d      	bne.n	8003d54 <ai_platform_network_process+0x308>
 8003d18:	2217      	movs	r2, #23
 8003d1a:	2112      	movs	r1, #18
 8003d1c:	f105 0010 	add.w	r0, r5, #16
 8003d20:	f000 f922 	bl	8003f68 <core_set_error>
 8003d24:	2400      	movs	r4, #0
 8003d26:	4620      	mov	r0, r4
 8003d28:	b005      	add	sp, #20
 8003d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2e:	f8ba 3000 	ldrh.w	r3, [sl]
 8003d32:	429f      	cmp	r7, r3
 8003d34:	f4ff aee2 	bcc.w	8003afc <ai_platform_network_process+0xb0>
 8003d38:	e757      	b.n	8003bea <ai_platform_network_process+0x19e>
 8003d3a:	bf00      	nop
 8003d3c:	a1c00100 	.word	0xa1c00100
 8003d40:	e0042000 	.word	0xe0042000
 8003d44:	58024000 	.word	0x58024000
 8003d48:	f407a5c2 	.word	0xf407a5c2
 8003d4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003d50:	40023000 	.word	0x40023000
 8003d54:	2230      	movs	r2, #48	; 0x30
 8003d56:	2111      	movs	r1, #17
 8003d58:	f105 0010 	add.w	r0, r5, #16
 8003d5c:	f000 f904 	bl	8003f68 <core_set_error>
 8003d60:	2400      	movs	r4, #0
 8003d62:	e7e0      	b.n	8003d26 <ai_platform_network_process+0x2da>
 8003d64:	462c      	mov	r4, r5
 8003d66:	e7de      	b.n	8003d26 <ai_platform_network_process+0x2da>
 8003d68:	9d02      	ldr	r5, [sp, #8]
 8003d6a:	2218      	movs	r2, #24
 8003d6c:	2112      	movs	r1, #18
 8003d6e:	f105 0010 	add.w	r0, r5, #16
 8003d72:	f000 f8f9 	bl	8003f68 <core_set_error>
 8003d76:	2400      	movs	r4, #0
 8003d78:	e7d5      	b.n	8003d26 <ai_platform_network_process+0x2da>
 8003d7a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d7e:	429f      	cmp	r7, r3
 8003d80:	f4ff af47 	bcc.w	8003c12 <ai_platform_network_process+0x1c6>
 8003d84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003d88:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003d8a:	82a3      	strh	r3, [r4, #20]
 8003d8c:	4625      	mov	r5, r4
 8003d8e:	2a00      	cmp	r2, #0
 8003d90:	f040 808e 	bne.w	8003eb0 <ai_platform_network_process+0x464>
 8003d94:	4616      	mov	r6, r2
 8003d96:	4617      	mov	r7, r2
 8003d98:	8aec      	ldrh	r4, [r5, #22]
 8003d9a:	429c      	cmp	r4, r3
 8003d9c:	bf38      	it	cc
 8003d9e:	46ab      	movcc	fp, r5
 8003da0:	d2c1      	bcs.n	8003d26 <ai_platform_network_process+0x2da>
 8003da2:	2e00      	cmp	r6, #0
 8003da4:	d030      	beq.n	8003e08 <ai_platform_network_process+0x3bc>
 8003da6:	f04f 0800 	mov.w	r8, #0
 8003daa:	e014      	b.n	8003dd6 <ai_platform_network_process+0x38a>
 8003dac:	6882      	ldr	r2, [r0, #8]
 8003dae:	68c5      	ldr	r5, [r0, #12]
 8003db0:	6863      	ldr	r3, [r4, #4]
 8003db2:	1b52      	subs	r2, r2, r5
 8003db4:	4413      	add	r3, r2
 8003db6:	6083      	str	r3, [r0, #8]
 8003db8:	698b      	ldr	r3, [r1, #24]
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8003dc2:	f859 200a 	ldr.w	r2, [r9, sl]
 8003dc6:	440b      	add	r3, r1
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bf24      	itt	cs
 8003dcc:	68e3      	ldrcs	r3, [r4, #12]
 8003dce:	1ad3      	subcs	r3, r2, r3
 8003dd0:	6063      	str	r3, [r4, #4]
 8003dd2:	f108 0801 	add.w	r8, r8, #1
 8003dd6:	8833      	ldrh	r3, [r6, #0]
 8003dd8:	4543      	cmp	r3, r8
 8003dda:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003dde:	d913      	bls.n	8003e08 <ai_platform_network_process+0x3bc>
 8003de0:	6873      	ldr	r3, [r6, #4]
 8003de2:	b18b      	cbz	r3, 8003e08 <ai_platform_network_process+0x3bc>
 8003de4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003de8:	b171      	cbz	r1, 8003e08 <ai_platform_network_process+0x3bc>
 8003dea:	6988      	ldr	r0, [r1, #24]
 8003dec:	68b2      	ldr	r2, [r6, #8]
 8003dee:	6803      	ldr	r3, [r0, #0]
 8003df0:	f8d2 9000 	ldr.w	r9, [r2]
 8003df4:	009d      	lsls	r5, r3, #2
 8003df6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8003dfa:	d5d7      	bpl.n	8003dac <ai_platform_network_process+0x360>
 8003dfc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8003e00:	6880      	ldr	r0, [r0, #8]
 8003e02:	f002 fba1 	bl	8006548 <memcpy>
 8003e06:	e7da      	b.n	8003dbe <ai_platform_network_process+0x372>
 8003e08:	4658      	mov	r0, fp
 8003e0a:	f002 f947 	bl	800609c <ai_layers_forward_all>
 8003e0e:	2f00      	cmp	r7, #0
 8003e10:	d03f      	beq.n	8003e92 <ai_platform_network_process+0x446>
 8003e12:	2400      	movs	r4, #0
 8003e14:	e016      	b.n	8003e44 <ai_platform_network_process+0x3f8>
 8003e16:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8003e1a:	f859 100a 	ldr.w	r1, [r9, sl]
 8003e1e:	4413      	add	r3, r2
 8003e20:	428b      	cmp	r3, r1
 8003e22:	bf24      	itt	cs
 8003e24:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003e28:	1acb      	subcs	r3, r1, r3
 8003e2a:	f8c8 3004 	str.w	r3, [r8, #4]
 8003e2e:	6981      	ldr	r1, [r0, #24]
 8003e30:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003e34:	1b52      	subs	r2, r2, r5
 8003e36:	4413      	add	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
 8003e3a:	6983      	ldr	r3, [r0, #24]
 8003e3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	3401      	adds	r4, #1
 8003e44:	883b      	ldrh	r3, [r7, #0]
 8003e46:	42a3      	cmp	r3, r4
 8003e48:	d923      	bls.n	8003e92 <ai_platform_network_process+0x446>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	b30b      	cbz	r3, 8003e92 <ai_platform_network_process+0x446>
 8003e4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e52:	b1f0      	cbz	r0, 8003e92 <ai_platform_network_process+0x446>
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	6983      	ldr	r3, [r0, #24]
 8003e58:	f8d2 9000 	ldr.w	r9, [r2]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	0092      	lsls	r2, r2, #2
 8003e60:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8003e64:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8003e68:	d5d5      	bpl.n	8003e16 <ai_platform_network_process+0x3ca>
 8003e6a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8003e6e:	6899      	ldr	r1, [r3, #8]
 8003e70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003e74:	f002 fb68 	bl	8006548 <memcpy>
 8003e78:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8003e7c:	f859 200a 	ldr.w	r2, [r9, sl]
 8003e80:	440b      	add	r3, r1
 8003e82:	4293      	cmp	r3, r2
 8003e84:	bf24      	itt	cs
 8003e86:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003e8a:	1ad3      	subcs	r3, r2, r3
 8003e8c:	f8c8 3004 	str.w	r3, [r8, #4]
 8003e90:	e7d7      	b.n	8003e42 <ai_platform_network_process+0x3f6>
 8003e92:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8003e96:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8003e9a:	3401      	adds	r4, #1
 8003e9c:	b2a4      	uxth	r4, r4
 8003e9e:	42a3      	cmp	r3, r4
 8003ea0:	f8ab 4016 	strh.w	r4, [fp, #22]
 8003ea4:	f63f af7d 	bhi.w	8003da2 <ai_platform_network_process+0x356>
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	b005      	add	sp, #20
 8003eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb0:	2a01      	cmp	r2, #1
 8003eb2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8003eb4:	d03c      	beq.n	8003f30 <ai_platform_network_process+0x4e4>
 8003eb6:	f106 070c 	add.w	r7, r6, #12
 8003eba:	e76d      	b.n	8003d98 <ai_platform_network_process+0x34c>
 8003ebc:	4625      	mov	r5, r4
 8003ebe:	2218      	movs	r2, #24
 8003ec0:	2113      	movs	r1, #19
 8003ec2:	f105 0010 	add.w	r0, r5, #16
 8003ec6:	f000 f84f 	bl	8003f68 <core_set_error>
 8003eca:	2400      	movs	r4, #0
 8003ecc:	e72b      	b.n	8003d26 <ai_platform_network_process+0x2da>
 8003ece:	9d02      	ldr	r5, [sp, #8]
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	2221      	movs	r2, #33	; 0x21
 8003ed4:	2112      	movs	r1, #18
 8003ed6:	f105 0010 	add.w	r0, r5, #16
 8003eda:	f000 f845 	bl	8003f68 <core_set_error>
 8003ede:	e722      	b.n	8003d26 <ai_platform_network_process+0x2da>
 8003ee0:	9d02      	ldr	r5, [sp, #8]
 8003ee2:	e719      	b.n	8003d18 <ai_platform_network_process+0x2cc>
 8003ee4:	9d02      	ldr	r5, [sp, #8]
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	2217      	movs	r2, #23
 8003eea:	2112      	movs	r1, #18
 8003eec:	f105 0010 	add.w	r0, r5, #16
 8003ef0:	f000 f83a 	bl	8003f68 <core_set_error>
 8003ef4:	e717      	b.n	8003d26 <ai_platform_network_process+0x2da>
 8003ef6:	9d02      	ldr	r5, [sp, #8]
 8003ef8:	2219      	movs	r2, #25
 8003efa:	2112      	movs	r1, #18
 8003efc:	f105 0010 	add.w	r0, r5, #16
 8003f00:	f000 f832 	bl	8003f68 <core_set_error>
 8003f04:	2400      	movs	r4, #0
 8003f06:	e70e      	b.n	8003d26 <ai_platform_network_process+0x2da>
 8003f08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003f0c:	82ab      	strh	r3, [r5, #20]
 8003f0e:	e73e      	b.n	8003d8e <ai_platform_network_process+0x342>
 8003f10:	f104 0010 	add.w	r0, r4, #16
 8003f14:	2219      	movs	r2, #25
 8003f16:	2113      	movs	r1, #19
 8003f18:	f000 f826 	bl	8003f68 <core_set_error>
 8003f1c:	2400      	movs	r4, #0
 8003f1e:	e702      	b.n	8003d26 <ai_platform_network_process+0x2da>
 8003f20:	f104 0010 	add.w	r0, r4, #16
 8003f24:	2217      	movs	r2, #23
 8003f26:	2113      	movs	r1, #19
 8003f28:	f000 f81e 	bl	8003f68 <core_set_error>
 8003f2c:	4654      	mov	r4, sl
 8003f2e:	e6fa      	b.n	8003d26 <ai_platform_network_process+0x2da>
 8003f30:	2700      	movs	r7, #0
 8003f32:	e731      	b.n	8003d98 <ai_platform_network_process+0x34c>
 8003f34:	4625      	mov	r5, r4
 8003f36:	2221      	movs	r2, #33	; 0x21
 8003f38:	4604      	mov	r4, r0
 8003f3a:	2113      	movs	r1, #19
 8003f3c:	f105 0010 	add.w	r0, r5, #16
 8003f40:	f000 f812 	bl	8003f68 <core_set_error>
 8003f44:	e6ef      	b.n	8003d26 <ai_platform_network_process+0x2da>
 8003f46:	4625      	mov	r5, r4
 8003f48:	2217      	movs	r2, #23
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	2113      	movs	r1, #19
 8003f4e:	f105 0010 	add.w	r0, r5, #16
 8003f52:	f000 f809 	bl	8003f68 <core_set_error>
 8003f56:	e6e6      	b.n	8003d26 <ai_platform_network_process+0x2da>

08003f58 <core_init>:
 8003f58:	2001      	movs	r0, #1
 8003f5a:	4770      	bx	lr

08003f5c <core_get_error>:
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2200      	movs	r2, #0
 8003f60:	6800      	ldr	r0, [r0, #0]
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop

08003f68 <core_set_error>:
 8003f68:	4603      	mov	r3, r0
 8003f6a:	7800      	ldrb	r0, [r0, #0]
 8003f6c:	b108      	cbz	r0, 8003f72 <core_set_error+0xa>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	4770      	bx	lr
 8003f72:	7019      	strb	r1, [r3, #0]
 8003f74:	6819      	ldr	r1, [r3, #0]
 8003f76:	f362 211f 	bfi	r1, r2, #8, #24
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	6019      	str	r1, [r3, #0]
 8003f7e:	4770      	bx	lr

08003f80 <func_dummy>:
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop

08003f84 <ai_conv2d_stripe_f32.constprop.0>:
 8003f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f88:	ed2d 8b02 	vpush	{d8}
 8003f8c:	b09d      	sub	sp, #116	; 0x74
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 8003f94:	f8d7 a0bc 	ldr.w	sl, [r7, #188]	; 0xbc
 8003f98:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8003f9c:	66f8      	str	r0, [r7, #108]	; 0x6c
 8003f9e:	f1ba 0f01 	cmp.w	sl, #1
 8003fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8003fa4:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8003fa8:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 8003fac:	f8d7 c0cc 	ldr.w	ip, [r7, #204]	; 0xcc
 8003fb0:	f9b7 e0d4 	ldrsh.w	lr, [r7, #212]	; 0xd4
 8003fb4:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8003fb8:	6579      	str	r1, [r7, #84]	; 0x54
 8003fba:	e9d7 3030 	ldrd	r3, r0, [r7, #192]	; 0xc0
 8003fbe:	f000 812f 	beq.w	8004220 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 8003fc2:	45b2      	cmp	sl, r6
 8003fc4:	f000 827a 	beq.w	80044bc <ai_conv2d_stripe_f32.constprop.0+0x538>
 8003fc8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	f000 8115 	beq.w	80041fc <ai_conv2d_stripe_f32.constprop.0+0x278>
 8003fd2:	fb93 f4f2 	sdiv	r4, r3, r2
 8003fd6:	fb02 3414 	mls	r4, r2, r4, r3
 8003fda:	1b14      	subs	r4, r2, r4
 8003fdc:	1ac1      	subs	r1, r0, r3
 8003fde:	fb94 f0f2 	sdiv	r0, r4, r2
 8003fe2:	fb02 4010 	mls	r0, r2, r0, r4
 8003fe6:	1a09      	subs	r1, r1, r0
 8003fe8:	4411      	add	r1, r2
 8003fea:	3901      	subs	r1, #1
 8003fec:	4418      	add	r0, r3
 8003fee:	fb91 f9f2 	sdiv	r9, r1, r2
 8003ff2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003ff6:	eddf 6a89 	vldr	s13, [pc, #548]	; 800421c <ai_conv2d_stripe_f32.constprop.0+0x298>
 8003ffa:	4460      	add	r0, ip
 8003ffc:	fb01 f100 	mul.w	r1, r1, r0
 8004000:	6239      	str	r1, [r7, #32]
 8004002:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004006:	4413      	add	r3, r2
 8004008:	3b01      	subs	r3, #1
 800400a:	fb93 f3f2 	sdiv	r3, r3, r2
 800400e:	fb01 f202 	mul.w	r2, r1, r2
 8004012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004014:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
 800401e:	fb0e f306 	mul.w	r3, lr, r6
 8004022:	fbb6 f2fa 	udiv	r2, r6, sl
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48
 800402c:	00b3      	lsls	r3, r6, #2
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004034:	eba5 0509 	sub.w	r5, r5, r9
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	fb05 f303 	mul.w	r3, r5, r3
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
 8004044:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	633b      	str	r3, [r7, #48]	; 0x30
 800404c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004050:	f1c3 0800 	rsb	r8, r3, #0
 8004054:	ebae 0303 	sub.w	r3, lr, r3
 8004058:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800405c:	65bb      	str	r3, [r7, #88]	; 0x58
 800405e:	2300      	movs	r3, #0
 8004060:	653b      	str	r3, [r7, #80]	; 0x50
 8004062:	46cc      	mov	ip, r9
 8004064:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004068:	f8c7 b014 	str.w	fp, [r7, #20]
 800406c:	fbb3 f3fa 	udiv	r3, r3, sl
 8004070:	46d1      	mov	r9, sl
 8004072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004074:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004078:	2b00      	cmp	r3, #0
 800407a:	f2c0 80c5 	blt.w	8004208 <ai_conv2d_stripe_f32.constprop.0+0x284>
 800407e:	2400      	movs	r4, #0
 8004080:	4673      	mov	r3, lr
 8004082:	4671      	mov	r1, lr
 8004084:	4622      	mov	r2, r4
 8004086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004088:	f8d7 50d0 	ldr.w	r5, [r7, #208]	; 0xd0
 800408c:	3b01      	subs	r3, #1
 800408e:	fb93 f3fe 	sdiv	r3, r3, lr
 8004092:	4403      	add	r3, r0
 8004094:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004096:	fb0b 0303 	mla	r3, fp, r3, r0
 800409a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800409e:	4440      	add	r0, r8
 80040a0:	42a8      	cmp	r0, r5
 80040a2:	bf94      	ite	ls
 80040a4:	ebc2 0200 	rsbls	r2, r2, r0
 80040a8:	ebc2 0205 	rsbhi	r2, r2, r5
 80040ac:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80040b0:	6a3d      	ldr	r5, [r7, #32]
 80040b2:	4428      	add	r0, r5
 80040b4:	4420      	add	r0, r4
 80040b6:	fb91 f4fe 	sdiv	r4, r1, lr
 80040ba:	fb0e 1114 	mls	r1, lr, r4, r1
 80040be:	1a52      	subs	r2, r2, r1
 80040c0:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80040c2:	4401      	add	r1, r0
 80040c4:	69f8      	ldr	r0, [r7, #28]
 80040c6:	fb00 4101 	mla	r1, r0, r1, r4
 80040ca:	65f9      	str	r1, [r7, #92]	; 0x5c
 80040cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80040ce:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80040d0:	4472      	add	r2, lr
 80040d2:	3a01      	subs	r2, #1
 80040d4:	fb92 f6fe 	sdiv	r6, r2, lr
 80040d8:	460a      	mov	r2, r1
 80040da:	2900      	cmp	r1, #0
 80040dc:	bf08      	it	eq
 80040de:	4622      	moveq	r2, r4
 80040e0:	42a2      	cmp	r2, r4
 80040e2:	637a      	str	r2, [r7, #52]	; 0x34
 80040e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e6:	fb0e 2116 	mls	r1, lr, r6, r2
 80040ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040f2:	bf08      	it	eq
 80040f4:	eeb0 7a66 	vmoveq.f32	s14, s13
 80040f8:	1b92      	subs	r2, r2, r6
 80040fa:	f1b9 0f00 	cmp.w	r9, #0
 80040fe:	d066      	beq.n	80041ce <ai_conv2d_stripe_f32.constprop.0+0x24a>
 8004100:	fb0b f202 	mul.w	r2, fp, r2
 8004104:	643a      	str	r2, [r7, #64]	; 0x40
 8004106:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800410a:	fb00 f101 	mul.w	r1, r0, r1
 800410e:	4591      	cmp	r9, r2
 8004110:	6479      	str	r1, [r7, #68]	; 0x44
 8004112:	d85c      	bhi.n	80041ce <ai_conv2d_stripe_f32.constprop.0+0x24a>
 8004114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004116:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800411a:	2500      	movs	r5, #0
 800411c:	3a01      	subs	r2, #1
 800411e:	46aa      	mov	sl, r5
 8004120:	61ba      	str	r2, [r7, #24]
 8004122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004124:	f8c7 a008 	str.w	sl, [r7, #8]
 8004128:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800412c:	63ba      	str	r2, [r7, #56]	; 0x38
 800412e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004130:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8004134:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004136:	f04f 0800 	mov.w	r8, #0
 800413a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800413c:	ecf2 7a01 	vldmia	r2!, {s15}
 8004140:	f1bc 0f00 	cmp.w	ip, #0
 8004144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004148:	63ba      	str	r2, [r7, #56]	; 0x38
 800414a:	dd22      	ble.n	8004192 <ai_conv2d_stripe_f32.constprop.0+0x20e>
 800414c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800414e:	2100      	movs	r1, #0
 8004150:	2e00      	cmp	r6, #0
 8004152:	bfc8      	it	gt
 8004154:	2000      	movgt	r0, #0
 8004156:	dd15      	ble.n	8004184 <ai_conv2d_stripe_f32.constprop.0+0x200>
 8004158:	eb02 040b 	add.w	r4, r2, fp
 800415c:	4294      	cmp	r4, r2
 800415e:	d90c      	bls.n	800417a <ai_conv2d_stripe_f32.constprop.0+0x1f6>
 8004160:	4696      	mov	lr, r2
 8004162:	469a      	mov	sl, r3
 8004164:	ecbe 6a01 	vldmia	lr!, {s12}
 8004168:	ecfa 5a01 	vldmia	sl!, {s11}
 800416c:	4574      	cmp	r4, lr
 800416e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004172:	d8f7      	bhi.n	8004164 <ai_conv2d_stripe_f32.constprop.0+0x1e0>
 8004174:	697c      	ldr	r4, [r7, #20]
 8004176:	4423      	add	r3, r4
 8004178:	4422      	add	r2, r4
 800417a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800417c:	3001      	adds	r0, #1
 800417e:	4286      	cmp	r6, r0
 8004180:	4422      	add	r2, r4
 8004182:	d1e9      	bne.n	8004158 <ai_conv2d_stripe_f32.constprop.0+0x1d4>
 8004184:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004186:	3101      	adds	r1, #1
 8004188:	4402      	add	r2, r0
 800418a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800418c:	458c      	cmp	ip, r1
 800418e:	4403      	add	r3, r0
 8004190:	d1de      	bne.n	8004150 <ai_conv2d_stripe_f32.constprop.0+0x1cc>
 8004192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004194:	ece2 7a01 	vstmia	r2!, {s15}
 8004198:	63fa      	str	r2, [r7, #60]	; 0x3c
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	4413      	add	r3, r2
 800419e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041a0:	f108 0801 	add.w	r8, r8, #1
 80041a4:	4542      	cmp	r2, r8
 80041a6:	d8c8      	bhi.n	800413a <ai_conv2d_stripe_f32.constprop.0+0x1b6>
 80041a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041aa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80041ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041b2:	445a      	add	r2, fp
 80041b4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	f10a 0a01 	add.w	sl, sl, #1
 80041bc:	4589      	cmp	r9, r1
 80041be:	bf88      	it	hi
 80041c0:	2200      	movhi	r2, #0
 80041c2:	3201      	adds	r2, #1
 80041c4:	45d1      	cmp	r9, sl
 80041c6:	4415      	add	r5, r2
 80041c8:	d1ab      	bne.n	8004122 <ai_conv2d_stripe_f32.constprop.0+0x19e>
 80041ca:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 80041ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d4:	440a      	add	r2, r1
 80041d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041d8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80041dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041de:	4411      	add	r1, r2
 80041e0:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80041e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041e6:	eba8 0802 	sub.w	r8, r8, r2
 80041ea:	1a8a      	subs	r2, r1, r2
 80041ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80041ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041f2:	3301      	adds	r3, #1
 80041f4:	429a      	cmp	r2, r3
 80041f6:	653b      	str	r3, [r7, #80]	; 0x50
 80041f8:	f47f af3c 	bne.w	8004074 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 80041fc:	3774      	adds	r7, #116	; 0x74
 80041fe:	46bd      	mov	sp, r7
 8004200:	ecbd 8b02 	vpop	{d8}
 8004204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004208:	fb98 f1fe 	sdiv	r1, r8, lr
 800420c:	fb0e 8111 	mls	r1, lr, r1, r8
 8004210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004212:	ebae 0101 	sub.w	r1, lr, r1
 8004216:	4642      	mov	r2, r8
 8004218:	4644      	mov	r4, r8
 800421a:	e734      	b.n	8004086 <ai_conv2d_stripe_f32.constprop.0+0x102>
 800421c:	00000000 	.word	0x00000000
 8004220:	fb0e f102 	mul.w	r1, lr, r2
 8004224:	2901      	cmp	r1, #1
 8004226:	f47f aecf 	bne.w	8003fc8 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800422a:	1ac1      	subs	r1, r0, r3
 800422c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004230:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004232:	00b1      	lsls	r1, r6, #2
 8004234:	63b9      	str	r1, [r7, #56]	; 0x38
 8004236:	fb01 f100 	mul.w	r1, r1, r0
 800423a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800423c:	eb0c 0203 	add.w	r2, ip, r3
 8004240:	fb01 0102 	mla	r1, r1, r2, r0
 8004244:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004246:	65b9      	str	r1, [r7, #88]	; 0x58
 8004248:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800424c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8004250:	f080 8269 	bcs.w	8004726 <ai_conv2d_stripe_f32.constprop.0+0x7a2>
 8004254:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004258:	2a00      	cmp	r2, #0
 800425a:	d0cf      	beq.n	80041fc <ai_conv2d_stripe_f32.constprop.0+0x278>
 800425c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004260:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004264:	ed1f 6a13 	vldr	s12, [pc, #-76]	; 800421c <ai_conv2d_stripe_f32.constprop.0+0x298>
 8004268:	fb05 f202 	mul.w	r2, r5, r2
 800426c:	fb00 f303 	mul.w	r3, r0, r3
 8004270:	fb06 f202 	mul.w	r2, r6, r2
 8004274:	64bb      	str	r3, [r7, #72]	; 0x48
 8004276:	0093      	lsls	r3, r2, #2
 8004278:	643b      	str	r3, [r7, #64]	; 0x40
 800427a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800427c:	fb03 f306 	mul.w	r3, r3, r6
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
 8004284:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004288:	fb03 f306 	mul.w	r3, r3, r6
 800428c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28
 8004292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800429c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429e:	2300      	movs	r3, #0
 80042a0:	653b      	str	r3, [r7, #80]	; 0x50
 80042a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8106 	beq.w	80044b6 <ai_conv2d_stripe_f32.constprop.0+0x532>
 80042aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ac:	ecf3 6a01 	vldmia	r3!, {s13}
 80042b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80ea 	beq.w	8004490 <ai_conv2d_stripe_f32.constprop.0+0x50c>
 80042bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042c0:	f8d7 90c8 	ldr.w	r9, [r7, #200]	; 0xc8
 80042c4:	425d      	negs	r5, r3
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	657b      	str	r3, [r7, #84]	; 0x54
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042cc:	647b      	str	r3, [r7, #68]	; 0x44
 80042ce:	f04f 0b00 	mov.w	fp, #0
 80042d2:	f1b9 0f00 	cmp.w	r9, #0
 80042d6:	f2c0 8221 	blt.w	800471c <ai_conv2d_stripe_f32.constprop.0+0x798>
 80042da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042de:	2300      	movs	r3, #0
 80042e0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80042e2:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80042e4:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80042e8:	fb02 0c06 	mla	ip, r2, r6, r0
 80042ec:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80042f0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80042f4:	4428      	add	r0, r5
 80042f6:	42a0      	cmp	r0, r4
 80042f8:	bf94      	ite	ls
 80042fa:	ebc3 0300 	rsbls	r3, r3, r0
 80042fe:	ebc3 0304 	rsbhi	r3, r3, r4
 8004302:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004306:	1ac4      	subs	r4, r0, r3
 8004308:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800430c:	1ac0      	subs	r0, r0, r3
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004314:	2a00      	cmp	r2, #0
 8004316:	eeb0 7a66 	vmov.f32	s14, s13
 800431a:	f340 80a5 	ble.w	8004468 <ai_conv2d_stripe_f32.constprop.0+0x4e4>
 800431e:	fb06 f204 	mul.w	r2, r6, r4
 8004322:	637a      	str	r2, [r7, #52]	; 0x34
 8004324:	fb06 f200 	mul.w	r2, r6, r0
 8004328:	f023 060f 	bic.w	r6, r3, #15
 800432c:	1e70      	subs	r0, r6, #1
 800432e:	0900      	lsrs	r0, r0, #4
 8004330:	3001      	adds	r0, #1
 8004332:	633a      	str	r2, [r7, #48]	; 0x30
 8004334:	0102      	lsls	r2, r0, #4
 8004336:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004338:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800433c:	2400      	movs	r4, #0
 800433e:	4662      	mov	r2, ip
 8004340:	2e00      	cmp	r6, #0
 8004342:	bfd8      	it	le
 8004344:	2000      	movle	r0, #0
 8004346:	dd72      	ble.n	800442e <ai_conv2d_stripe_f32.constprop.0+0x4aa>
 8004348:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800434c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8004350:	f04f 0800 	mov.w	r8, #0
 8004354:	ed50 4a0f 	vldr	s9, [r0, #-60]	; 0xffffffc4
 8004358:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800435c:	ed1c 5a10 	vldr	s10, [ip, #-64]	; 0xffffffc0
 8004360:	ed50 5a10 	vldr	s11, [r0, #-64]	; 0xffffffc0
 8004364:	ed5c 3a0d 	vldr	s7, [ip, #-52]	; 0xffffffcc
 8004368:	ed1c 4a0c 	vldr	s8, [ip, #-48]	; 0xffffffd0
 800436c:	ed1c 2a0a 	vldr	s4, [ip, #-40]	; 0xffffffd8
 8004370:	ed50 2a0a 	vldr	s5, [r0, #-40]	; 0xffffffd8
 8004374:	ed1c 3a09 	vldr	s6, [ip, #-36]	; 0xffffffdc
 8004378:	ed1c 0a06 	vldr	s0, [ip, #-24]	; 0xffffffe8
 800437c:	ed50 0a06 	vldr	s1, [r0, #-24]	; 0xffffffe8
 8004380:	ed1c 1a05 	vldr	s2, [ip, #-20]	; 0xffffffec
 8004384:	ed50 1a05 	vldr	s3, [r0, #-20]	; 0xffffffec
 8004388:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800438c:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 8004390:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004394:	f108 0810 	add.w	r8, r8, #16
 8004398:	45b0      	cmp	r8, r6
 800439a:	ed10 5a0e 	vldr	s10, [r0, #-56]	; 0xffffffc8
 800439e:	ed50 5a0d 	vldr	s11, [r0, #-52]	; 0xffffffcc
 80043a2:	eee4 7a85 	vfma.f32	s15, s9, s10
 80043a6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80043aa:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80043ae:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 80043b2:	ed1c 5a1b 	vldr	s10, [ip, #-108]	; 0xffffff94
 80043b6:	eee3 7aa5 	vfma.f32	s15, s7, s11
 80043ba:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 80043be:	ed50 3a19 	vldr	s7, [r0, #-100]	; 0xffffff9c
 80043c2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80043c6:	ed1c 4a18 	vldr	s8, [ip, #-96]	; 0xffffffa0
 80043ca:	ed50 4a18 	vldr	s9, [r0, #-96]	; 0xffffffa0
 80043ce:	eee5 7a25 	vfma.f32	s15, s10, s11
 80043d2:	ed1c 5a17 	vldr	s10, [ip, #-92]	; 0xffffffa4
 80043d6:	ed50 5a17 	vldr	s11, [r0, #-92]	; 0xffffffa4
 80043da:	eee2 7a22 	vfma.f32	s15, s4, s5
 80043de:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 80043e2:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 80043e6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80043ea:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 80043ee:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 80043f2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80043f6:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 80043fa:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 80043fe:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004402:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 8004406:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800440a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800440e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004412:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004416:	eee3 7a23 	vfma.f32	s15, s6, s7
 800441a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800441e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004422:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004426:	db95      	blt.n	8004354 <ai_conv2d_stripe_f32.constprop.0+0x3d0>
 8004428:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800442a:	4471      	add	r1, lr
 800442c:	4472      	add	r2, lr
 800442e:	4283      	cmp	r3, r0
 8004430:	dd11      	ble.n	8004456 <ai_conv2d_stripe_f32.constprop.0+0x4d2>
 8004432:	4684      	mov	ip, r0
 8004434:	468a      	mov	sl, r1
 8004436:	4690      	mov	r8, r2
 8004438:	ecf8 5a01 	vldmia	r8!, {s11}
 800443c:	ecfa 7a01 	vldmia	sl!, {s15}
 8004440:	f10c 0c01 	add.w	ip, ip, #1
 8004444:	4563      	cmp	r3, ip
 8004446:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800444a:	d1f5      	bne.n	8004438 <ai_conv2d_stripe_f32.constprop.0+0x4b4>
 800444c:	1a18      	subs	r0, r3, r0
 800444e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004452:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004456:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004458:	4401      	add	r1, r0
 800445a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800445c:	4402      	add	r2, r0
 800445e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004460:	3401      	adds	r4, #1
 8004462:	42a0      	cmp	r0, r4
 8004464:	f47f af6c 	bne.w	8004340 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 8004468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800446a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800446c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800446e:	ed83 7a00 	vstr	s14, [r3]
 8004472:	440b      	add	r3, r1
 8004474:	4491      	add	r9, r2
 8004476:	647b      	str	r3, [r7, #68]	; 0x44
 8004478:	1aad      	subs	r5, r5, r2
 800447a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800447c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447e:	4413      	add	r3, r2
 8004480:	657b      	str	r3, [r7, #84]	; 0x54
 8004482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004486:	f10b 0b01 	add.w	fp, fp, #1
 800448a:	455b      	cmp	r3, fp
 800448c:	f47f af21 	bne.w	80042d2 <ai_conv2d_stripe_f32.constprop.0+0x34e>
 8004490:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004496:	440a      	add	r2, r1
 8004498:	66ba      	str	r2, [r7, #104]	; 0x68
 800449a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800449c:	3204      	adds	r2, #4
 800449e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80044a4:	3301      	adds	r3, #1
 80044a6:	429a      	cmp	r2, r3
 80044a8:	653b      	str	r3, [r7, #80]	; 0x50
 80044aa:	f43f aea7 	beq.w	80041fc <ai_conv2d_stripe_f32.constprop.0+0x278>
 80044ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f47f aefa 	bne.w	80042aa <ai_conv2d_stripe_f32.constprop.0+0x326>
 80044b6:	eef0 6a46 	vmov.f32	s13, s12
 80044ba:	e6fa      	b.n	80042b2 <ai_conv2d_stripe_f32.constprop.0+0x32e>
 80044bc:	fb0e f102 	mul.w	r1, lr, r2
 80044c0:	2901      	cmp	r1, #1
 80044c2:	f47f ad81 	bne.w	8003fc8 <ai_conv2d_stripe_f32.constprop.0+0x44>
 80044c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044ca:	2a00      	cmp	r2, #0
 80044cc:	f43f ae96 	beq.w	80041fc <ai_conv2d_stripe_f32.constprop.0+0x278>
 80044d0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80044d4:	ed5f 3aaf 	vldr	s7, [pc, #-700]	; 800421c <ai_conv2d_stripe_f32.constprop.0+0x298>
 80044d8:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 80044dc:	eb0c 0203 	add.w	r2, ip, r3
 80044e0:	fb01 f202 	mul.w	r2, r1, r2
 80044e4:	61fa      	str	r2, [r7, #28]
 80044e6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80044ea:	1a1a      	subs	r2, r3, r0
 80044ec:	442a      	add	r2, r5
 80044ee:	fb01 f202 	mul.w	r2, r1, r2
 80044f2:	1ac1      	subs	r1, r0, r3
 80044f4:	64f9      	str	r1, [r7, #76]	; 0x4c
 80044f6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80044fa:	fb03 f301 	mul.w	r3, r3, r1
 80044fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004500:	0093      	lsls	r3, r2, #2
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004504:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	63bb      	str	r3, [r7, #56]	; 0x38
 800450c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004510:	f1c3 0b00 	rsb	fp, r3, #0
 8004514:	00f3      	lsls	r3, r6, #3
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	2300      	movs	r3, #0
 800451a:	653b      	str	r3, [r7, #80]	; 0x50
 800451c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004520:	fbb3 f3f6 	udiv	r3, r3, r6
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800452a:	2b00      	cmp	r3, #0
 800452c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8004530:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8004534:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 8004538:	f2c0 80ea 	blt.w	8004710 <ai_conv2d_stripe_f32.constprop.0+0x78c>
 800453c:	2500      	movs	r5, #0
 800453e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004540:	462b      	mov	r3, r5
 8004542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004546:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800454a:	69fc      	ldr	r4, [r7, #28]
 800454c:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800454e:	445a      	add	r2, fp
 8004550:	4282      	cmp	r2, r0
 8004552:	bf28      	it	cs
 8004554:	4602      	movcs	r2, r0
 8004556:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800455a:	1ad2      	subs	r2, r2, r3
 800455c:	1904      	adds	r4, r0, r4
 800455e:	2e00      	cmp	r6, #0
 8004560:	f000 822b 	beq.w	80049ba <ai_conv2d_stripe_f32.constprop.0+0xa36>
 8004564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004566:	647e      	str	r6, [r7, #68]	; 0x44
 8004568:	429e      	cmp	r6, r3
 800456a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800456c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004574:	eba3 0002 	sub.w	r0, r3, r2
 8004578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800457c:	fb03 f000 	mul.w	r0, r3, r0
 8004580:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004584:	bf14      	ite	ne
 8004586:	eeb0 3a62 	vmovne.f32	s6, s5
 800458a:	eeb0 3a63 	vmoveq.f32	s6, s7
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	442c      	add	r4, r5
 8004592:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8004594:	fb08 5e04 	mla	lr, r8, r4, r5
 8004598:	eb0e 0408 	add.w	r4, lr, r8
 800459c:	45a6      	cmp	lr, r4
 800459e:	62bc      	str	r4, [r7, #40]	; 0x28
 80045a0:	f080 809d 	bcs.w	80046de <ai_conv2d_stripe_f32.constprop.0+0x75a>
 80045a4:	0080      	lsls	r0, r0, #2
 80045a6:	6378      	str	r0, [r7, #52]	; 0x34
 80045a8:	e9d7 0428 	ldrd	r0, r4, [r7, #160]	; 0xa0
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	633b      	str	r3, [r7, #48]	; 0x30
 80045b0:	42a0      	cmp	r0, r4
 80045b2:	f022 0303 	bic.w	r3, r2, #3
 80045b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045b8:	f200 8091 	bhi.w	80046de <ai_conv2d_stripe_f32.constprop.0+0x75a>
 80045bc:	1e58      	subs	r0, r3, #1
 80045be:	0880      	lsrs	r0, r0, #2
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	fb00 a00a 	mla	r0, r0, sl, sl
 80045c6:	6138      	str	r0, [r7, #16]
 80045c8:	f04f 0900 	mov.w	r9, #0
 80045cc:	0118      	lsls	r0, r3, #4
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	6178      	str	r0, [r7, #20]
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 80045d8:	f8c7 b008 	str.w	fp, [r7, #8]
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80045e0:	4499      	add	r9, r3
 80045e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e4:	181c      	adds	r4, r3, r0
 80045e6:	65bc      	str	r4, [r7, #88]	; 0x58
 80045e8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80045ea:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80045ee:	1820      	adds	r0, r4, r0
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80045f6:	6438      	str	r0, [r7, #64]	; 0x40
 80045f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045fc:	ecb3 7a01 	vldmia	r3!, {s14}
 8004600:	65bb      	str	r3, [r7, #88]	; 0x58
 8004602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004604:	2b00      	cmp	r3, #0
 8004606:	ee27 7a03 	vmul.f32	s14, s14, s6
 800460a:	dd57      	ble.n	80046bc <ai_conv2d_stripe_f32.constprop.0+0x738>
 800460c:	4675      	mov	r5, lr
 800460e:	f04f 0b00 	mov.w	fp, #0
 8004612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004614:	2b00      	cmp	r3, #0
 8004616:	bfd8      	it	le
 8004618:	2400      	movle	r4, #0
 800461a:	dd32      	ble.n	8004682 <ai_conv2d_stripe_f32.constprop.0+0x6fe>
 800461c:	6a38      	ldr	r0, [r7, #32]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	182c      	adds	r4, r5, r0
 8004622:	f101 0310 	add.w	r3, r1, #16
 8004626:	4628      	mov	r0, r5
 8004628:	2600      	movs	r6, #0
 800462a:	eb00 0c08 	add.w	ip, r0, r8
 800462e:	ed13 4a03 	vldr	s8, [r3, #-12]
 8004632:	eddc 7a00 	vldr	s15, [ip]
 8004636:	ed53 4a04 	vldr	s9, [r3, #-16]
 800463a:	ed90 5a00 	vldr	s10, [r0]
 800463e:	edd4 6a00 	vldr	s13, [r4]
 8004642:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004646:	ed13 6a01 	vldr	s12, [r3, #-4]
 800464a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800464c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004650:	eb04 0c08 	add.w	ip, r4, r8
 8004654:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004658:	3604      	adds	r6, #4
 800465a:	4296      	cmp	r6, r2
 800465c:	f103 0310 	add.w	r3, r3, #16
 8004660:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8004664:	4450      	add	r0, sl
 8004666:	4454      	add	r4, sl
 8004668:	eddc 6a00 	vldr	s13, [ip]
 800466c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004674:	dbd9      	blt.n	800462a <ai_conv2d_stripe_f32.constprop.0+0x6a6>
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68fc      	ldr	r4, [r7, #12]
 800467c:	441d      	add	r5, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	4419      	add	r1, r3
 8004682:	42a2      	cmp	r2, r4
 8004684:	dd11      	ble.n	80046aa <ai_conv2d_stripe_f32.constprop.0+0x726>
 8004686:	4620      	mov	r0, r4
 8004688:	462b      	mov	r3, r5
 800468a:	460e      	mov	r6, r1
 800468c:	edd3 7a00 	vldr	s15, [r3]
 8004690:	ecf6 6a01 	vldmia	r6!, {s13}
 8004694:	3001      	adds	r0, #1
 8004696:	4290      	cmp	r0, r2
 8004698:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800469c:	4443      	add	r3, r8
 800469e:	d1f5      	bne.n	800468c <ai_conv2d_stripe_f32.constprop.0+0x708>
 80046a0:	1b14      	subs	r4, r2, r4
 80046a2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80046a6:	fb04 5508 	mla	r5, r4, r8, r5
 80046aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ac:	441d      	add	r5, r3
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	4419      	add	r1, r3
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	f10b 0b01 	add.w	fp, fp, #1
 80046b8:	459b      	cmp	fp, r3
 80046ba:	d1aa      	bne.n	8004612 <ai_conv2d_stripe_f32.constprop.0+0x68e>
 80046bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80046c0:	eca3 7a01 	vstmia	r3!, {s14}
 80046c4:	643b      	str	r3, [r7, #64]	; 0x40
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	4419      	add	r1, r3
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	4283      	cmp	r3, r0
 80046ce:	d194      	bne.n	80045fa <ai_conv2d_stripe_f32.constprop.0+0x676>
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	f10e 0e04 	add.w	lr, lr, #4
 80046d6:	459e      	cmp	lr, r3
 80046d8:	d380      	bcc.n	80045dc <ai_conv2d_stripe_f32.constprop.0+0x658>
 80046da:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80046de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e4:	440a      	add	r2, r1
 80046e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80046ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046ee:	440a      	add	r2, r1
 80046f0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80046f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046f8:	3301      	adds	r3, #1
 80046fa:	429a      	cmp	r2, r3
 80046fc:	653b      	str	r3, [r7, #80]	; 0x50
 80046fe:	ebab 0b01 	sub.w	fp, fp, r1
 8004702:	f43f ad7b 	beq.w	80041fc <ai_conv2d_stripe_f32.constprop.0+0x278>
 8004706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800470a:	2b00      	cmp	r3, #0
 800470c:	f6bf af16 	bge.w	800453c <ai_conv2d_stripe_f32.constprop.0+0x5b8>
 8004710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004712:	465b      	mov	r3, fp
 8004714:	eb02 010b 	add.w	r1, r2, fp
 8004718:	465d      	mov	r5, fp
 800471a:	e712      	b.n	8004542 <ai_conv2d_stripe_f32.constprop.0+0x5be>
 800471c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800471e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004720:	462b      	mov	r3, r5
 8004722:	442a      	add	r2, r5
 8004724:	e5dc      	b.n	80042e0 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 8004726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800472a:	fb02 f505 	mul.w	r5, r2, r5
 800472e:	fb06 f205 	mul.w	r2, r6, r5
 8004732:	0095      	lsls	r5, r2, #2
 8004734:	637a      	str	r2, [r7, #52]	; 0x34
 8004736:	1dea      	adds	r2, r5, #7
 8004738:	f022 0207 	bic.w	r2, r2, #7
 800473c:	4669      	mov	r1, sp
 800473e:	ebad 0d02 	sub.w	sp, sp, r2
 8004742:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004746:	ee08 1a90 	vmov	s17, r1
 800474a:	46e9      	mov	r9, sp
 800474c:	2a00      	cmp	r2, #0
 800474e:	f000 8130 	beq.w	80049b2 <ai_conv2d_stripe_f32.constprop.0+0xa2e>
 8004752:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004756:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 80049f0 <ai_conv2d_stripe_f32.constprop.0+0xa6c>
 800475a:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	647b      	str	r3, [r7, #68]	; 0x44
 8004764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004768:	fb03 f306 	mul.w	r3, r3, r6
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	623b      	str	r3, [r7, #32]
 8004770:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004774:	fb03 f306 	mul.w	r3, r3, r6
 8004778:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
 800477e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004788:	64bb      	str	r3, [r7, #72]	; 0x48
 800478a:	2300      	movs	r3, #0
 800478c:	46ca      	mov	sl, r9
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004790:	46a9      	mov	r9, r5
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004794:	b123      	cbz	r3, 80047a0 <ai_conv2d_stripe_f32.constprop.0+0x81c>
 8004796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004798:	464a      	mov	r2, r9
 800479a:	4650      	mov	r0, sl
 800479c:	f001 fed4 	bl	8006548 <memcpy>
 80047a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 8120 	beq.w	80049e8 <ai_conv2d_stripe_f32.constprop.0+0xa64>
 80047a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047aa:	ecf3 6a01 	vldmia	r3!, {s13}
 80047ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80ee 	beq.w	8004996 <ai_conv2d_stripe_f32.constprop.0+0xa12>
 80047ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047be:	f8c7 901c 	str.w	r9, [r7, #28]
 80047c2:	425d      	negs	r5, r3
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	653b      	str	r3, [r7, #80]	; 0x50
 80047c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ca:	643b      	str	r3, [r7, #64]	; 0x40
 80047cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047d0:	657b      	str	r3, [r7, #84]	; 0x54
 80047d2:	2300      	movs	r3, #0
 80047d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f2c0 8100 	blt.w	80049de <ai_conv2d_stripe_f32.constprop.0+0xa5a>
 80047de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047e2:	2300      	movs	r3, #0
 80047e4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80047e8:	f8d7 60b0 	ldr.w	r6, [r7, #176]	; 0xb0
 80047ec:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80047ee:	4428      	add	r0, r5
 80047f0:	42b0      	cmp	r0, r6
 80047f2:	bf94      	ite	ls
 80047f4:	ebc3 0300 	rsbls	r3, r3, r0
 80047f8:	ebc3 0306 	rsbhi	r3, r3, r6
 80047fc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004800:	eba0 0c03 	sub.w	ip, r0, r3
 8004804:	1af0      	subs	r0, r6, r3
 8004806:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800480a:	fb06 f303 	mul.w	r3, r6, r3
 800480e:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8004810:	2e00      	cmp	r6, #0
 8004812:	fb02 a204 	mla	r2, r2, r4, sl
 8004816:	eeb0 7a66 	vmov.f32	s14, s13
 800481a:	f340 80a2 	ble.w	8004962 <ai_conv2d_stripe_f32.constprop.0+0x9de>
 800481e:	fb04 f000 	mul.w	r0, r4, r0
 8004822:	f023 060f 	bic.w	r6, r3, #15
 8004826:	6338      	str	r0, [r7, #48]	; 0x30
 8004828:	1e70      	subs	r0, r6, #1
 800482a:	0900      	lsrs	r0, r0, #4
 800482c:	3001      	adds	r0, #1
 800482e:	ea4f 1880 	mov.w	r8, r0, lsl #6
 8004832:	0100      	lsls	r0, r0, #4
 8004834:	fb04 fc0c 	mul.w	ip, r4, ip
 8004838:	62b8      	str	r0, [r7, #40]	; 0x28
 800483a:	2400      	movs	r4, #0
 800483c:	2e00      	cmp	r6, #0
 800483e:	bfd8      	it	le
 8004840:	2000      	movle	r0, #0
 8004842:	dd72      	ble.n	800492a <ai_conv2d_stripe_f32.constprop.0+0x9a6>
 8004844:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 8004848:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800484c:	f04f 0900 	mov.w	r9, #0
 8004850:	ed10 5a0f 	vldr	s10, [r0, #-60]	; 0xffffffc4
 8004854:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 8004858:	ed5e 5a10 	vldr	s11, [lr, #-64]	; 0xffffffc0
 800485c:	ed10 6a10 	vldr	s12, [r0, #-64]	; 0xffffffc0
 8004860:	ed1e 4a0d 	vldr	s8, [lr, #-52]	; 0xffffffcc
 8004864:	ed5e 4a0c 	vldr	s9, [lr, #-48]	; 0xffffffd0
 8004868:	ed5e 2a0a 	vldr	s5, [lr, #-40]	; 0xffffffd8
 800486c:	ed10 3a0a 	vldr	s6, [r0, #-40]	; 0xffffffd8
 8004870:	ed5e 3a09 	vldr	s7, [lr, #-36]	; 0xffffffdc
 8004874:	ed5e 0a06 	vldr	s1, [lr, #-24]	; 0xffffffe8
 8004878:	ed10 1a06 	vldr	s2, [r0, #-24]	; 0xffffffe8
 800487c:	ed5e 1a05 	vldr	s3, [lr, #-20]	; 0xffffffec
 8004880:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 8004884:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004888:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800488c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004890:	f109 0910 	add.w	r9, r9, #16
 8004894:	45b1      	cmp	r9, r6
 8004896:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 800489a:	ed10 6a0d 	vldr	s12, [r0, #-52]	; 0xffffffcc
 800489e:	eee5 7a25 	vfma.f32	s15, s10, s11
 80048a2:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 80048a6:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80048aa:	ed10 5a1c 	vldr	s10, [r0, #-112]	; 0xffffff90
 80048ae:	ed5e 5a1b 	vldr	s11, [lr, #-108]	; 0xffffff94
 80048b2:	eee4 7a06 	vfma.f32	s15, s8, s12
 80048b6:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 80048ba:	ed10 4a19 	vldr	s8, [r0, #-100]	; 0xffffff9c
 80048be:	eee4 7a85 	vfma.f32	s15, s9, s10
 80048c2:	ed5e 4a18 	vldr	s9, [lr, #-96]	; 0xffffffa0
 80048c6:	ed10 5a18 	vldr	s10, [r0, #-96]	; 0xffffffa0
 80048ca:	eee5 7a86 	vfma.f32	s15, s11, s12
 80048ce:	ed5e 5a17 	vldr	s11, [lr, #-92]	; 0xffffffa4
 80048d2:	ed10 6a17 	vldr	s12, [r0, #-92]	; 0xffffffa4
 80048d6:	eee2 7a83 	vfma.f32	s15, s5, s6
 80048da:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 80048de:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 80048e2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80048e6:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 80048ea:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 80048ee:	eee4 7a85 	vfma.f32	s15, s9, s10
 80048f2:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 80048f6:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 80048fa:	eee5 7a86 	vfma.f32	s15, s11, s12
 80048fe:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 8004902:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 8004906:	eee0 7a81 	vfma.f32	s15, s1, s2
 800490a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800490e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8004912:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004916:	eee4 7a85 	vfma.f32	s15, s9, s10
 800491a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800491e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004922:	db95      	blt.n	8004850 <ai_conv2d_stripe_f32.constprop.0+0x8cc>
 8004924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004926:	4441      	add	r1, r8
 8004928:	4442      	add	r2, r8
 800492a:	4283      	cmp	r3, r0
 800492c:	dd11      	ble.n	8004952 <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800492e:	4686      	mov	lr, r0
 8004930:	468b      	mov	fp, r1
 8004932:	4691      	mov	r9, r2
 8004934:	ecb9 6a01 	vldmia	r9!, {s12}
 8004938:	ecfb 7a01 	vldmia	fp!, {s15}
 800493c:	f10e 0e01 	add.w	lr, lr, #1
 8004940:	4573      	cmp	r3, lr
 8004942:	eea6 7a27 	vfma.f32	s14, s12, s15
 8004946:	d1f5      	bne.n	8004934 <ai_conv2d_stripe_f32.constprop.0+0x9b0>
 8004948:	1a18      	subs	r0, r3, r0
 800494a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800494e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004954:	4402      	add	r2, r0
 8004956:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004958:	3401      	adds	r4, #1
 800495a:	42a0      	cmp	r0, r4
 800495c:	4461      	add	r1, ip
 800495e:	f47f af6d 	bne.w	800483c <ai_conv2d_stripe_f32.constprop.0+0x8b8>
 8004962:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004964:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004966:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496a:	ed82 7a00 	vstr	s14, [r2]
 800496e:	4401      	add	r1, r0
 8004970:	6579      	str	r1, [r7, #84]	; 0x54
 8004972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004974:	440a      	add	r2, r1
 8004976:	643a      	str	r2, [r7, #64]	; 0x40
 8004978:	6a39      	ldr	r1, [r7, #32]
 800497a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800497c:	440a      	add	r2, r1
 800497e:	653a      	str	r2, [r7, #80]	; 0x50
 8004980:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004984:	3301      	adds	r3, #1
 8004986:	429a      	cmp	r2, r3
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498a:	eba5 0500 	sub.w	r5, r5, r0
 800498e:	f47f af22 	bne.w	80047d6 <ai_conv2d_stripe_f32.constprop.0+0x852>
 8004992:	f8d7 901c 	ldr.w	r9, [r7, #28]
 8004996:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499a:	444a      	add	r2, r9
 800499c:	66ba      	str	r2, [r7, #104]	; 0x68
 800499e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049a0:	3204      	adds	r2, #4
 80049a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80049a8:	3301      	adds	r3, #1
 80049aa:	429a      	cmp	r2, r3
 80049ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ae:	f47f aef0 	bne.w	8004792 <ai_conv2d_stripe_f32.constprop.0+0x80e>
 80049b2:	ee18 3a90 	vmov	r3, s17
 80049b6:	469d      	mov	sp, r3
 80049b8:	e420      	b.n	80041fc <ai_conv2d_stripe_f32.constprop.0+0x278>
 80049ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049bc:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80049be:	647e      	str	r6, [r7, #68]	; 0x44
 80049c0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80049c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049c8:	1a98      	subs	r0, r3, r2
 80049ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ce:	fb03 f000 	mul.w	r0, r3, r0
 80049d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049d6:	eeb0 3a63 	vmov.f32	s6, s7
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	e5d8      	b.n	8004590 <ai_conv2d_stripe_f32.constprop.0+0x60c>
 80049de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049e2:	462b      	mov	r3, r5
 80049e4:	442a      	add	r2, r5
 80049e6:	e6fd      	b.n	80047e4 <ai_conv2d_stripe_f32.constprop.0+0x860>
 80049e8:	eef0 6a48 	vmov.f32	s13, s16
 80049ec:	e6e0      	b.n	80047b0 <ai_conv2d_stripe_f32.constprop.0+0x82c>
 80049ee:	bf00      	nop
 80049f0:	00000000 	.word	0x00000000

080049f4 <ai_dict_decompress_f32>:
 80049f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049f8:	9d08      	ldr	r5, [sp, #32]
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004a00:	d00e      	beq.n	8004a20 <ai_dict_decompress_f32+0x2c>
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d10a      	bne.n	8004a1c <ai_dict_decompress_f32+0x28>
 8004a06:	42a8      	cmp	r0, r5
 8004a08:	d208      	bcs.n	8004a1c <ai_dict_decompress_f32+0x28>
 8004a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f840 3b04 	str.w	r3, [r0], #4
 8004a18:	4285      	cmp	r5, r0
 8004a1a:	d8f6      	bhi.n	8004a0a <ai_dict_decompress_f32+0x16>
 8004a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a20:	9b07      	ldr	r3, [sp, #28]
 8004a22:	085e      	lsrs	r6, r3, #1
 8004a24:	f003 0701 	and.w	r7, r3, #1
 8004a28:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8004a2c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8004a30:	42a8      	cmp	r0, r5
 8004a32:	d2f3      	bcs.n	8004a1c <ai_dict_decompress_f32+0x28>
 8004a34:	b33e      	cbz	r6, 8004a86 <ai_dict_decompress_f32+0x92>
 8004a36:	f100 0e08 	add.w	lr, r0, #8
 8004a3a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8004a3e:	eb01 0408 	add.w	r4, r1, r8
 8004a42:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a4c:	f10e 0e08 	add.w	lr, lr, #8
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f84e 3c10 	str.w	r3, [lr, #-16]
 8004a56:	f89c 3000 	ldrb.w	r3, [ip]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a62:	4564      	cmp	r4, ip
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8004a6a:	d1ea      	bne.n	8004a42 <ai_dict_decompress_f32+0x4e>
 8004a6c:	4431      	add	r1, r6
 8004a6e:	4448      	add	r0, r9
 8004a70:	2f00      	cmp	r7, #0
 8004a72:	d0dd      	beq.n	8004a30 <ai_dict_decompress_f32+0x3c>
 8004a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f840 3b04 	str.w	r3, [r0], #4
 8004a84:	e7d4      	b.n	8004a30 <ai_dict_decompress_f32+0x3c>
 8004a86:	2f00      	cmp	r7, #0
 8004a88:	d1f4      	bne.n	8004a74 <ai_dict_decompress_f32+0x80>
 8004a8a:	42a8      	cmp	r0, r5
 8004a8c:	d3fd      	bcc.n	8004a8a <ai_dict_decompress_f32+0x96>
 8004a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a92:	bf00      	nop

08004a94 <forward_conv2d>:
 8004a94:	6982      	ldr	r2, [r0, #24]
 8004a96:	8813      	ldrh	r3, [r2, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8110 	beq.w	8004cbe <forward_conv2d+0x22a>
 8004a9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa2:	ed2d 8b04 	vpush	{d8-d9}
 8004aa6:	6852      	ldr	r2, [r2, #4]
 8004aa8:	6851      	ldr	r1, [r2, #4]
 8004aaa:	b0a9      	sub	sp, #164	; 0xa4
 8004aac:	4604      	mov	r4, r0
 8004aae:	b101      	cbz	r1, 8004ab2 <forward_conv2d+0x1e>
 8004ab0:	6809      	ldr	r1, [r1, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	f000 8151 	beq.w	8004d5a <forward_conv2d+0x2c6>
 8004ab8:	6915      	ldr	r5, [r2, #16]
 8004aba:	b105      	cbz	r5, 8004abe <forward_conv2d+0x2a>
 8004abc:	682d      	ldr	r5, [r5, #0]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	f000 80ff 	beq.w	8004cc2 <forward_conv2d+0x22e>
 8004ac4:	69d3      	ldr	r3, [r2, #28]
 8004ac6:	8b12      	ldrh	r2, [r2, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8137 	beq.w	8004d3c <forward_conv2d+0x2a8>
 8004ace:	2a01      	cmp	r2, #1
 8004ad0:	681e      	ldr	r6, [r3, #0]
 8004ad2:	f240 8139 	bls.w	8004d48 <forward_conv2d+0x2b4>
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	ee08 2a10 	vmov	s16, r2
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	68ca      	ldr	r2, [r1, #12]
 8004ae0:	6989      	ldr	r1, [r1, #24]
 8004ae2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8004ae6:	6889      	ldr	r1, [r1, #8]
 8004ae8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004aea:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 8004aee:	69b7      	ldr	r7, [r6, #24]
 8004af0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8004af4:	f8dc b008 	ldr.w	fp, [ip, #8]
 8004af8:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 8004afc:	ee09 1a10 	vmov	s18, r1
 8004b00:	6851      	ldr	r1, [r2, #4]
 8004b02:	911b      	str	r1, [sp, #108]	; 0x6c
 8004b04:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8004b08:	9118      	str	r1, [sp, #96]	; 0x60
 8004b0a:	68d1      	ldr	r1, [r2, #12]
 8004b0c:	6892      	ldr	r2, [r2, #8]
 8004b0e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004b10:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004b12:	9224      	str	r2, [sp, #144]	; 0x90
 8004b14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b16:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b18:	6802      	ldr	r2, [r0, #0]
 8004b1a:	9211      	str	r2, [sp, #68]	; 0x44
 8004b1c:	6842      	ldr	r2, [r0, #4]
 8004b1e:	921e      	str	r2, [sp, #120]	; 0x78
 8004b20:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b22:	9210      	str	r2, [sp, #64]	; 0x40
 8004b24:	f8de 2008 	ldr.w	r2, [lr, #8]
 8004b28:	9219      	str	r2, [sp, #100]	; 0x64
 8004b2a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004b2e:	9122      	str	r1, [sp, #136]	; 0x88
 8004b30:	921a      	str	r2, [sp, #104]	; 0x68
 8004b32:	69e2      	ldr	r2, [r4, #28]
 8004b34:	9225      	str	r2, [sp, #148]	; 0x94
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	ee08 2a90 	vmov	s17, r2
 8004b3c:	ee18 2a10 	vmov	r2, s16
 8004b40:	b11a      	cbz	r2, 8004b4a <forward_conv2d+0xb6>
 8004b42:	6992      	ldr	r2, [r2, #24]
 8004b44:	6892      	ldr	r2, [r2, #8]
 8004b46:	ee08 2a10 	vmov	s16, r2
 8004b4a:	69aa      	ldr	r2, [r5, #24]
 8004b4c:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8004b50:	6892      	ldr	r2, [r2, #8]
 8004b52:	9216      	str	r2, [sp, #88]	; 0x58
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80de 	beq.w	8004d16 <forward_conv2d+0x282>
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	2a00      	cmp	r2, #0
 8004b5e:	f000 80e3 	beq.w	8004d28 <forward_conv2d+0x294>
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	9327      	str	r3, [sp, #156]	; 0x9c
 8004b6c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004b70:	f001 fc8c 	bl	800648c <ai_array_get_byte_size>
 8004b74:	69b7      	ldr	r7, [r6, #24]
 8004b76:	9013      	str	r0, [sp, #76]	; 0x4c
 8004b78:	4a7b      	ldr	r2, [pc, #492]	; (8004d68 <forward_conv2d+0x2d4>)
 8004b7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b7c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2900      	cmp	r1, #0
 8004b82:	bf08      	it	eq
 8004b84:	4611      	moveq	r1, r2
 8004b86:	9112      	str	r1, [sp, #72]	; 0x48
 8004b88:	fa1f f18a 	uxth.w	r1, sl
 8004b8c:	1e70      	subs	r0, r6, #1
 8004b8e:	3901      	subs	r1, #1
 8004b90:	fb00 6101 	mla	r1, r0, r1, r6
 8004b94:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8004b98:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004b9a:	911c      	str	r1, [sp, #112]	; 0x70
 8004b9c:	3a01      	subs	r2, #1
 8004b9e:	1e41      	subs	r1, r0, #1
 8004ba0:	fb01 0202 	mla	r2, r1, r2, r0
 8004ba4:	921d      	str	r2, [sp, #116]	; 0x74
 8004ba6:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8004baa:	2a04      	cmp	r2, #4
 8004bac:	f000 808c 	beq.w	8004cc8 <forward_conv2d+0x234>
 8004bb0:	2a08      	cmp	r2, #8
 8004bb2:	f000 8089 	beq.w	8004cc8 <forward_conv2d+0x234>
 8004bb6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8004bba:	9315      	str	r3, [sp, #84]	; 0x54
 8004bbc:	425b      	negs	r3, r3
 8004bbe:	9314      	str	r3, [sp, #80]	; 0x50
 8004bc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d076      	beq.n	8004cb4 <forward_conv2d+0x220>
 8004bc6:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 8004bca:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8004bce:	921e      	str	r2, [sp, #120]	; 0x78
 8004bd0:	425b      	negs	r3, r3
 8004bd2:	fa0f f28a 	sxth.w	r2, sl
 8004bd6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8004bda:	9321      	str	r3, [sp, #132]	; 0x84
 8004bdc:	fb0b f30a 	mul.w	r3, fp, sl
 8004be0:	921f      	str	r2, [sp, #124]	; 0x7c
 8004be2:	9326      	str	r3, [sp, #152]	; 0x98
 8004be4:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8004be8:	9220      	str	r2, [sp, #128]	; 0x80
 8004bea:	2300      	movs	r3, #0
 8004bec:	4644      	mov	r4, r8
 8004bee:	9317      	str	r3, [sp, #92]	; 0x5c
 8004bf0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004bf2:	920e      	str	r2, [sp, #56]	; 0x38
 8004bf4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004bf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bf8:	920d      	str	r2, [sp, #52]	; 0x34
 8004bfa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004bfc:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004c04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c06:	930a      	str	r3, [sp, #40]	; 0x28
 8004c08:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8004c0a:	9307      	str	r3, [sp, #28]
 8004c0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004c0e:	9306      	str	r3, [sp, #24]
 8004c10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c12:	9305      	str	r3, [sp, #20]
 8004c14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004c16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c18:	e9cd b303 	strd	fp, r3, [sp, #12]
 8004c1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c1e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004c22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c28:	4413      	add	r3, r2
 8004c2a:	bfa8      	it	ge
 8004c2c:	2200      	movge	r2, #0
 8004c2e:	9208      	str	r2, [sp, #32]
 8004c30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004c32:	4293      	cmp	r3, r2
 8004c34:	bf28      	it	cs
 8004c36:	4613      	movcs	r3, r2
 8004c38:	9309      	str	r3, [sp, #36]	; 0x24
 8004c3a:	ee18 2a90 	vmov	r2, s17
 8004c3e:	ee18 3a10 	vmov	r3, s16
 8004c42:	ee19 1a10 	vmov	r1, s18
 8004c46:	4638      	mov	r0, r7
 8004c48:	f7ff f99c 	bl	8003f84 <ai_conv2d_stripe_f32.constprop.0>
 8004c4c:	f1bb 0f00 	cmp.w	fp, #0
 8004c50:	d020      	beq.n	8004c94 <forward_conv2d+0x200>
 8004c52:	2600      	movs	r6, #0
 8004c54:	464a      	mov	r2, r9
 8004c56:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8004c5a:	9610      	str	r6, [sp, #64]	; 0x40
 8004c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c5e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8004c60:	9211      	str	r2, [sp, #68]	; 0x44
 8004c62:	3301      	adds	r3, #1
 8004c64:	9310      	str	r3, [sp, #64]	; 0x40
 8004c66:	69ab      	ldr	r3, [r5, #24]
 8004c68:	4629      	mov	r1, r5
 8004c6a:	609f      	str	r7, [r3, #8]
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	4623      	mov	r3, r4
 8004c70:	47b0      	blx	r6
 8004c72:	444c      	add	r4, r9
 8004c74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004c76:	eba4 0308 	sub.w	r3, r4, r8
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	bfa8      	it	ge
 8004c7e:	4644      	movge	r4, r8
 8004c80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c84:	459b      	cmp	fp, r3
 8004c86:	4457      	add	r7, sl
 8004c88:	d1e8      	bne.n	8004c5c <forward_conv2d+0x1c8>
 8004c8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c8c:	4691      	mov	r9, r2
 8004c8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004c90:	4413      	add	r3, r2
 8004c92:	9316      	str	r3, [sp, #88]	; 0x58
 8004c94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c98:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004c9a:	4413      	add	r3, r2
 8004c9c:	9314      	str	r3, [sp, #80]	; 0x50
 8004c9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	9315      	str	r3, [sp, #84]	; 0x54
 8004ca4:	69ab      	ldr	r3, [r5, #24]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	609a      	str	r2, [r3, #8]
 8004caa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004cac:	3101      	adds	r1, #1
 8004cae:	428b      	cmp	r3, r1
 8004cb0:	9117      	str	r1, [sp, #92]	; 0x5c
 8004cb2:	d19d      	bne.n	8004bf0 <forward_conv2d+0x15c>
 8004cb4:	b029      	add	sp, #164	; 0xa4
 8004cb6:	ecbd 8b04 	vpop	{d8-d9}
 8004cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	deff      	udf	#255	; 0xff
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	deff      	udf	#255	; 0xff
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	2a00      	cmp	r2, #0
 8004ccc:	f43f af73 	beq.w	8004bb6 <forward_conv2d+0x122>
 8004cd0:	69a1      	ldr	r1, [r4, #24]
 8004cd2:	8808      	ldrh	r0, [r1, #0]
 8004cd4:	2803      	cmp	r0, #3
 8004cd6:	d943      	bls.n	8004d60 <forward_conv2d+0x2cc>
 8004cd8:	6849      	ldr	r1, [r1, #4]
 8004cda:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	d037      	beq.n	8004d50 <forward_conv2d+0x2bc>
 8004ce0:	6809      	ldr	r1, [r1, #0]
 8004ce2:	2900      	cmp	r1, #0
 8004ce4:	d034      	beq.n	8004d50 <forward_conv2d+0x2bc>
 8004ce6:	698c      	ldr	r4, [r1, #24]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8004cee:	9401      	str	r4, [sp, #4]
 8004cf0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8004cf2:	9400      	str	r4, [sp, #0]
 8004cf4:	ee18 4a90 	vmov	r4, s17
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	bf18      	it	ne
 8004cfc:	4604      	movne	r4, r0
 8004cfe:	ee08 4a90 	vmov	s17, r4
 8004d02:	f3c3 14c6 	ubfx	r4, r3, #7, #7
 8004d06:	f3c3 5341 	ubfx	r3, r3, #21, #2
 8004d0a:	fa44 f303 	asr.w	r3, r4, r3
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f7ff fe70 	bl	80049f4 <ai_dict_decompress_f32>
 8004d14:	e74f      	b.n	8004bb6 <forward_conv2d+0x122>
 8004d16:	f1b8 0f00 	cmp.w	r8, #0
 8004d1a:	d00b      	beq.n	8004d34 <forward_conv2d+0x2a0>
 8004d1c:	9327      	str	r3, [sp, #156]	; 0x9c
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8004d24:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d26:	e727      	b.n	8004b78 <forward_conv2d+0xe4>
 8004d28:	f1b8 0f00 	cmp.w	r8, #0
 8004d2c:	d001      	beq.n	8004d32 <forward_conv2d+0x29e>
 8004d2e:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9327      	str	r3, [sp, #156]	; 0x9c
 8004d36:	2301      	movs	r3, #1
 8004d38:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d3a:	e71d      	b.n	8004b78 <forward_conv2d+0xe4>
 8004d3c:	2a01      	cmp	r2, #1
 8004d3e:	d90a      	bls.n	8004d56 <forward_conv2d+0x2c2>
 8004d40:	ee08 3a10 	vmov	s16, r3
 8004d44:	461e      	mov	r6, r3
 8004d46:	e6ca      	b.n	8004ade <forward_conv2d+0x4a>
 8004d48:	2200      	movs	r2, #0
 8004d4a:	ee08 2a10 	vmov	s16, r2
 8004d4e:	e6c5      	b.n	8004adc <forward_conv2d+0x48>
 8004d50:	2300      	movs	r3, #0
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	deff      	udf	#255	; 0xff
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	deff      	udf	#255	; 0xff
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	deff      	udf	#255	; 0xff
 8004d60:	2300      	movs	r3, #0
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	deff      	udf	#255	; 0xff
 8004d66:	bf00      	nop
 8004d68:	08003f81 	.word	0x08003f81

08004d6c <forward_conv2d_nl_pool>:
 8004d6c:	6981      	ldr	r1, [r0, #24]
 8004d6e:	880b      	ldrh	r3, [r1, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 814d 	beq.w	8005010 <forward_conv2d_nl_pool+0x2a4>
 8004d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	ed2d 8b04 	vpush	{d8-d9}
 8004d7e:	684e      	ldr	r6, [r1, #4]
 8004d80:	6872      	ldr	r2, [r6, #4]
 8004d82:	b0b9      	sub	sp, #228	; 0xe4
 8004d84:	4604      	mov	r4, r0
 8004d86:	b102      	cbz	r2, 8004d8a <forward_conv2d_nl_pool+0x1e>
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	f000 8253 	beq.w	8005236 <forward_conv2d_nl_pool+0x4ca>
 8004d90:	6930      	ldr	r0, [r6, #16]
 8004d92:	9011      	str	r0, [sp, #68]	; 0x44
 8004d94:	b108      	cbz	r0, 8004d9a <forward_conv2d_nl_pool+0x2e>
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	9011      	str	r0, [sp, #68]	; 0x44
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	f000 813a 	beq.w	8005014 <forward_conv2d_nl_pool+0x2a8>
 8004da0:	69f0      	ldr	r0, [r6, #28]
 8004da2:	2800      	cmp	r0, #0
 8004da4:	f000 8237 	beq.w	8005216 <forward_conv2d_nl_pool+0x4aa>
 8004da8:	8b37      	ldrh	r7, [r6, #24]
 8004daa:	6806      	ldr	r6, [r0, #0]
 8004dac:	2f01      	cmp	r7, #1
 8004dae:	f240 8239 	bls.w	8005224 <forward_conv2d_nl_pool+0x4b8>
 8004db2:	6845      	ldr	r5, [r0, #4]
 8004db4:	ee08 5a10 	vmov	s16, r5
 8004db8:	6880      	ldr	r0, [r0, #8]
 8004dba:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8004dbe:	6992      	ldr	r2, [r2, #24]
 8004dc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004dc4:	6892      	ldr	r2, [r2, #8]
 8004dc6:	952a      	str	r5, [sp, #168]	; 0xa8
 8004dc8:	ee09 2a10 	vmov	s18, r2
 8004dcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004dce:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 8004dd0:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8004dd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004dd6:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8004dda:	951d      	str	r5, [sp, #116]	; 0x74
 8004ddc:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8004de0:	951f      	str	r5, [sp, #124]	; 0x7c
 8004de2:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8004de6:	9527      	str	r5, [sp, #156]	; 0x9c
 8004de8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8004dec:	952d      	str	r5, [sp, #180]	; 0xb4
 8004dee:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 8004df0:	952e      	str	r5, [sp, #184]	; 0xb8
 8004df2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004df4:	9513      	str	r5, [sp, #76]	; 0x4c
 8004df6:	683d      	ldr	r5, [r7, #0]
 8004df8:	9515      	str	r5, [sp, #84]	; 0x54
 8004dfa:	69e5      	ldr	r5, [r4, #28]
 8004dfc:	952f      	str	r5, [sp, #188]	; 0xbc
 8004dfe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004e00:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 8004e04:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8004e08:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8004e0c:	9526      	str	r5, [sp, #152]	; 0x98
 8004e0e:	e9d7 a701 	ldrd	sl, r7, [r7, #4]
 8004e12:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004e14:	9512      	str	r5, [sp, #72]	; 0x48
 8004e16:	e9d2 8200 	ldrd	r8, r2, [r2]
 8004e1a:	f8de 5004 	ldr.w	r5, [lr, #4]
 8004e1e:	9528      	str	r5, [sp, #160]	; 0xa0
 8004e20:	9224      	str	r2, [sp, #144]	; 0x90
 8004e22:	f8de 5008 	ldr.w	r5, [lr, #8]
 8004e26:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8004e2a:	9529      	str	r5, [sp, #164]	; 0xa4
 8004e2c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8004e2e:	9522      	str	r5, [sp, #136]	; 0x88
 8004e30:	ee08 2a90 	vmov	s17, r2
 8004e34:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004e36:	9523      	str	r5, [sp, #140]	; 0x8c
 8004e38:	ee18 2a10 	vmov	r2, s16
 8004e3c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004e3e:	951a      	str	r5, [sp, #104]	; 0x68
 8004e40:	b11a      	cbz	r2, 8004e4a <forward_conv2d_nl_pool+0xde>
 8004e42:	6992      	ldr	r2, [r2, #24]
 8004e44:	6892      	ldr	r2, [r2, #8]
 8004e46:	ee08 2a10 	vmov	s16, r2
 8004e4a:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	f000 81ce 	beq.w	80051f0 <forward_conv2d_nl_pool+0x484>
 8004e54:	6982      	ldr	r2, [r0, #24]
 8004e56:	2a00      	cmp	r2, #0
 8004e58:	f000 81d3 	beq.w	8005202 <forward_conv2d_nl_pool+0x496>
 8004e5c:	6943      	ldr	r3, [r0, #20]
 8004e5e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	9333      	str	r3, [sp, #204]	; 0xcc
 8004e66:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004e6a:	f001 fb0f 	bl	800648c <ai_array_get_byte_size>
 8004e6e:	69a1      	ldr	r1, [r4, #24]
 8004e70:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8004e74:	880b      	ldrh	r3, [r1, #0]
 8004e76:	9014      	str	r0, [sp, #80]	; 0x50
 8004e78:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8004e7c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8004e7e:	9215      	str	r2, [sp, #84]	; 0x54
 8004e80:	fa12 f287 	uxtah	r2, r2, r7
 8004e84:	eb02 0e00 	add.w	lr, r2, r0
 8004e88:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8004e8c:	4fa2      	ldr	r7, [pc, #648]	; (8005118 <forward_conv2d_nl_pool+0x3ac>)
 8004e8e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e90:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 8004e94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004e96:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004e98:	3e01      	subs	r6, #1
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	bf08      	it	eq
 8004e9e:	463d      	moveq	r5, r7
 8004ea0:	1e57      	subs	r7, r2, #1
 8004ea2:	fb07 2606 	mla	r6, r7, r6, r2
 8004ea6:	ebae 0206 	sub.w	r2, lr, r6
 8004eaa:	9532      	str	r5, [sp, #200]	; 0xc8
 8004eac:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004eae:	fbb2 f2f5 	udiv	r2, r2, r5
 8004eb2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004eb4:	9213      	str	r2, [sp, #76]	; 0x4c
 8004eb6:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8004eba:	962b      	str	r6, [sp, #172]	; 0xac
 8004ebc:	fa1f f08a 	uxth.w	r0, sl
 8004ec0:	1e6e      	subs	r6, r5, #1
 8004ec2:	9017      	str	r0, [sp, #92]	; 0x5c
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	f8dc 0000 	ldr.w	r0, [ip]
 8004eca:	fb06 5202 	mla	r2, r6, r2, r5
 8004ece:	922c      	str	r2, [sp, #176]	; 0xb0
 8004ed0:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8004ed2:	9520      	str	r5, [sp, #128]	; 0x80
 8004ed4:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8004ed8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8004eda:	9519      	str	r5, [sp, #100]	; 0x64
 8004edc:	2a04      	cmp	r2, #4
 8004ede:	f000 814c 	beq.w	800517a <forward_conv2d_nl_pool+0x40e>
 8004ee2:	2a08      	cmp	r2, #8
 8004ee4:	f000 8149 	beq.w	800517a <forward_conv2d_nl_pool+0x40e>
 8004ee8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	6992      	ldr	r2, [r2, #24]
 8004eee:	921c      	str	r2, [sp, #112]	; 0x70
 8004ef0:	fa0f f888 	sxth.w	r8, r8
 8004ef4:	f240 81a4 	bls.w	8005240 <forward_conv2d_nl_pool+0x4d4>
 8004ef8:	684b      	ldr	r3, [r1, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 81a2 	beq.w	8005246 <forward_conv2d_nl_pool+0x4da>
 8004f02:	681e      	ldr	r6, [r3, #0]
 8004f04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f06:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004f08:	425b      	negs	r3, r3
 8004f0a:	9316      	str	r3, [sp, #88]	; 0x58
 8004f0c:	68f3      	ldr	r3, [r6, #12]
 8004f0e:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8004f12:	69b3      	ldr	r3, [r6, #24]
 8004f14:	689c      	ldr	r4, [r3, #8]
 8004f16:	2a00      	cmp	r2, #0
 8004f18:	d070      	beq.n	8004ffc <forward_conv2d_nl_pool+0x290>
 8004f1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f1c:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8004f20:	425b      	negs	r3, r3
 8004f22:	9330      	str	r3, [sp, #192]	; 0xc0
 8004f24:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8004f28:	9331      	str	r3, [sp, #196]	; 0xc4
 8004f2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004f2c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8004f30:	fb03 f30b 	mul.w	r3, r3, fp
 8004f34:	fb0a f303 	mul.w	r3, sl, r3
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	9335      	str	r3, [sp, #212]	; 0xd4
 8004f3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f3e:	fb03 f30b 	mul.w	r3, r3, fp
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	fb0a f20b 	mul.w	r2, sl, fp
 8004f48:	9325      	str	r3, [sp, #148]	; 0x94
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f4e:	9236      	str	r2, [sp, #216]	; 0xd8
 8004f50:	931e      	str	r3, [sp, #120]	; 0x78
 8004f52:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8004f56:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8004f5a:	9234      	str	r2, [sp, #208]	; 0xd0
 8004f5c:	9337      	str	r3, [sp, #220]	; 0xdc
 8004f5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f60:	3301      	adds	r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	dc6b      	bgt.n	800503e <forward_conv2d_nl_pool+0x2d2>
 8004f66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f2c0 80d7 	blt.w	800511c <forward_conv2d_nl_pool+0x3b0>
 8004f6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f70:	4598      	cmp	r8, r3
 8004f72:	d352      	bcc.n	800501a <forward_conv2d_nl_pool+0x2ae>
 8004f74:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004f76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004f78:	69b0      	ldr	r0, [r6, #24]
 8004f7a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004f7c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004f7e:	440a      	add	r2, r1
 8004f80:	9216      	str	r2, [sp, #88]	; 0x58
 8004f82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f84:	3a01      	subs	r2, #1
 8004f86:	9213      	str	r2, [sp, #76]	; 0x4c
 8004f88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f8a:	1a52      	subs	r2, r2, r1
 8004f8c:	9215      	str	r2, [sp, #84]	; 0x54
 8004f8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004f90:	9208      	str	r2, [sp, #32]
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f96:	9201      	str	r2, [sp, #4]
 8004f98:	1ad2      	subs	r2, r2, r3
 8004f9a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8004f9e:	9305      	str	r3, [sp, #20]
 8004fa0:	eba8 0803 	sub.w	r8, r8, r3
 8004fa4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	2301      	movs	r3, #1
 8004fac:	9307      	str	r3, [sp, #28]
 8004fae:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8004fb2:	9306      	str	r3, [sp, #24]
 8004fb4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8004fb8:	9304      	str	r3, [sp, #16]
 8004fba:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8004fbe:	9302      	str	r3, [sp, #8]
 8004fc0:	3701      	adds	r7, #1
 8004fc2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	b292      	uxth	r2, r2
 8004fca:	fa1f f38b 	uxth.w	r3, fp
 8004fce:	fa1f f18a 	uxth.w	r1, sl
 8004fd2:	9717      	str	r7, [sp, #92]	; 0x5c
 8004fd4:	47a8      	blx	r5
 8004fd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004fd8:	9925      	ldr	r1, [sp, #148]	; 0x94
 8004fda:	6893      	ldr	r3, [r2, #8]
 8004fdc:	440b      	add	r3, r1
 8004fde:	6093      	str	r3, [r2, #8]
 8004fe0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004fe2:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004fec:	b21b      	sxth	r3, r3
 8004fee:	9318      	str	r3, [sp, #96]	; 0x60
 8004ff0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ff2:	42bb      	cmp	r3, r7
 8004ff4:	fa0f f888 	sxth.w	r8, r8
 8004ff8:	d8b1      	bhi.n	8004f5e <forward_conv2d_nl_pool+0x1f2>
 8004ffa:	69b3      	ldr	r3, [r6, #24]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005002:	68d3      	ldr	r3, [r2, #12]
 8005004:	6093      	str	r3, [r2, #8]
 8005006:	b039      	add	sp, #228	; 0xe4
 8005008:	ecbd 8b04 	vpop	{d8-d9}
 800500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	deff      	udf	#255	; 0xff
 8005014:	2300      	movs	r3, #0
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	deff      	udf	#255	; 0xff
 800501a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800501c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800501e:	4413      	add	r3, r2
 8005020:	9316      	str	r3, [sp, #88]	; 0x58
 8005022:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005024:	3b01      	subs	r3, #1
 8005026:	9313      	str	r3, [sp, #76]	; 0x4c
 8005028:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	9315      	str	r3, [sp, #84]	; 0x54
 800502e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005030:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005032:	4293      	cmp	r3, r2
 8005034:	d9e1      	bls.n	8004ffa <forward_conv2d_nl_pool+0x28e>
 8005036:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005038:	3301      	adds	r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	dd93      	ble.n	8004f66 <forward_conv2d_nl_pool+0x1fa>
 800503e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8005040:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005042:	920e      	str	r2, [sp, #56]	; 0x38
 8005044:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8005046:	2b00      	cmp	r3, #0
 8005048:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800504c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800504e:	930a      	str	r3, [sp, #40]	; 0x28
 8005050:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8005052:	9307      	str	r3, [sp, #28]
 8005054:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005056:	9306      	str	r3, [sp, #24]
 8005058:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800505a:	9305      	str	r3, [sp, #20]
 800505c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800505e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005060:	e9cd a303 	strd	sl, r3, [sp, #12]
 8005064:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8005066:	e9cd b301 	strd	fp, r3, [sp, #4]
 800506a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005070:	4413      	add	r3, r2
 8005072:	bfa8      	it	ge
 8005074:	2200      	movge	r2, #0
 8005076:	9208      	str	r2, [sp, #32]
 8005078:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800507a:	4293      	cmp	r3, r2
 800507c:	bf28      	it	cs
 800507e:	4613      	movcs	r3, r2
 8005080:	9309      	str	r3, [sp, #36]	; 0x24
 8005082:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 8005086:	930d      	str	r3, [sp, #52]	; 0x34
 8005088:	ee18 2a90 	vmov	r2, s17
 800508c:	ee18 3a10 	vmov	r3, s16
 8005090:	ee19 1a10 	vmov	r1, s18
 8005094:	4620      	mov	r0, r4
 8005096:	f7fe ff75 	bl	8003f84 <ai_conv2d_stripe_f32.constprop.0>
 800509a:	69b2      	ldr	r2, [r6, #24]
 800509c:	f1ba 0f00 	cmp.w	sl, #0
 80050a0:	f000 80a4 	beq.w	80051ec <forward_conv2d_nl_pool+0x480>
 80050a4:	4611      	mov	r1, r2
 80050a6:	4630      	mov	r0, r6
 80050a8:	465a      	mov	r2, fp
 80050aa:	4656      	mov	r6, sl
 80050ac:	e9dd ba33 	ldrd	fp, sl, [sp, #204]	; 0xcc
 80050b0:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
 80050b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80050b6:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 80050ba:	2700      	movs	r7, #0
 80050bc:	608c      	str	r4, [r1, #8]
 80050be:	462b      	mov	r3, r5
 80050c0:	4601      	mov	r1, r0
 80050c2:	9212      	str	r2, [sp, #72]	; 0x48
 80050c4:	9011      	str	r0, [sp, #68]	; 0x44
 80050c6:	47c0      	blx	r8
 80050c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80050ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80050cc:	6981      	ldr	r1, [r0, #24]
 80050ce:	445d      	add	r5, fp
 80050d0:	eba5 0309 	sub.w	r3, r5, r9
 80050d4:	4293      	cmp	r3, r2
 80050d6:	bfa8      	it	ge
 80050d8:	464d      	movge	r5, r9
 80050da:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80050de:	684b      	ldr	r3, [r1, #4]
 80050e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050e2:	4454      	add	r4, sl
 80050e4:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80050e8:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80050ec:	429c      	cmp	r4, r3
 80050ee:	f107 0701 	add.w	r7, r7, #1
 80050f2:	bf28      	it	cs
 80050f4:	eba4 040e 	subcs.w	r4, r4, lr
 80050f8:	42be      	cmp	r6, r7
 80050fa:	d1df      	bne.n	80050bc <forward_conv2d_nl_pool+0x350>
 80050fc:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005100:	9511      	str	r5, [sp, #68]	; 0x44
 8005102:	4693      	mov	fp, r2
 8005104:	46b2      	mov	sl, r6
 8005106:	460a      	mov	r2, r1
 8005108:	4606      	mov	r6, r0
 800510a:	4661      	mov	r1, ip
 800510c:	f108 0801 	add.w	r8, r8, #1
 8005110:	6091      	str	r1, [r2, #8]
 8005112:	fa0f f888 	sxth.w	r8, r8
 8005116:	e72a      	b.n	8004f6e <forward_conv2d_nl_pool+0x202>
 8005118:	08003f81 	.word	0x08003f81
 800511c:	69b3      	ldr	r3, [r6, #24]
 800511e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8005120:	68d9      	ldr	r1, [r3, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	fb02 f208 	mul.w	r2, r2, r8
 8005128:	eba4 0282 	sub.w	r2, r4, r2, lsl #2
 800512c:	4291      	cmp	r1, r2
 800512e:	bf88      	it	hi
 8005130:	eb02 0283 	addhi.w	r2, r2, r3, lsl #2
 8005134:	4291      	cmp	r1, r2
 8005136:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800513a:	d21c      	bcs.n	8005176 <forward_conv2d_nl_pool+0x40a>
 800513c:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800513e:	4540      	cmp	r0, r8
 8005140:	4419      	add	r1, r3
 8005142:	d140      	bne.n	80051c6 <forward_conv2d_nl_pool+0x45a>
 8005144:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005146:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005148:	4402      	add	r2, r0
 800514a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800514c:	fa1f f888 	uxth.w	r8, r8
 8005150:	eba2 0208 	sub.w	r2, r2, r8
 8005154:	4480      	add	r8, r0
 8005156:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8005158:	4404      	add	r4, r0
 800515a:	b212      	sxth	r2, r2
 800515c:	428c      	cmp	r4, r1
 800515e:	921e      	str	r2, [sp, #120]	; 0x78
 8005160:	fa0f f888 	sxth.w	r8, r8
 8005164:	f4ff af03 	bcc.w	8004f6e <forward_conv2d_nl_pool+0x202>
 8005168:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800516a:	425b      	negs	r3, r3
 800516c:	441c      	add	r4, r3
 800516e:	428c      	cmp	r4, r1
 8005170:	d2fc      	bcs.n	800516c <forward_conv2d_nl_pool+0x400>
 8005172:	9511      	str	r5, [sp, #68]	; 0x44
 8005174:	e6fb      	b.n	8004f6e <forward_conv2d_nl_pool+0x202>
 8005176:	4419      	add	r1, r3
 8005178:	e7e4      	b.n	8005144 <forward_conv2d_nl_pool+0x3d8>
 800517a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800517e:	2a00      	cmp	r2, #0
 8005180:	f43f aeb2 	beq.w	8004ee8 <forward_conv2d_nl_pool+0x17c>
 8005184:	2b03      	cmp	r3, #3
 8005186:	d960      	bls.n	800524a <forward_conv2d_nl_pool+0x4de>
 8005188:	684b      	ldr	r3, [r1, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	2b00      	cmp	r3, #0
 800518e:	d04d      	beq.n	800522c <forward_conv2d_nl_pool+0x4c0>
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d04a      	beq.n	800522c <forward_conv2d_nl_pool+0x4c0>
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800519c:	e9d3 3601 	ldrd	r3, r6, [r3, #4]
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80051aa:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80051ae:	4103      	asrs	r3, r0
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7ff fc1e 	bl	80049f4 <ai_dict_decompress_f32>
 80051b8:	69a1      	ldr	r1, [r4, #24]
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	d039      	beq.n	8005232 <forward_conv2d_nl_pool+0x4c6>
 80051be:	ee08 6a90 	vmov	s17, r6
 80051c2:	880b      	ldrh	r3, [r1, #0]
 80051c4:	e690      	b.n	8004ee8 <forward_conv2d_nl_pool+0x17c>
 80051c6:	428a      	cmp	r2, r1
 80051c8:	d2bc      	bcs.n	8005144 <forward_conv2d_nl_pool+0x3d8>
 80051ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80051cc:	4620      	mov	r0, r4
 80051ce:	f852 3b04 	ldr.w	r3, [r2], #4
 80051d2:	f840 3b04 	str.w	r3, [r0], #4
 80051d6:	69b1      	ldr	r1, [r6, #24]
 80051d8:	684b      	ldr	r3, [r1, #4]
 80051da:	68c9      	ldr	r1, [r1, #12]
 80051dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80051e0:	4291      	cmp	r1, r2
 80051e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80051e6:	d8f2      	bhi.n	80051ce <forward_conv2d_nl_pool+0x462>
 80051e8:	9511      	str	r5, [sp, #68]	; 0x44
 80051ea:	e7ab      	b.n	8005144 <forward_conv2d_nl_pool+0x3d8>
 80051ec:	68d1      	ldr	r1, [r2, #12]
 80051ee:	e78d      	b.n	800510c <forward_conv2d_nl_pool+0x3a0>
 80051f0:	f1b9 0f00 	cmp.w	r9, #0
 80051f4:	d001      	beq.n	80051fa <forward_conv2d_nl_pool+0x48e>
 80051f6:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80051fa:	9033      	str	r0, [sp, #204]	; 0xcc
 80051fc:	2201      	movs	r2, #1
 80051fe:	9214      	str	r2, [sp, #80]	; 0x50
 8005200:	e63a      	b.n	8004e78 <forward_conv2d_nl_pool+0x10c>
 8005202:	f1b9 0f00 	cmp.w	r9, #0
 8005206:	d001      	beq.n	800520c <forward_conv2d_nl_pool+0x4a0>
 8005208:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800520c:	2200      	movs	r2, #0
 800520e:	9233      	str	r2, [sp, #204]	; 0xcc
 8005210:	2201      	movs	r2, #1
 8005212:	9214      	str	r2, [sp, #80]	; 0x50
 8005214:	e630      	b.n	8004e78 <forward_conv2d_nl_pool+0x10c>
 8005216:	8b36      	ldrh	r6, [r6, #24]
 8005218:	2e01      	cmp	r6, #1
 800521a:	d90f      	bls.n	800523c <forward_conv2d_nl_pool+0x4d0>
 800521c:	ee08 0a10 	vmov	s16, r0
 8005220:	4606      	mov	r6, r0
 8005222:	e5ca      	b.n	8004dba <forward_conv2d_nl_pool+0x4e>
 8005224:	2500      	movs	r5, #0
 8005226:	ee08 5a10 	vmov	s16, r5
 800522a:	e5c5      	b.n	8004db8 <forward_conv2d_nl_pool+0x4c>
 800522c:	2300      	movs	r3, #0
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	deff      	udf	#255	; 0xff
 8005232:	880b      	ldrh	r3, [r1, #0]
 8005234:	e658      	b.n	8004ee8 <forward_conv2d_nl_pool+0x17c>
 8005236:	2300      	movs	r3, #0
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	deff      	udf	#255	; 0xff
 800523c:	68c3      	ldr	r3, [r0, #12]
 800523e:	deff      	udf	#255	; 0xff
 8005240:	2300      	movs	r3, #0
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	deff      	udf	#255	; 0xff
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	deff      	udf	#255	; 0xff
 800524a:	2300      	movs	r3, #0
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	deff      	udf	#255	; 0xff

08005250 <forward_dense>:
 8005250:	6983      	ldr	r3, [r0, #24]
 8005252:	881a      	ldrh	r2, [r3, #0]
 8005254:	2a00      	cmp	r2, #0
 8005256:	f000 8181 	beq.w	800555c <forward_dense+0x30c>
 800525a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525e:	ed2d 8b02 	vpush	{d8}
 8005262:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005266:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800526a:	b095      	sub	sp, #84	; 0x54
 800526c:	b105      	cbz	r5, 8005270 <forward_dense+0x20>
 800526e:	682d      	ldr	r5, [r5, #0]
 8005270:	2a01      	cmp	r2, #1
 8005272:	f000 828f 	beq.w	8005794 <forward_dense+0x544>
 8005276:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800527a:	b106      	cbz	r6, 800527e <forward_dense+0x2e>
 800527c:	6836      	ldr	r6, [r6, #0]
 800527e:	2a02      	cmp	r2, #2
 8005280:	f000 816e 	beq.w	8005560 <forward_dense+0x310>
 8005284:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8005288:	930b      	str	r3, [sp, #44]	; 0x2c
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8274 	beq.w	8005778 <forward_dense+0x528>
 8005290:	4619      	mov	r1, r3
 8005292:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8005296:	6809      	ldr	r1, [r1, #0]
 8005298:	910d      	str	r1, [sp, #52]	; 0x34
 800529a:	2b01      	cmp	r3, #1
 800529c:	f240 826e 	bls.w	800577c <forward_dense+0x52c>
 80052a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80052a6:	460b      	mov	r3, r1
 80052a8:	68e8      	ldr	r0, [r5, #12]
 80052aa:	68f7      	ldr	r7, [r6, #12]
 80052ac:	6840      	ldr	r0, [r0, #4]
 80052ae:	6999      	ldr	r1, [r3, #24]
 80052b0:	9013      	str	r0, [sp, #76]	; 0x4c
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	680b      	ldr	r3, [r1, #0]
 80052b6:	9012      	str	r0, [sp, #72]	; 0x48
 80052b8:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80052bc:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80052c0:	fb00 f404 	mul.w	r4, r0, r4
 80052c4:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80052c8:	fa4e f000 	asr.w	r0, lr, r0
 80052cc:	2a03      	cmp	r2, #3
 80052ce:	9010      	str	r0, [sp, #64]	; 0x40
 80052d0:	f000 825d 	beq.w	800578e <forward_dense+0x53e>
 80052d4:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80052d8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80052dc:	2a00      	cmp	r2, #0
 80052de:	f000 8246 	beq.w	800576e <forward_dense+0x51e>
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	2a00      	cmp	r2, #0
 80052e6:	f000 8242 	beq.w	800576e <forward_dense+0x51e>
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80052f0:	f000 822c 	beq.w	800574c <forward_dense+0x4fc>
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	f000 8229 	beq.w	800574c <forward_dense+0x4fc>
 80052fa:	f04f 0b00 	mov.w	fp, #0
 80052fe:	69b2      	ldr	r2, [r6, #24]
 8005300:	69ab      	ldr	r3, [r5, #24]
 8005302:	6891      	ldr	r1, [r2, #8]
 8005304:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	6952      	ldr	r2, [r2, #20]
 800530a:	9106      	str	r1, [sp, #24]
 800530c:	fb07 f404 	mul.w	r4, r7, r4
 8005310:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005314:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005316:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800531a:	4281      	cmp	r1, r0
 800531c:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8005320:	900e      	str	r0, [sp, #56]	; 0x38
 8005322:	940c      	str	r4, [sp, #48]	; 0x30
 8005324:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8005328:	f080 8113 	bcs.w	8005552 <forward_dense+0x302>
 800532c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800532e:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800557c <forward_dense+0x32c>
 8005332:	f021 0201 	bic.w	r2, r1, #1
 8005336:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800533a:	9204      	str	r2, [sp, #16]
 800533c:	f001 0201 	and.w	r2, r1, #1
 8005340:	08c8      	lsrs	r0, r1, #3
 8005342:	9208      	str	r2, [sp, #32]
 8005344:	008a      	lsls	r2, r1, #2
 8005346:	f001 0a07 	and.w	sl, r1, #7
 800534a:	920f      	str	r2, [sp, #60]	; 0x3c
 800534c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8005350:	3320      	adds	r3, #32
 8005352:	465c      	mov	r4, fp
 8005354:	9007      	str	r0, [sp, #28]
 8005356:	46cb      	mov	fp, r9
 8005358:	9205      	str	r2, [sp, #20]
 800535a:	9302      	str	r3, [sp, #8]
 800535c:	46c1      	mov	r9, r8
 800535e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8005362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	9b02      	ldr	r3, [sp, #8]
 800536a:	3b20      	subs	r3, #32
 800536c:	930a      	str	r3, [sp, #40]	; 0x28
 800536e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005370:	b10b      	cbz	r3, 8005376 <forward_dense+0x126>
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2c00      	cmp	r4, #0
 8005378:	f000 81da 	beq.w	8005730 <forward_dense+0x4e0>
 800537c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800537e:	2904      	cmp	r1, #4
 8005380:	9906      	ldr	r1, [sp, #24]
 8005382:	f000 80fd 	beq.w	8005580 <forward_dense+0x330>
 8005386:	4549      	cmp	r1, r9
 8005388:	f080 80d2 	bcs.w	8005530 <forward_dense+0x2e0>
 800538c:	460f      	mov	r7, r1
 800538e:	9907      	ldr	r1, [sp, #28]
 8005390:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005394:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005398:	1c4e      	adds	r6, r1, #1
 800539a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800539e:	4694      	mov	ip, r2
 80053a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80053a2:	468e      	mov	lr, r1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80de 	beq.w	8005566 <forward_dense+0x316>
 80053aa:	ecf3 2a01 	vldmia	r3!, {s5}
 80053ae:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800557c <forward_dense+0x32c>
 80053b2:	f1be 0f00 	cmp.w	lr, #0
 80053b6:	f000 80de 	beq.w	8005576 <forward_dense+0x326>
 80053ba:	f10c 0108 	add.w	r1, ip, #8
 80053be:	4640      	mov	r0, r8
 80053c0:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80053c4:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80053c8:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80053cc:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80053d0:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80053d4:	ed10 5a04 	vldr	s10, [r0, #-16]
 80053d8:	ed50 5a03 	vldr	s11, [r0, #-12]
 80053dc:	ed10 6a02 	vldr	s12, [r0, #-8]
 80053e0:	ed50 6a01 	vldr	s13, [r0, #-4]
 80053e4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80053e8:	edd5 7a00 	vldr	s15, [r5]
 80053ec:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80053f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80053f4:	ee67 7a83 	vmul.f32	s15, s15, s6
 80053f8:	ed95 3a00 	vldr	s6, [r5]
 80053fc:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8005400:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005404:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005408:	3108      	adds	r1, #8
 800540a:	edd5 3a00 	vldr	s7, [r5]
 800540e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8005412:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005416:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800541a:	3020      	adds	r0, #32
 800541c:	ed95 4a00 	vldr	s8, [r5]
 8005420:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005424:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005428:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800542c:	edd5 4a00 	vldr	s9, [r5]
 8005430:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8005434:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005438:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800543c:	ed95 5a00 	vldr	s10, [r5]
 8005440:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8005444:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005448:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800544c:	edd5 5a00 	vldr	s11, [r5]
 8005450:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8005454:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005458:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800545c:	428e      	cmp	r6, r1
 800545e:	ed95 6a00 	vldr	s12, [r5]
 8005462:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800546a:	d1a9      	bne.n	80053c0 <forward_dense+0x170>
 800546c:	f1a6 0108 	sub.w	r1, r6, #8
 8005470:	4650      	mov	r0, sl
 8005472:	2a00      	cmp	r2, #0
 8005474:	d04a      	beq.n	800550c <forward_dense+0x2bc>
 8005476:	780d      	ldrb	r5, [r1, #0]
 8005478:	edd0 6a00 	vldr	s13, [r0]
 800547c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005480:	edd5 7a00 	vldr	s15, [r5]
 8005484:	2a01      	cmp	r2, #1
 8005486:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800548a:	d03f      	beq.n	800550c <forward_dense+0x2bc>
 800548c:	784d      	ldrb	r5, [r1, #1]
 800548e:	edd0 6a01 	vldr	s13, [r0, #4]
 8005492:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005496:	edd5 7a00 	vldr	s15, [r5]
 800549a:	2a02      	cmp	r2, #2
 800549c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054a0:	d034      	beq.n	800550c <forward_dense+0x2bc>
 80054a2:	788d      	ldrb	r5, [r1, #2]
 80054a4:	edd0 6a02 	vldr	s13, [r0, #8]
 80054a8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054ac:	edd5 7a00 	vldr	s15, [r5]
 80054b0:	2a03      	cmp	r2, #3
 80054b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054b6:	d029      	beq.n	800550c <forward_dense+0x2bc>
 80054b8:	78cd      	ldrb	r5, [r1, #3]
 80054ba:	edd0 6a03 	vldr	s13, [r0, #12]
 80054be:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054c2:	edd5 7a00 	vldr	s15, [r5]
 80054c6:	2a04      	cmp	r2, #4
 80054c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054cc:	d01e      	beq.n	800550c <forward_dense+0x2bc>
 80054ce:	790d      	ldrb	r5, [r1, #4]
 80054d0:	edd0 6a04 	vldr	s13, [r0, #16]
 80054d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054d8:	edd5 7a00 	vldr	s15, [r5]
 80054dc:	2a05      	cmp	r2, #5
 80054de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054e2:	d013      	beq.n	800550c <forward_dense+0x2bc>
 80054e4:	794d      	ldrb	r5, [r1, #5]
 80054e6:	edd0 6a05 	vldr	s13, [r0, #20]
 80054ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054ee:	edd5 7a00 	vldr	s15, [r5]
 80054f2:	2a06      	cmp	r2, #6
 80054f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054f8:	d008      	beq.n	800550c <forward_dense+0x2bc>
 80054fa:	7989      	ldrb	r1, [r1, #6]
 80054fc:	edd0 7a06 	vldr	s15, [r0, #24]
 8005500:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005504:	edd1 6a00 	vldr	s13, [r1]
 8005508:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800550c:	44dc      	add	ip, fp
 800550e:	445e      	add	r6, fp
 8005510:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005514:	eca7 7a01 	vstmia	r7!, {s14}
 8005518:	454f      	cmp	r7, r9
 800551a:	f4ff af43 	bcc.w	80053a4 <forward_dense+0x154>
 800551e:	9a06      	ldr	r2, [sp, #24]
 8005520:	eba9 0302 	sub.w	r3, r9, r2
 8005524:	3b01      	subs	r3, #1
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	3304      	adds	r3, #4
 800552c:	18d3      	adds	r3, r2, r3
 800552e:	9306      	str	r3, [sp, #24]
 8005530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005532:	9a05      	ldr	r2, [sp, #20]
 8005534:	4499      	add	r9, r3
 8005536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005538:	441a      	add	r2, r3
 800553a:	9205      	str	r2, [sp, #20]
 800553c:	9a02      	ldr	r2, [sp, #8]
 800553e:	441a      	add	r2, r3
 8005540:	9202      	str	r2, [sp, #8]
 8005542:	9a04      	ldr	r2, [sp, #16]
 8005544:	441a      	add	r2, r3
 8005546:	9204      	str	r2, [sp, #16]
 8005548:	9b06      	ldr	r3, [sp, #24]
 800554a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800554c:	4293      	cmp	r3, r2
 800554e:	f4ff af08 	bcc.w	8005362 <forward_dense+0x112>
 8005552:	b015      	add	sp, #84	; 0x54
 8005554:	ecbd 8b02 	vpop	{d8}
 8005558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555c:	6853      	ldr	r3, [r2, #4]
 800555e:	deff      	udf	#255	; 0xff
 8005560:	2300      	movs	r3, #0
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	deff      	udf	#255	; 0xff
 8005566:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800557c <forward_dense+0x32c>
 800556a:	eef0 2a48 	vmov.f32	s5, s16
 800556e:	f1be 0f00 	cmp.w	lr, #0
 8005572:	f47f af22 	bne.w	80053ba <forward_dense+0x16a>
 8005576:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005578:	4661      	mov	r1, ip
 800557a:	e77a      	b.n	8005472 <forward_dense+0x222>
 800557c:	00000000 	.word	0x00000000
 8005580:	4549      	cmp	r1, r9
 8005582:	d2d5      	bcs.n	8005530 <forward_dense+0x2e0>
 8005584:	9807      	ldr	r0, [sp, #28]
 8005586:	9103      	str	r1, [sp, #12]
 8005588:	9904      	ldr	r1, [sp, #16]
 800558a:	f100 0c01 	add.w	ip, r0, #1
 800558e:	3901      	subs	r1, #1
 8005590:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8005594:	9109      	str	r1, [sp, #36]	; 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80b2 	beq.w	8005700 <forward_dense+0x4b0>
 800559c:	9907      	ldr	r1, [sp, #28]
 800559e:	ecf3 2a01 	vldmia	r3!, {s5}
 80055a2:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800557c <forward_dense+0x32c>
 80055a6:	2900      	cmp	r1, #0
 80055a8:	f000 80b2 	beq.w	8005710 <forward_dense+0x4c0>
 80055ac:	9902      	ldr	r1, [sp, #8]
 80055ae:	1d10      	adds	r0, r2, #4
 80055b0:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80055b4:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80055b8:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80055bc:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80055c0:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80055c4:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80055c8:	ed11 5a04 	vldr	s10, [r1, #-16]
 80055cc:	ed51 5a03 	vldr	s11, [r1, #-12]
 80055d0:	ed11 6a02 	vldr	s12, [r1, #-8]
 80055d4:	ed51 6a01 	vldr	s13, [r1, #-4]
 80055d8:	f006 070f 	and.w	r7, r6, #15
 80055dc:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80055e0:	edd7 7a00 	vldr	s15, [r7]
 80055e4:	0936      	lsrs	r6, r6, #4
 80055e6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80055ea:	ed96 3a00 	vldr	s6, [r6]
 80055ee:	ee67 7a82 	vmul.f32	s15, s15, s4
 80055f2:	092e      	lsrs	r6, r5, #4
 80055f4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80055f8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80055fc:	f005 050f 	and.w	r5, r5, #15
 8005600:	edd6 3a00 	vldr	s7, [r6]
 8005604:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8005608:	eee3 7a84 	vfma.f32	s15, s7, s8
 800560c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005610:	0937      	lsrs	r7, r6, #4
 8005612:	ed95 4a00 	vldr	s8, [r5]
 8005616:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800561a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800561e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8005622:	f006 060f 	and.w	r6, r6, #15
 8005626:	edd7 4a00 	vldr	s9, [r7]
 800562a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800562e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005632:	3004      	adds	r0, #4
 8005634:	ed96 5a00 	vldr	s10, [r6]
 8005638:	092e      	lsrs	r6, r5, #4
 800563a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800563e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005642:	f005 050f 	and.w	r5, r5, #15
 8005646:	edd6 5a00 	vldr	s11, [r6]
 800564a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800564e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005652:	4584      	cmp	ip, r0
 8005654:	ed95 6a00 	vldr	s12, [r5]
 8005658:	eee6 7a26 	vfma.f32	s15, s12, s13
 800565c:	f101 0120 	add.w	r1, r1, #32
 8005660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005664:	d1a4      	bne.n	80055b0 <forward_dense+0x360>
 8005666:	f8dd e014 	ldr.w	lr, [sp, #20]
 800566a:	f1ac 0804 	sub.w	r8, ip, #4
 800566e:	9904      	ldr	r1, [sp, #16]
 8005670:	458e      	cmp	lr, r1
 8005672:	d22a      	bcs.n	80056ca <forward_dense+0x47a>
 8005674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005676:	eba1 070e 	sub.w	r7, r1, lr
 800567a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800567e:	f10e 0008 	add.w	r0, lr, #8
 8005682:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005686:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800568a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800568e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8005692:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005696:	f001 050f 	and.w	r5, r1, #15
 800569a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800569e:	edd5 7a00 	vldr	s15, [r5]
 80056a2:	0909      	lsrs	r1, r1, #4
 80056a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80056a8:	ed91 6a00 	vldr	s12, [r1]
 80056ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80056b0:	42b7      	cmp	r7, r6
 80056b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80056b6:	f100 0008 	add.w	r0, r0, #8
 80056ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056be:	d1e4      	bne.n	800568a <forward_dense+0x43a>
 80056c0:	f10a 0a01 	add.w	sl, sl, #1
 80056c4:	44d0      	add	r8, sl
 80056c6:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80056ca:	9908      	ldr	r1, [sp, #32]
 80056cc:	b321      	cbz	r1, 8005718 <forward_dense+0x4c8>
 80056ce:	f898 1000 	ldrb.w	r1, [r8]
 80056d2:	edde 7a00 	vldr	s15, [lr]
 80056d6:	0909      	lsrs	r1, r1, #4
 80056d8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80056dc:	edd1 6a00 	vldr	s13, [r1]
 80056e0:	9903      	ldr	r1, [sp, #12]
 80056e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80056e6:	445a      	add	r2, fp
 80056e8:	44dc      	add	ip, fp
 80056ea:	ee72 2a87 	vadd.f32	s5, s5, s14
 80056ee:	ece1 2a01 	vstmia	r1!, {s5}
 80056f2:	4589      	cmp	r9, r1
 80056f4:	9103      	str	r1, [sp, #12]
 80056f6:	f67f af12 	bls.w	800551e <forward_dense+0x2ce>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f47f af4e 	bne.w	800559c <forward_dense+0x34c>
 8005700:	9907      	ldr	r1, [sp, #28]
 8005702:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800557c <forward_dense+0x32c>
 8005706:	eef0 2a48 	vmov.f32	s5, s16
 800570a:	2900      	cmp	r1, #0
 800570c:	f47f af4e 	bne.w	80055ac <forward_dense+0x35c>
 8005710:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005714:	4690      	mov	r8, r2
 8005716:	e7aa      	b.n	800566e <forward_dense+0x41e>
 8005718:	9903      	ldr	r1, [sp, #12]
 800571a:	ee32 7a87 	vadd.f32	s14, s5, s14
 800571e:	445a      	add	r2, fp
 8005720:	eca1 7a01 	vstmia	r1!, {s14}
 8005724:	4549      	cmp	r1, r9
 8005726:	9103      	str	r1, [sp, #12]
 8005728:	44dc      	add	ip, fp
 800572a:	f4ff af34 	bcc.w	8005596 <forward_dense+0x346>
 800572e:	e6f6      	b.n	800551e <forward_dense+0x2ce>
 8005730:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005732:	9d06      	ldr	r5, [sp, #24]
 8005734:	9101      	str	r1, [sp, #4]
 8005736:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005738:	9100      	str	r1, [sp, #0]
 800573a:	4628      	mov	r0, r5
 800573c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800573e:	f000 fcf7 	bl	8006130 <lite_dense_if32of32wf32>
 8005742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005744:	462b      	mov	r3, r5
 8005746:	4413      	add	r3, r2
 8005748:	9306      	str	r3, [sp, #24]
 800574a:	e6f1      	b.n	8005530 <forward_dense+0x2e0>
 800574c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8005750:	f1b9 0f00 	cmp.w	r9, #0
 8005754:	d016      	beq.n	8005784 <forward_dense+0x534>
 8005756:	e9d9 0100 	ldrd	r0, r1, [r9]
 800575a:	f000 fe97 	bl	800648c <ai_array_get_byte_size>
 800575e:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8005762:	4602      	mov	r2, r0
 8005764:	4641      	mov	r1, r8
 8005766:	4658      	mov	r0, fp
 8005768:	f000 feee 	bl	8006548 <memcpy>
 800576c:	e5c7      	b.n	80052fe <forward_dense+0xae>
 800576e:	2b04      	cmp	r3, #4
 8005770:	d00a      	beq.n	8005788 <forward_dense+0x538>
 8005772:	f04f 0900 	mov.w	r9, #0
 8005776:	e5bd      	b.n	80052f4 <forward_dense+0xa4>
 8005778:	930d      	str	r3, [sp, #52]	; 0x34
 800577a:	e595      	b.n	80052a8 <forward_dense+0x58>
 800577c:	2300      	movs	r3, #0
 800577e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005780:	460b      	mov	r3, r1
 8005782:	e591      	b.n	80052a8 <forward_dense+0x58>
 8005784:	46c3      	mov	fp, r8
 8005786:	e5ba      	b.n	80052fe <forward_dense+0xae>
 8005788:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800578c:	e5b7      	b.n	80052fe <forward_dense+0xae>
 800578e:	2300      	movs	r3, #0
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	deff      	udf	#255	; 0xff
 8005794:	2300      	movs	r3, #0
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	deff      	udf	#255	; 0xff
 800579a:	bf00      	nop

0800579c <pool_func_mp_array_f32>:
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	b093      	sub	sp, #76	; 0x4c
 80057a2:	4698      	mov	r8, r3
 80057a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80057a6:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	9303      	str	r3, [sp, #12]
 80057ae:	4693      	mov	fp, r2
 80057b0:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 80057b4:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 80057b8:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80057bc:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80057c0:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 80057c4:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
 80057c8:	9505      	str	r5, [sp, #20]
 80057ca:	4689      	mov	r9, r1
 80057cc:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 80057d0:	9104      	str	r1, [sp, #16]
 80057d2:	ea52 0403 	orrs.w	r4, r2, r3
 80057d6:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 80057da:	9601      	str	r6, [sp, #4]
 80057dc:	9706      	str	r7, [sp, #24]
 80057de:	9100      	str	r1, [sp, #0]
 80057e0:	9002      	str	r0, [sp, #8]
 80057e2:	d108      	bne.n	80057f6 <pool_func_mp_array_f32+0x5a>
 80057e4:	eba5 0009 	sub.w	r0, r5, r9
 80057e8:	3801      	subs	r0, #1
 80057ea:	3901      	subs	r1, #1
 80057ec:	fb11 0107 	smlabb	r1, r1, r7, r0
 80057f0:	0408      	lsls	r0, r1, #16
 80057f2:	f100 8083 	bmi.w	80058fc <pool_func_mp_array_f32+0x160>
 80057f6:	9902      	ldr	r1, [sp, #8]
 80057f8:	2900      	cmp	r1, #0
 80057fa:	d07c      	beq.n	80058f6 <pool_func_mp_array_f32+0x15a>
 80057fc:	9900      	ldr	r1, [sp, #0]
 80057fe:	2900      	cmp	r1, #0
 8005800:	d079      	beq.n	80058f6 <pool_func_mp_array_f32+0x15a>
 8005802:	f1b8 0f00 	cmp.w	r8, #0
 8005806:	d076      	beq.n	80058f6 <pool_func_mp_array_f32+0x15a>
 8005808:	f1b8 0f01 	cmp.w	r8, #1
 800580c:	9901      	ldr	r1, [sp, #4]
 800580e:	f040 80e3 	bne.w	80059d8 <pool_func_mp_array_f32+0x23c>
 8005812:	1a8a      	subs	r2, r1, r2
 8005814:	9905      	ldr	r1, [sp, #20]
 8005816:	1ac9      	subs	r1, r1, r3
 8005818:	425b      	negs	r3, r3
 800581a:	b292      	uxth	r2, r2
 800581c:	b29b      	uxth	r3, r3
 800581e:	9207      	str	r2, [sp, #28]
 8005820:	930c      	str	r3, [sp, #48]	; 0x30
 8005822:	b28a      	uxth	r2, r1
 8005824:	2300      	movs	r3, #0
 8005826:	920b      	str	r2, [sp, #44]	; 0x2c
 8005828:	9308      	str	r3, [sp, #32]
 800582a:	9a00      	ldr	r2, [sp, #0]
 800582c:	fb02 f303 	mul.w	r3, r2, r3
 8005830:	9309      	str	r3, [sp, #36]	; 0x24
 8005832:	9a07      	ldr	r2, [sp, #28]
 8005834:	9b01      	ldr	r3, [sp, #4]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	b21b      	sxth	r3, r3
 800583a:	930a      	str	r3, [sp, #40]	; 0x28
 800583c:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	; 0x2c
 8005840:	f04f 0c00 	mov.w	ip, #0
 8005844:	9305      	str	r3, [sp, #20]
 8005846:	b217      	sxth	r7, r2
 8005848:	46e6      	mov	lr, ip
 800584a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800584c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584e:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8005852:	eddf 7aad 	vldr	s15, [pc, #692]	; 8005b08 <pool_func_mp_array_f32+0x36c>
 8005856:	428f      	cmp	r7, r1
 8005858:	449e      	add	lr, r3
 800585a:	fa0f f088 	sxth.w	r0, r8
 800585e:	dd28      	ble.n	80058b2 <pool_func_mp_array_f32+0x116>
 8005860:	ea00 75e0 	and.w	r5, r0, r0, asr #31
 8005864:	4286      	cmp	r6, r0
 8005866:	da20      	bge.n	80058aa <pool_func_mp_array_f32+0x10e>
 8005868:	2900      	cmp	r1, #0
 800586a:	fb09 f401 	mul.w	r4, r9, r1
 800586e:	db1c      	blt.n	80058aa <pool_func_mp_array_f32+0x10e>
 8005870:	4559      	cmp	r1, fp
 8005872:	da1a      	bge.n	80058aa <pool_func_mp_array_f32+0x10e>
 8005874:	2e00      	cmp	r6, #0
 8005876:	4633      	mov	r3, r6
 8005878:	da05      	bge.n	8005886 <pool_func_mp_array_f32+0xea>
 800587a:	3301      	adds	r3, #1
 800587c:	b21b      	sxth	r3, r3
 800587e:	429d      	cmp	r5, r3
 8005880:	dcfb      	bgt.n	800587a <pool_func_mp_array_f32+0xde>
 8005882:	4283      	cmp	r3, r0
 8005884:	da11      	bge.n	80058aa <pool_func_mp_array_f32+0x10e>
 8005886:	191a      	adds	r2, r3, r4
 8005888:	454b      	cmp	r3, r9
 800588a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800588e:	da08      	bge.n	80058a2 <pool_func_mp_array_f32+0x106>
 8005890:	ed92 7a00 	vldr	s14, [r2]
 8005894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589c:	bfb8      	it	lt
 800589e:	eef0 7a47 	vmovlt.f32	s15, s14
 80058a2:	3301      	adds	r3, #1
 80058a4:	b21b      	sxth	r3, r3
 80058a6:	4283      	cmp	r3, r0
 80058a8:	dbed      	blt.n	8005886 <pool_func_mp_array_f32+0xea>
 80058aa:	3101      	adds	r1, #1
 80058ac:	b209      	sxth	r1, r1
 80058ae:	42b9      	cmp	r1, r7
 80058b0:	dbd8      	blt.n	8005864 <pool_func_mp_array_f32+0xc8>
 80058b2:	9b03      	ldr	r3, [sp, #12]
 80058b4:	9a06      	ldr	r2, [sp, #24]
 80058b6:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 80058ba:	9b05      	ldr	r3, [sp, #20]
 80058bc:	edce 7a00 	vstr	s15, [lr]
 80058c0:	4413      	add	r3, r2
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f10c 0c01 	add.w	ip, ip, #1
 80058c8:	9305      	str	r3, [sp, #20]
 80058ca:	9b00      	ldr	r3, [sp, #0]
 80058cc:	fa0f fc8c 	sxth.w	ip, ip
 80058d0:	4490      	add	r8, r2
 80058d2:	4563      	cmp	r3, ip
 80058d4:	fa1f f888 	uxth.w	r8, r8
 80058d8:	46e6      	mov	lr, ip
 80058da:	dcb6      	bgt.n	800584a <pool_func_mp_array_f32+0xae>
 80058dc:	9b08      	ldr	r3, [sp, #32]
 80058de:	9904      	ldr	r1, [sp, #16]
 80058e0:	3301      	adds	r3, #1
 80058e2:	b21a      	sxth	r2, r3
 80058e4:	9b07      	ldr	r3, [sp, #28]
 80058e6:	9208      	str	r2, [sp, #32]
 80058e8:	440b      	add	r3, r1
 80058ea:	9902      	ldr	r1, [sp, #8]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	4291      	cmp	r1, r2
 80058f0:	9307      	str	r3, [sp, #28]
 80058f2:	4613      	mov	r3, r2
 80058f4:	dc99      	bgt.n	800582a <pool_func_mp_array_f32+0x8e>
 80058f6:	b013      	add	sp, #76	; 0x4c
 80058f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fc:	eba6 000b 	sub.w	r0, r6, fp
 8005900:	9e02      	ldr	r6, [sp, #8]
 8005902:	9d04      	ldr	r5, [sp, #16]
 8005904:	3801      	subs	r0, #1
 8005906:	1e71      	subs	r1, r6, #1
 8005908:	fb11 0105 	smlabb	r1, r1, r5, r0
 800590c:	0409      	lsls	r1, r1, #16
 800590e:	f57f af72 	bpl.w	80057f6 <pool_func_mp_array_f32+0x5a>
 8005912:	2e00      	cmp	r6, #0
 8005914:	d0ef      	beq.n	80058f6 <pool_func_mp_array_f32+0x15a>
 8005916:	9b00      	ldr	r3, [sp, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ec      	beq.n	80058f6 <pool_func_mp_array_f32+0x15a>
 800591c:	f1b8 0f00 	cmp.w	r8, #0
 8005920:	d0e9      	beq.n	80058f6 <pool_func_mp_array_f32+0x15a>
 8005922:	f1b8 0f01 	cmp.w	r8, #1
 8005926:	f040 80f3 	bne.w	8005b10 <pool_func_mp_array_f32+0x374>
 800592a:	46a3      	mov	fp, r4
 800592c:	9407      	str	r4, [sp, #28]
 800592e:	46a0      	mov	r8, r4
 8005930:	9b00      	ldr	r3, [sp, #0]
 8005932:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005936:	fb03 f308 	mul.w	r3, r3, r8
 800593a:	2600      	movs	r6, #0
 800593c:	9309      	str	r3, [sp, #36]	; 0x24
 800593e:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 8005942:	fa0f f38b 	sxth.w	r3, fp
 8005946:	9308      	str	r3, [sp, #32]
 8005948:	46b4      	mov	ip, r6
 800594a:	4637      	mov	r7, r6
 800594c:	9c08      	ldr	r4, [sp, #32]
 800594e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005950:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8005b08 <pool_func_mp_array_f32+0x36c>
 8005954:	4544      	cmp	r4, r8
 8005956:	441f      	add	r7, r3
 8005958:	b235      	sxth	r5, r6
 800595a:	fa0f f08e 	sxth.w	r0, lr
 800595e:	da17      	bge.n	8005990 <pool_func_mp_array_f32+0x1f4>
 8005960:	4285      	cmp	r5, r0
 8005962:	da11      	bge.n	8005988 <pool_func_mp_array_f32+0x1ec>
 8005964:	fb04 5209 	mla	r2, r4, r9, r5
 8005968:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800596c:	462b      	mov	r3, r5
 800596e:	ecb2 7a01 	vldmia	r2!, {s14}
 8005972:	3301      	adds	r3, #1
 8005974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597c:	b219      	sxth	r1, r3
 800597e:	bfb8      	it	lt
 8005980:	eef0 7a47 	vmovlt.f32	s15, s14
 8005984:	4281      	cmp	r1, r0
 8005986:	dbf2      	blt.n	800596e <pool_func_mp_array_f32+0x1d2>
 8005988:	3401      	adds	r4, #1
 800598a:	b224      	sxth	r4, r4
 800598c:	4544      	cmp	r4, r8
 800598e:	dbe7      	blt.n	8005960 <pool_func_mp_array_f32+0x1c4>
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005996:	9b06      	ldr	r3, [sp, #24]
 8005998:	edc7 7a00 	vstr	s15, [r7]
 800599c:	449e      	add	lr, r3
 800599e:	441e      	add	r6, r3
 80059a0:	f10c 0c01 	add.w	ip, ip, #1
 80059a4:	9b00      	ldr	r3, [sp, #0]
 80059a6:	fa0f fc8c 	sxth.w	ip, ip
 80059aa:	4563      	cmp	r3, ip
 80059ac:	fa1f fe8e 	uxth.w	lr, lr
 80059b0:	b2b6      	uxth	r6, r6
 80059b2:	4667      	mov	r7, ip
 80059b4:	dcca      	bgt.n	800594c <pool_func_mp_array_f32+0x1b0>
 80059b6:	9b07      	ldr	r3, [sp, #28]
 80059b8:	9904      	ldr	r1, [sp, #16]
 80059ba:	3301      	adds	r3, #1
 80059bc:	b21a      	sxth	r2, r3
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	9207      	str	r2, [sp, #28]
 80059c2:	440b      	add	r3, r1
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	9b02      	ldr	r3, [sp, #8]
 80059ca:	448b      	add	fp, r1
 80059cc:	4293      	cmp	r3, r2
 80059ce:	fa1f fb8b 	uxth.w	fp, fp
 80059d2:	4690      	mov	r8, r2
 80059d4:	dcac      	bgt.n	8005930 <pool_func_mp_array_f32+0x194>
 80059d6:	e78e      	b.n	80058f6 <pool_func_mp_array_f32+0x15a>
 80059d8:	1a88      	subs	r0, r1, r2
 80059da:	9905      	ldr	r1, [sp, #20]
 80059dc:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80059e0:	1ac9      	subs	r1, r1, r3
 80059e2:	4252      	negs	r2, r2
 80059e4:	425b      	negs	r3, r3
 80059e6:	b292      	uxth	r2, r2
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	b280      	uxth	r0, r0
 80059ec:	9208      	str	r2, [sp, #32]
 80059ee:	9311      	str	r3, [sp, #68]	; 0x44
 80059f0:	b28a      	uxth	r2, r1
 80059f2:	2300      	movs	r3, #0
 80059f4:	9007      	str	r0, [sp, #28]
 80059f6:	9210      	str	r2, [sp, #64]	; 0x40
 80059f8:	930c      	str	r3, [sp, #48]	; 0x30
 80059fa:	9a00      	ldr	r2, [sp, #0]
 80059fc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8005a00:	fb03 f302 	mul.w	r3, r3, r2
 8005a04:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8005a08:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a0e:	9201      	str	r2, [sp, #4]
 8005a10:	2300      	movs	r3, #0
 8005a12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005a14:	930d      	str	r3, [sp, #52]	; 0x34
 8005a16:	9205      	str	r2, [sp, #20]
 8005a18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a1a:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8005a1e:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	fb08 f303 	mul.w	r3, r8, r3
 8005a28:	f04f 0e00 	mov.w	lr, #0
 8005a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a2e:	4676      	mov	r6, lr
 8005a30:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8005a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a36:	eddf 7a34 	vldr	s15, [pc, #208]	; 8005b08 <pool_func_mp_array_f32+0x36c>
 8005a3a:	4559      	cmp	r1, fp
 8005a3c:	da2f      	bge.n	8005a9e <pool_func_mp_array_f32+0x302>
 8005a3e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8005a42:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8005a46:	45a4      	cmp	ip, r4
 8005a48:	da23      	bge.n	8005a92 <pool_func_mp_array_f32+0x2f6>
 8005a4a:	2900      	cmp	r1, #0
 8005a4c:	fb09 f501 	mul.w	r5, r9, r1
 8005a50:	db1f      	blt.n	8005a92 <pool_func_mp_array_f32+0x2f6>
 8005a52:	4571      	cmp	r1, lr
 8005a54:	da1d      	bge.n	8005a92 <pool_func_mp_array_f32+0x2f6>
 8005a56:	f1bc 0f00 	cmp.w	ip, #0
 8005a5a:	4663      	mov	r3, ip
 8005a5c:	da05      	bge.n	8005a6a <pool_func_mp_array_f32+0x2ce>
 8005a5e:	3301      	adds	r3, #1
 8005a60:	b21b      	sxth	r3, r3
 8005a62:	429f      	cmp	r7, r3
 8005a64:	dcfb      	bgt.n	8005a5e <pool_func_mp_array_f32+0x2c2>
 8005a66:	42a3      	cmp	r3, r4
 8005a68:	da13      	bge.n	8005a92 <pool_func_mp_array_f32+0x2f6>
 8005a6a:	18ea      	adds	r2, r5, r3
 8005a6c:	fb08 6202 	mla	r2, r8, r2, r6
 8005a70:	1c58      	adds	r0, r3, #1
 8005a72:	4599      	cmp	r9, r3
 8005a74:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8005a78:	b203      	sxth	r3, r0
 8005a7a:	dd08      	ble.n	8005a8e <pool_func_mp_array_f32+0x2f2>
 8005a7c:	ed92 7a00 	vldr	s14, [r2]
 8005a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a88:	bfb8      	it	lt
 8005a8a:	eef0 7a47 	vmovlt.f32	s15, s14
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	dbeb      	blt.n	8005a6a <pool_func_mp_array_f32+0x2ce>
 8005a92:	3101      	adds	r1, #1
 8005a94:	b209      	sxth	r1, r1
 8005a96:	4559      	cmp	r1, fp
 8005a98:	dbd5      	blt.n	8005a46 <pool_func_mp_array_f32+0x2aa>
 8005a9a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8005a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa0:	9a03      	ldr	r2, [sp, #12]
 8005aa2:	f10e 0e01 	add.w	lr, lr, #1
 8005aa6:	4433      	add	r3, r6
 8005aa8:	fa0f fe8e 	sxth.w	lr, lr
 8005aac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ab0:	45c6      	cmp	lr, r8
 8005ab2:	edc3 7a00 	vstr	s15, [r3]
 8005ab6:	4676      	mov	r6, lr
 8005ab8:	dbbc      	blt.n	8005a34 <pool_func_mp_array_f32+0x298>
 8005aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005abc:	9a01      	ldr	r2, [sp, #4]
 8005abe:	9806      	ldr	r0, [sp, #24]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	4402      	add	r2, r0
 8005ac4:	b219      	sxth	r1, r3
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	9b05      	ldr	r3, [sp, #20]
 8005aca:	9201      	str	r2, [sp, #4]
 8005acc:	9a00      	ldr	r2, [sp, #0]
 8005ace:	910d      	str	r1, [sp, #52]	; 0x34
 8005ad0:	4403      	add	r3, r0
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	428a      	cmp	r2, r1
 8005ad6:	9305      	str	r3, [sp, #20]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	dc9d      	bgt.n	8005a18 <pool_func_mp_array_f32+0x27c>
 8005adc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ade:	9a07      	ldr	r2, [sp, #28]
 8005ae0:	9804      	ldr	r0, [sp, #16]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	4402      	add	r2, r0
 8005ae6:	b219      	sxth	r1, r3
 8005ae8:	b292      	uxth	r2, r2
 8005aea:	9b08      	ldr	r3, [sp, #32]
 8005aec:	9207      	str	r2, [sp, #28]
 8005aee:	9a02      	ldr	r2, [sp, #8]
 8005af0:	910c      	str	r1, [sp, #48]	; 0x30
 8005af2:	4403      	add	r3, r0
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	428a      	cmp	r2, r1
 8005af8:	9308      	str	r3, [sp, #32]
 8005afa:	460b      	mov	r3, r1
 8005afc:	f73f af7d 	bgt.w	80059fa <pool_func_mp_array_f32+0x25e>
 8005b00:	b013      	add	sp, #76	; 0x4c
 8005b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b06:	bf00      	nop
 8005b08:	cf000000 	.word	0xcf000000
 8005b0c:	cf000000 	.word	0xcf000000
 8005b10:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 8005b14:	46a4      	mov	ip, r4
 8005b16:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 8005b1a:	9407      	str	r4, [sp, #28]
 8005b1c:	4623      	mov	r3, r4
 8005b1e:	9a00      	ldr	r2, [sp, #0]
 8005b20:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005b24:	fb03 f302 	mul.w	r3, r3, r2
 8005b28:	930a      	str	r3, [sp, #40]	; 0x28
 8005b2a:	fa0f f38c 	sxth.w	r3, ip
 8005b2e:	2400      	movs	r4, #0
 8005b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b32:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005b36:	9308      	str	r3, [sp, #32]
 8005b38:	4627      	mov	r7, r4
 8005b3a:	4623      	mov	r3, r4
 8005b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b3e:	4413      	add	r3, r2
 8005b40:	fb08 f303 	mul.w	r3, r8, r3
 8005b44:	2600      	movs	r6, #0
 8005b46:	9309      	str	r3, [sp, #36]	; 0x24
 8005b48:	fa0f fa84 	sxth.w	sl, r4
 8005b4c:	fa0f f08e 	sxth.w	r0, lr
 8005b50:	4635      	mov	r5, r6
 8005b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b54:	9a08      	ldr	r2, [sp, #32]
 8005b56:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8005b0c <pool_func_mp_array_f32+0x370>
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	da20      	bge.n	8005ba0 <pool_func_mp_array_f32+0x404>
 8005b5e:	4699      	mov	r9, r3
 8005b60:	4582      	cmp	sl, r0
 8005b62:	da16      	bge.n	8005b92 <pool_func_mp_array_f32+0x3f6>
 8005b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b68:	fb03 a309 	mla	r3, r3, r9, sl
 8005b6c:	fb08 5303 	mla	r3, r8, r3, r5
 8005b70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b74:	4652      	mov	r2, sl
 8005b76:	ed93 7a00 	vldr	s14, [r3]
 8005b7a:	3201      	adds	r2, #1
 8005b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b84:	b211      	sxth	r1, r2
 8005b86:	bfb8      	it	lt
 8005b88:	eef0 7a47 	vmovlt.f32	s15, s14
 8005b8c:	4281      	cmp	r1, r0
 8005b8e:	445b      	add	r3, fp
 8005b90:	dbf1      	blt.n	8005b76 <pool_func_mp_array_f32+0x3da>
 8005b92:	9b08      	ldr	r3, [sp, #32]
 8005b94:	f109 0901 	add.w	r9, r9, #1
 8005b98:	fa0f f989 	sxth.w	r9, r9
 8005b9c:	4599      	cmp	r9, r3
 8005b9e:	dbdf      	blt.n	8005b60 <pool_func_mp_array_f32+0x3c4>
 8005ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba2:	9a03      	ldr	r2, [sp, #12]
 8005ba4:	3601      	adds	r6, #1
 8005ba6:	442b      	add	r3, r5
 8005ba8:	b236      	sxth	r6, r6
 8005baa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005bae:	4546      	cmp	r6, r8
 8005bb0:	edc3 7a00 	vstr	s15, [r3]
 8005bb4:	4635      	mov	r5, r6
 8005bb6:	dbcc      	blt.n	8005b52 <pool_func_mp_array_f32+0x3b6>
 8005bb8:	9b06      	ldr	r3, [sp, #24]
 8005bba:	9a00      	ldr	r2, [sp, #0]
 8005bbc:	3701      	adds	r7, #1
 8005bbe:	b23f      	sxth	r7, r7
 8005bc0:	449e      	add	lr, r3
 8005bc2:	441c      	add	r4, r3
 8005bc4:	42ba      	cmp	r2, r7
 8005bc6:	fa1f fe8e 	uxth.w	lr, lr
 8005bca:	b2a4      	uxth	r4, r4
 8005bcc:	463b      	mov	r3, r7
 8005bce:	dcb5      	bgt.n	8005b3c <pool_func_mp_array_f32+0x3a0>
 8005bd0:	9b07      	ldr	r3, [sp, #28]
 8005bd2:	9904      	ldr	r1, [sp, #16]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	b21a      	sxth	r2, r3
 8005bd8:	9b01      	ldr	r3, [sp, #4]
 8005bda:	9207      	str	r2, [sp, #28]
 8005bdc:	440b      	add	r3, r1
 8005bde:	448c      	add	ip, r1
 8005be0:	9902      	ldr	r1, [sp, #8]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	4291      	cmp	r1, r2
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	fa1f fc8c 	uxth.w	ip, ip
 8005bec:	4613      	mov	r3, r2
 8005bee:	dc96      	bgt.n	8005b1e <pool_func_mp_array_f32+0x382>
 8005bf0:	e681      	b.n	80058f6 <pool_func_mp_array_f32+0x15a>
 8005bf2:	bf00      	nop

08005bf4 <nl_func_relu_array_f32>:
 8005bf4:	b430      	push	{r4, r5}
 8005bf6:	698c      	ldr	r4, [r1, #24]
 8005bf8:	6981      	ldr	r1, [r0, #24]
 8005bfa:	68a5      	ldr	r5, [r4, #8]
 8005bfc:	6889      	ldr	r1, [r1, #8]
 8005bfe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005c02:	3a01      	subs	r2, #1
 8005c04:	0093      	lsls	r3, r2, #2
 8005c06:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8005c0a:	4295      	cmp	r5, r2
 8005c0c:	d814      	bhi.n	8005c38 <nl_func_relu_array_f32+0x44>
 8005c0e:	1d18      	adds	r0, r3, #4
 8005c10:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005c3c <nl_func_relu_array_f32+0x48>
 8005c14:	1d13      	adds	r3, r2, #4
 8005c16:	4401      	add	r1, r0
 8005c18:	461a      	mov	r2, r3
 8005c1a:	ed73 7a01 	vldmdb	r3!, {s15}
 8005c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c26:	bfb8      	it	lt
 8005c28:	eef0 7a47 	vmovlt.f32	s15, s14
 8005c2c:	ed61 7a01 	vstmdb	r1!, {s15}
 8005c30:	68a0      	ldr	r0, [r4, #8]
 8005c32:	3a08      	subs	r2, #8
 8005c34:	4290      	cmp	r0, r2
 8005c36:	d9ef      	bls.n	8005c18 <nl_func_relu_array_f32+0x24>
 8005c38:	bc30      	pop	{r4, r5}
 8005c3a:	4770      	bx	lr
 8005c3c:	00000000 	.word	0x00000000

08005c40 <forward_relu>:
 8005c40:	6982      	ldr	r2, [r0, #24]
 8005c42:	8813      	ldrh	r3, [r2, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d05b      	beq.n	8005d00 <forward_relu+0xc0>
 8005c48:	6851      	ldr	r1, [r2, #4]
 8005c4a:	684a      	ldr	r2, [r1, #4]
 8005c4c:	b102      	cbz	r2, 8005c50 <forward_relu+0x10>
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	f000 8123 	beq.w	8005e9c <forward_relu+0x25c>
 8005c56:	b470      	push	{r4, r5, r6}
 8005c58:	6909      	ldr	r1, [r1, #16]
 8005c5a:	b101      	cbz	r1, 8005c5e <forward_relu+0x1e>
 8005c5c:	6809      	ldr	r1, [r1, #0]
 8005c5e:	69c6      	ldr	r6, [r0, #28]
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	f000 8097 	beq.w	8005d94 <forward_relu+0x154>
 8005c66:	6873      	ldr	r3, [r6, #4]
 8005c68:	6988      	ldr	r0, [r1, #24]
 8005c6a:	6991      	ldr	r1, [r2, #24]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	f000 80c1 	beq.w	8005df4 <forward_relu+0x1b4>
 8005c72:	6893      	ldr	r3, [r2, #8]
 8005c74:	6880      	ldr	r0, [r0, #8]
 8005c76:	688c      	ldr	r4, [r1, #8]
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	f000 80f2 	beq.w	8005e62 <forward_relu+0x222>
 8005c7e:	68d5      	ldr	r5, [r2, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005c86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005c8a:	42ab      	cmp	r3, r5
 8005c8c:	fb01 f202 	mul.w	r2, r1, r2
 8005c90:	d1f9      	bne.n	8005c86 <forward_relu+0x46>
 8005c92:	68b3      	ldr	r3, [r6, #8]
 8005c94:	ed93 7a02 	vldr	s14, [r3, #8]
 8005c98:	edd3 6a00 	vldr	s13, [r3]
 8005c9c:	ed93 6a01 	vldr	s12, [r3, #4]
 8005ca0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005ca4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005ca8:	3a01      	subs	r2, #1
 8005caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cb2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005cb6:	d425      	bmi.n	8005d04 <forward_relu+0xc4>
 8005cb8:	429c      	cmp	r4, r3
 8005cba:	d81f      	bhi.n	8005cfc <forward_relu+0xbc>
 8005cbc:	1d1a      	adds	r2, r3, #4
 8005cbe:	1d01      	adds	r1, r0, #4
 8005cc0:	e00d      	b.n	8005cde <forward_relu+0x9e>
 8005cc2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cca:	db03      	blt.n	8005cd4 <forward_relu+0x94>
 8005ccc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005cd0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005cd4:	3b08      	subs	r3, #8
 8005cd6:	429c      	cmp	r4, r3
 8005cd8:	ed61 7a01 	vstmdb	r1!, {s15}
 8005cdc:	d80e      	bhi.n	8005cfc <forward_relu+0xbc>
 8005cde:	4613      	mov	r3, r2
 8005ce0:	ed72 7a01 	vldmdb	r2!, {s15}
 8005ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cec:	d9e9      	bls.n	8005cc2 <forward_relu+0x82>
 8005cee:	3b08      	subs	r3, #8
 8005cf0:	eef0 7a47 	vmov.f32	s15, s14
 8005cf4:	429c      	cmp	r4, r3
 8005cf6:	ed61 7a01 	vstmdb	r1!, {s15}
 8005cfa:	d9f0      	bls.n	8005cde <forward_relu+0x9e>
 8005cfc:	bc70      	pop	{r4, r5, r6}
 8005cfe:	4770      	bx	lr
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	deff      	udf	#255	; 0xff
 8005d04:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0c:	d11f      	bne.n	8005d4e <forward_relu+0x10e>
 8005d0e:	429c      	cmp	r4, r3
 8005d10:	d8f4      	bhi.n	8005cfc <forward_relu+0xbc>
 8005d12:	1b1c      	subs	r4, r3, r4
 8005d14:	f024 0403 	bic.w	r4, r4, #3
 8005d18:	1d1a      	adds	r2, r3, #4
 8005d1a:	2500      	movs	r5, #0
 8005d1c:	1b1b      	subs	r3, r3, r4
 8005d1e:	1d01      	adds	r1, r0, #4
 8005d20:	ed72 7a01 	vldmdb	r2!, {s15}
 8005d24:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2c:	dc0a      	bgt.n	8005d44 <forward_relu+0x104>
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	f841 5d04 	str.w	r5, [r1, #-4]!
 8005d34:	d0e2      	beq.n	8005cfc <forward_relu+0xbc>
 8005d36:	ed72 7a01 	vldmdb	r2!, {s15}
 8005d3a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d42:	ddf4      	ble.n	8005d2e <forward_relu+0xee>
 8005d44:	429a      	cmp	r2, r3
 8005d46:	ed61 7a01 	vstmdb	r1!, {s15}
 8005d4a:	d1e9      	bne.n	8005d20 <forward_relu+0xe0>
 8005d4c:	e7d6      	b.n	8005cfc <forward_relu+0xbc>
 8005d4e:	429c      	cmp	r4, r3
 8005d50:	d8d4      	bhi.n	8005cfc <forward_relu+0xbc>
 8005d52:	1b1c      	subs	r4, r3, r4
 8005d54:	f024 0403 	bic.w	r4, r4, #3
 8005d58:	1d1a      	adds	r2, r3, #4
 8005d5a:	1d01      	adds	r1, r0, #4
 8005d5c:	1b1b      	subs	r3, r3, r4
 8005d5e:	ed72 7a01 	vldmdb	r2!, {s15}
 8005d62:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6a:	db0e      	blt.n	8005d8a <forward_relu+0x14a>
 8005d6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d70:	4293      	cmp	r3, r2
 8005d72:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005d76:	ed61 7a01 	vstmdb	r1!, {s15}
 8005d7a:	d0bf      	beq.n	8005cfc <forward_relu+0xbc>
 8005d7c:	ed72 7a01 	vldmdb	r2!, {s15}
 8005d80:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d88:	daf0      	bge.n	8005d6c <forward_relu+0x12c>
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	ed61 7a01 	vstmdb	r1!, {s15}
 8005d90:	d1e5      	bne.n	8005d5e <forward_relu+0x11e>
 8005d92:	e7b3      	b.n	8005cfc <forward_relu+0xbc>
 8005d94:	6893      	ldr	r3, [r2, #8]
 8005d96:	6989      	ldr	r1, [r1, #24]
 8005d98:	6990      	ldr	r0, [r2, #24]
 8005d9a:	6889      	ldr	r1, [r1, #8]
 8005d9c:	6884      	ldr	r4, [r0, #8]
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	d075      	beq.n	8005e8e <forward_relu+0x24e>
 8005da2:	68d5      	ldr	r5, [r2, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005daa:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8005dae:	429d      	cmp	r5, r3
 8005db0:	fb00 f202 	mul.w	r2, r0, r2
 8005db4:	d1f9      	bne.n	8005daa <forward_relu+0x16a>
 8005db6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005dc0:	4294      	cmp	r4, r2
 8005dc2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005dc6:	d899      	bhi.n	8005cfc <forward_relu+0xbc>
 8005dc8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005ea4 <forward_relu+0x264>
 8005dcc:	3204      	adds	r2, #4
 8005dce:	3104      	adds	r1, #4
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	ed72 7a01 	vldmdb	r2!, {s15}
 8005dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dde:	f1a3 0308 	sub.w	r3, r3, #8
 8005de2:	bfb8      	it	lt
 8005de4:	eef0 7a47 	vmovlt.f32	s15, s14
 8005de8:	429c      	cmp	r4, r3
 8005dea:	ed61 7a01 	vstmdb	r1!, {s15}
 8005dee:	d9ef      	bls.n	8005dd0 <forward_relu+0x190>
 8005df0:	bc70      	pop	{r4, r5, r6}
 8005df2:	4770      	bx	lr
 8005df4:	688c      	ldr	r4, [r1, #8]
 8005df6:	6891      	ldr	r1, [r2, #8]
 8005df8:	6880      	ldr	r0, [r0, #8]
 8005dfa:	0a09      	lsrs	r1, r1, #8
 8005dfc:	d049      	beq.n	8005e92 <forward_relu+0x252>
 8005dfe:	68d5      	ldr	r5, [r2, #12]
 8005e00:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005e04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005e08:	42aa      	cmp	r2, r5
 8005e0a:	fb01 f303 	mul.w	r3, r1, r3
 8005e0e:	d1f9      	bne.n	8005e04 <forward_relu+0x1c4>
 8005e10:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005e14:	3a01      	subs	r2, #1
 8005e16:	68b1      	ldr	r1, [r6, #8]
 8005e18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e1c:	429c      	cmp	r4, r3
 8005e1e:	ed91 7a00 	vldr	s14, [r1]
 8005e22:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005e26:	f63f af69 	bhi.w	8005cfc <forward_relu+0xbc>
 8005e2a:	2500      	movs	r5, #0
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	1d02      	adds	r2, r0, #4
 8005e30:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3c:	f1a3 0104 	sub.w	r1, r3, #4
 8005e40:	f1a3 0308 	sub.w	r3, r3, #8
 8005e44:	d406      	bmi.n	8005e54 <forward_relu+0x214>
 8005e46:	429c      	cmp	r4, r3
 8005e48:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005e4c:	f63f af56 	bhi.w	8005cfc <forward_relu+0xbc>
 8005e50:	460b      	mov	r3, r1
 8005e52:	e7ed      	b.n	8005e30 <forward_relu+0x1f0>
 8005e54:	429c      	cmp	r4, r3
 8005e56:	ed62 7a01 	vstmdb	r2!, {s15}
 8005e5a:	f63f af4f 	bhi.w	8005cfc <forward_relu+0xbc>
 8005e5e:	460b      	mov	r3, r1
 8005e60:	e7e6      	b.n	8005e30 <forward_relu+0x1f0>
 8005e62:	68b3      	ldr	r3, [r6, #8]
 8005e64:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e68:	edd3 6a00 	vldr	s13, [r3]
 8005e6c:	ed93 6a01 	vldr	s12, [r3, #4]
 8005e70:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e78:	d401      	bmi.n	8005e7e <forward_relu+0x23e>
 8005e7a:	4623      	mov	r3, r4
 8005e7c:	e71e      	b.n	8005cbc <forward_relu+0x7c>
 8005e7e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e86:	4623      	mov	r3, r4
 8005e88:	f47f af63 	bne.w	8005d52 <forward_relu+0x112>
 8005e8c:	e741      	b.n	8005d12 <forward_relu+0xd2>
 8005e8e:	4622      	mov	r2, r4
 8005e90:	e79a      	b.n	8005dc8 <forward_relu+0x188>
 8005e92:	68b2      	ldr	r2, [r6, #8]
 8005e94:	4623      	mov	r3, r4
 8005e96:	ed92 7a00 	vldr	s14, [r2]
 8005e9a:	e7c6      	b.n	8005e2a <forward_relu+0x1ea>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	deff      	udf	#255	; 0xff
 8005ea2:	bf00      	nop
 8005ea4:	00000000 	.word	0x00000000

08005ea8 <forward_transpose>:
 8005ea8:	6983      	ldr	r3, [r0, #24]
 8005eaa:	881a      	ldrh	r2, [r3, #0]
 8005eac:	2a00      	cmp	r2, #0
 8005eae:	d07a      	beq.n	8005fa6 <forward_transpose+0xfe>
 8005eb0:	6859      	ldr	r1, [r3, #4]
 8005eb2:	684b      	ldr	r3, [r1, #4]
 8005eb4:	b103      	cbz	r3, 8005eb8 <forward_transpose+0x10>
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2a01      	cmp	r2, #1
 8005eba:	f000 80a0 	beq.w	8005ffe <forward_transpose+0x156>
 8005ebe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec2:	690c      	ldr	r4, [r1, #16]
 8005ec4:	b08b      	sub	sp, #44	; 0x2c
 8005ec6:	b104      	cbz	r4, 8005eca <forward_transpose+0x22>
 8005ec8:	6824      	ldr	r4, [r4, #0]
 8005eca:	6a05      	ldr	r5, [r0, #32]
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	6869      	ldr	r1, [r5, #4]
 8005ed0:	691e      	ldr	r6, [r3, #16]
 8005ed2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005ed6:	9100      	str	r1, [sp, #0]
 8005ed8:	68a9      	ldr	r1, [r5, #8]
 8005eda:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005ede:	9106      	str	r1, [sp, #24]
 8005ee0:	68e9      	ldr	r1, [r5, #12]
 8005ee2:	f5b6 6fa0 	cmp.w	r6, #1280	; 0x500
 8005ee6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005eea:	9107      	str	r1, [sp, #28]
 8005eec:	d376      	bcc.n	8005fdc <forward_transpose+0x134>
 8005eee:	69c1      	ldr	r1, [r0, #28]
 8005ef0:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8005ef4:	bf2a      	itet	cs
 8005ef6:	6929      	ldrcs	r1, [r5, #16]
 8005ef8:	2104      	movcc	r1, #4
 8005efa:	0089      	lslcs	r1, r1, #2
 8005efc:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 8005f00:	5851      	ldr	r1, [r2, r1]
 8005f02:	9102      	str	r1, [sp, #8]
 8005f04:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 8005f08:	d06f      	beq.n	8005fea <forward_transpose+0x142>
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	9203      	str	r2, [sp, #12]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	68e1      	ldr	r1, [r4, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	69a3      	ldr	r3, [r4, #24]
 8005f1a:	689e      	ldr	r6, [r3, #8]
 8005f1c:	68cb      	ldr	r3, [r1, #12]
 8005f1e:	f3c2 2283 	ubfx	r2, r2, #10, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d057      	beq.n	8005fd6 <forward_transpose+0x12e>
 8005f26:	6888      	ldr	r0, [r1, #8]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9305      	str	r3, [sp, #20]
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d052      	beq.n	8005fd6 <forward_transpose+0x12e>
 8005f30:	68a5      	ldr	r5, [r4, #8]
 8005f32:	9308      	str	r3, [sp, #32]
 8005f34:	2000      	movs	r0, #0
 8005f36:	f3c5 2517 	ubfx	r5, r5, #8, #24
 8005f3a:	9004      	str	r0, [sp, #16]
 8005f3c:	4692      	mov	sl, r2
 8005f3e:	469b      	mov	fp, r3
 8005f40:	f04f 0800 	mov.w	r8, #0
 8005f44:	9309      	str	r3, [sp, #36]	; 0x24
 8005f46:	2d04      	cmp	r5, #4
 8005f48:	bf8c      	ite	hi
 8005f4a:	690b      	ldrhi	r3, [r1, #16]
 8005f4c:	2301      	movls	r3, #1
 8005f4e:	4598      	cmp	r8, r3
 8005f50:	d22b      	bcs.n	8005faa <forward_transpose+0x102>
 8005f52:	2d05      	cmp	r5, #5
 8005f54:	46d9      	mov	r9, fp
 8005f56:	f04f 0700 	mov.w	r7, #0
 8005f5a:	d91d      	bls.n	8005f98 <forward_transpose+0xf0>
 8005f5c:	694a      	ldr	r2, [r1, #20]
 8005f5e:	4297      	cmp	r7, r2
 8005f60:	d21c      	bcs.n	8005f9c <forward_transpose+0xf4>
 8005f62:	684a      	ldr	r2, [r1, #4]
 8005f64:	b192      	cbz	r2, 8005f8c <forward_transpose+0xe4>
 8005f66:	2500      	movs	r5, #0
 8005f68:	9b00      	ldr	r3, [sp, #0]
 8005f6a:	fb03 9105 	mla	r1, r3, r5, r9
 8005f6e:	9b01      	ldr	r3, [sp, #4]
 8005f70:	4630      	mov	r0, r6
 8005f72:	4419      	add	r1, r3
 8005f74:	4652      	mov	r2, sl
 8005f76:	f000 fae7 	bl	8006548 <memcpy>
 8005f7a:	68e1      	ldr	r1, [r4, #12]
 8005f7c:	684b      	ldr	r3, [r1, #4]
 8005f7e:	3501      	adds	r5, #1
 8005f80:	429d      	cmp	r5, r3
 8005f82:	4456      	add	r6, sl
 8005f84:	d3f0      	bcc.n	8005f68 <forward_transpose+0xc0>
 8005f86:	68a3      	ldr	r3, [r4, #8]
 8005f88:	f3c3 2517 	ubfx	r5, r3, #8, #24
 8005f8c:	9b03      	ldr	r3, [sp, #12]
 8005f8e:	2d05      	cmp	r5, #5
 8005f90:	f107 0701 	add.w	r7, r7, #1
 8005f94:	4499      	add	r9, r3
 8005f96:	d8e1      	bhi.n	8005f5c <forward_transpose+0xb4>
 8005f98:	2f00      	cmp	r7, #0
 8005f9a:	d0e2      	beq.n	8005f62 <forward_transpose+0xba>
 8005f9c:	9b02      	ldr	r3, [sp, #8]
 8005f9e:	f108 0801 	add.w	r8, r8, #1
 8005fa2:	449b      	add	fp, r3
 8005fa4:	e7cf      	b.n	8005f46 <forward_transpose+0x9e>
 8005fa6:	6853      	ldr	r3, [r2, #4]
 8005fa8:	deff      	udf	#255	; 0xff
 8005faa:	9806      	ldr	r0, [sp, #24]
 8005fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fae:	9a04      	ldr	r2, [sp, #16]
 8005fb0:	4403      	add	r3, r0
 8005fb2:	6888      	ldr	r0, [r1, #8]
 8005fb4:	3201      	adds	r2, #1
 8005fb6:	4282      	cmp	r2, r0
 8005fb8:	9204      	str	r2, [sp, #16]
 8005fba:	d3c0      	bcc.n	8005f3e <forward_transpose+0x96>
 8005fbc:	9d05      	ldr	r5, [sp, #20]
 8005fbe:	9b08      	ldr	r3, [sp, #32]
 8005fc0:	3501      	adds	r5, #1
 8005fc2:	462f      	mov	r7, r5
 8005fc4:	9505      	str	r5, [sp, #20]
 8005fc6:	68cd      	ldr	r5, [r1, #12]
 8005fc8:	42af      	cmp	r7, r5
 8005fca:	4652      	mov	r2, sl
 8005fcc:	d203      	bcs.n	8005fd6 <forward_transpose+0x12e>
 8005fce:	9d07      	ldr	r5, [sp, #28]
 8005fd0:	442b      	add	r3, r5
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d1ac      	bne.n	8005f30 <forward_transpose+0x88>
 8005fd6:	b00b      	add	sp, #44	; 0x2c
 8005fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fdc:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 8005fe6:	9102      	str	r1, [sp, #8]
 8005fe8:	d18f      	bne.n	8005f0a <forward_transpose+0x62>
 8005fea:	69c1      	ldr	r1, [r0, #28]
 8005fec:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8005ff0:	bf2a      	itet	cs
 8005ff2:	6969      	ldrcs	r1, [r5, #20]
 8005ff4:	2104      	movcc	r1, #4
 8005ff6:	0089      	lslcs	r1, r1, #2
 8005ff8:	5852      	ldr	r2, [r2, r1]
 8005ffa:	9203      	str	r2, [sp, #12]
 8005ffc:	e787      	b.n	8005f0e <forward_transpose+0x66>
 8005ffe:	2300      	movs	r3, #0
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	deff      	udf	#255	; 0xff

08006004 <ai_check_custom_types>:
 8006004:	b082      	sub	sp, #8
 8006006:	4b13      	ldr	r3, [pc, #76]	; (8006054 <ai_check_custom_types+0x50>)
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	b118      	cbz	r0, 8006014 <ai_check_custom_types+0x10>
 800600c:	7803      	ldrb	r3, [r0, #0]
 800600e:	2b03      	cmp	r3, #3
 8006010:	d002      	beq.n	8006018 <ai_check_custom_types+0x14>
 8006012:	2000      	movs	r0, #0
 8006014:	b002      	add	sp, #8
 8006016:	4770      	bx	lr
 8006018:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800601c:	4293      	cmp	r3, r2
 800601e:	d004      	beq.n	800602a <ai_check_custom_types+0x26>
 8006020:	2001      	movs	r0, #1
 8006022:	f080 0001 	eor.w	r0, r0, #1
 8006026:	b002      	add	sp, #8
 8006028:	4770      	bx	lr
 800602a:	7842      	ldrb	r2, [r0, #1]
 800602c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006030:	429a      	cmp	r2, r3
 8006032:	f100 0001 	add.w	r0, r0, #1
 8006036:	d1f3      	bne.n	8006020 <ai_check_custom_types+0x1c>
 8006038:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800603c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006040:	429a      	cmp	r2, r3
 8006042:	d1ed      	bne.n	8006020 <ai_check_custom_types+0x1c>
 8006044:	7842      	ldrb	r2, [r0, #1]
 8006046:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800604a:	429a      	cmp	r2, r3
 800604c:	d1e8      	bne.n	8006020 <ai_check_custom_types+0x1c>
 800604e:	2000      	movs	r0, #0
 8006050:	e7e7      	b.n	8006022 <ai_check_custom_types+0x1e>
 8006052:	bf00      	nop
 8006054:	84048403 	.word	0x84048403

08006058 <ai_layers_init_all>:
 8006058:	4601      	mov	r1, r0
 800605a:	2000      	movs	r0, #0
 800605c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800605e:	b143      	cbz	r3, 8006072 <ai_layers_init_all+0x1a>
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	60d9      	str	r1, [r3, #12]
 8006064:	429a      	cmp	r2, r3
 8006066:	f100 0001 	add.w	r0, r0, #1
 800606a:	d002      	beq.n	8006072 <ai_layers_init_all+0x1a>
 800606c:	b10a      	cbz	r2, 8006072 <ai_layers_init_all+0x1a>
 800606e:	4613      	mov	r3, r2
 8006070:	e7f5      	b.n	800605e <ai_layers_init_all+0x6>
 8006072:	4770      	bx	lr

08006074 <ai_layers_post_init_all>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006078:	2500      	movs	r5, #0
 800607a:	b16c      	cbz	r4, 8006098 <ai_layers_post_init_all+0x24>
 800607c:	6863      	ldr	r3, [r4, #4]
 800607e:	07db      	lsls	r3, r3, #31
 8006080:	d504      	bpl.n	800608c <ai_layers_post_init_all+0x18>
 8006082:	6a23      	ldr	r3, [r4, #32]
 8006084:	4620      	mov	r0, r4
 8006086:	b10b      	cbz	r3, 800608c <ai_layers_post_init_all+0x18>
 8006088:	4798      	blx	r3
 800608a:	3501      	adds	r5, #1
 800608c:	6923      	ldr	r3, [r4, #16]
 800608e:	42a3      	cmp	r3, r4
 8006090:	d002      	beq.n	8006098 <ai_layers_post_init_all+0x24>
 8006092:	b10b      	cbz	r3, 8006098 <ai_layers_post_init_all+0x24>
 8006094:	461c      	mov	r4, r3
 8006096:	e7f0      	b.n	800607a <ai_layers_post_init_all+0x6>
 8006098:	4628      	mov	r0, r5
 800609a:	bd38      	pop	{r3, r4, r5, pc}

0800609c <ai_layers_forward_all>:
 800609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a0:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80060a4:	4604      	mov	r4, r0
 80060a6:	f1b8 0f00 	cmp.w	r8, #0
 80060aa:	d02b      	beq.n	8006104 <ai_layers_forward_all+0x68>
 80060ac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80060ae:	6381      	str	r1, [r0, #56]	; 0x38
 80060b0:	b321      	cbz	r1, 80060fc <ai_layers_forward_all+0x60>
 80060b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80060b4:	2001      	movs	r0, #1
 80060b6:	47c0      	blx	r8
 80060b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80060ba:	b1fe      	cbz	r6, 80060fc <ai_layers_forward_all+0x60>
 80060bc:	2700      	movs	r7, #0
 80060be:	4631      	mov	r1, r6
 80060c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80060c2:	2002      	movs	r0, #2
 80060c4:	47c0      	blx	r8
 80060c6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80060c8:	4628      	mov	r0, r5
 80060ca:	696b      	ldr	r3, [r5, #20]
 80060cc:	4798      	blx	r3
 80060ce:	692e      	ldr	r6, [r5, #16]
 80060d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80060d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80060d4:	42b5      	cmp	r5, r6
 80060d6:	f04f 0003 	mov.w	r0, #3
 80060da:	d007      	beq.n	80060ec <ai_layers_forward_all+0x50>
 80060dc:	47c0      	blx	r8
 80060de:	3701      	adds	r7, #1
 80060e0:	63a6      	str	r6, [r4, #56]	; 0x38
 80060e2:	2e00      	cmp	r6, #0
 80060e4:	d1eb      	bne.n	80060be <ai_layers_forward_all+0x22>
 80060e6:	4638      	mov	r0, r7
 80060e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ec:	2003      	movs	r0, #3
 80060ee:	47c0      	blx	r8
 80060f0:	2300      	movs	r3, #0
 80060f2:	3701      	adds	r7, #1
 80060f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80060f6:	4638      	mov	r0, r7
 80060f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060fc:	2700      	movs	r7, #0
 80060fe:	4638      	mov	r0, r7
 8006100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006104:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006106:	6385      	str	r5, [r0, #56]	; 0x38
 8006108:	2d00      	cmp	r5, #0
 800610a:	d0f7      	beq.n	80060fc <ai_layers_forward_all+0x60>
 800610c:	4647      	mov	r7, r8
 800610e:	696b      	ldr	r3, [r5, #20]
 8006110:	4628      	mov	r0, r5
 8006112:	4798      	blx	r3
 8006114:	462b      	mov	r3, r5
 8006116:	692d      	ldr	r5, [r5, #16]
 8006118:	429d      	cmp	r5, r3
 800611a:	d004      	beq.n	8006126 <ai_layers_forward_all+0x8a>
 800611c:	63a5      	str	r5, [r4, #56]	; 0x38
 800611e:	3701      	adds	r7, #1
 8006120:	2d00      	cmp	r5, #0
 8006122:	d1f4      	bne.n	800610e <ai_layers_forward_all+0x72>
 8006124:	e7df      	b.n	80060e6 <ai_layers_forward_all+0x4a>
 8006126:	2300      	movs	r3, #0
 8006128:	63a3      	str	r3, [r4, #56]	; 0x38
 800612a:	3701      	adds	r7, #1
 800612c:	e7db      	b.n	80060e6 <ai_layers_forward_all+0x4a>
 800612e:	bf00      	nop

08006130 <lite_dense_if32of32wf32>:
 8006130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006134:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8006138:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800613c:	4287      	cmp	r7, r0
 800613e:	f240 8106 	bls.w	800634e <lite_dense_if32of32wf32+0x21e>
 8006142:	f1a6 0810 	sub.w	r8, r6, #16
 8006146:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800614a:	f108 0801 	add.w	r8, r8, #1
 800614e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8006152:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8006156:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800615a:	4605      	mov	r5, r0
 800615c:	f006 0a0f 	and.w	sl, r6, #15
 8006160:	2e0f      	cmp	r6, #15
 8006162:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006374 <lite_dense_if32of32wf32+0x244>
 8006166:	f240 8101 	bls.w	800636c <lite_dense_if32of32wf32+0x23c>
 800616a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800616e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8006172:	46b6      	mov	lr, r6
 8006174:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8006178:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800617c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8006180:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8006184:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8006188:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800618c:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8006190:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8006194:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8006198:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800619c:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80061a0:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80061a4:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80061a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80061ac:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80061b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80061b4:	f1ae 0e10 	sub.w	lr, lr, #16
 80061b8:	f1be 0f0f 	cmp.w	lr, #15
 80061bc:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 80061c0:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 80061c4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80061c8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80061cc:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80061d0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80061d4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80061d8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80061dc:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 80061e0:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 80061e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80061e8:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 80061ec:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 80061f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80061f4:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 80061f8:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 80061fc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006200:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8006204:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8006208:	eee4 7a24 	vfma.f32	s15, s8, s9
 800620c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8006210:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8006214:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006218:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800621c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8006220:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006224:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8006228:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800622c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006230:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006234:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006238:	eee4 7a24 	vfma.f32	s15, s8, s9
 800623c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006240:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006248:	d894      	bhi.n	8006174 <lite_dense_if32of32wf32+0x44>
 800624a:	eb02 0e0b 	add.w	lr, r2, fp
 800624e:	4654      	mov	r4, sl
 8006250:	46c4      	mov	ip, r8
 8006252:	2c00      	cmp	r4, #0
 8006254:	d075      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 8006256:	eddc 6a00 	vldr	s13, [ip]
 800625a:	edde 7a00 	vldr	s15, [lr]
 800625e:	2c01      	cmp	r4, #1
 8006260:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006264:	d06d      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 8006266:	eddc 6a01 	vldr	s13, [ip, #4]
 800626a:	edde 7a01 	vldr	s15, [lr, #4]
 800626e:	2c02      	cmp	r4, #2
 8006270:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006274:	d065      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 8006276:	eddc 6a02 	vldr	s13, [ip, #8]
 800627a:	edde 7a02 	vldr	s15, [lr, #8]
 800627e:	2c03      	cmp	r4, #3
 8006280:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006284:	d05d      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 8006286:	eddc 6a03 	vldr	s13, [ip, #12]
 800628a:	edde 7a03 	vldr	s15, [lr, #12]
 800628e:	2c04      	cmp	r4, #4
 8006290:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006294:	d055      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 8006296:	eddc 6a04 	vldr	s13, [ip, #16]
 800629a:	edde 7a04 	vldr	s15, [lr, #16]
 800629e:	2c05      	cmp	r4, #5
 80062a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062a4:	d04d      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 80062a6:	eddc 6a05 	vldr	s13, [ip, #20]
 80062aa:	edde 7a05 	vldr	s15, [lr, #20]
 80062ae:	2c06      	cmp	r4, #6
 80062b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062b4:	d045      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 80062b6:	eddc 6a06 	vldr	s13, [ip, #24]
 80062ba:	edde 7a06 	vldr	s15, [lr, #24]
 80062be:	2c07      	cmp	r4, #7
 80062c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062c4:	d03d      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 80062c6:	eddc 6a07 	vldr	s13, [ip, #28]
 80062ca:	edde 7a07 	vldr	s15, [lr, #28]
 80062ce:	2c08      	cmp	r4, #8
 80062d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062d4:	d035      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 80062d6:	eddc 6a08 	vldr	s13, [ip, #32]
 80062da:	edde 7a08 	vldr	s15, [lr, #32]
 80062de:	2c09      	cmp	r4, #9
 80062e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062e4:	d02d      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 80062e6:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80062ea:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80062ee:	2c0a      	cmp	r4, #10
 80062f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062f4:	d025      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 80062f6:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80062fa:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80062fe:	2c0b      	cmp	r4, #11
 8006300:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006304:	d01d      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 8006306:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800630a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800630e:	2c0c      	cmp	r4, #12
 8006310:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006314:	d015      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 8006316:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800631a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800631e:	3c0d      	subs	r4, #13
 8006320:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006324:	d00d      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 8006326:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800632a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800632e:	2c01      	cmp	r4, #1
 8006330:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006334:	d005      	beq.n	8006342 <lite_dense_if32of32wf32+0x212>
 8006336:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800633a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800633e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006342:	444a      	add	r2, r9
 8006344:	eca5 7a01 	vstmia	r5!, {s14}
 8006348:	42af      	cmp	r7, r5
 800634a:	f63f af09 	bhi.w	8006160 <lite_dense_if32of32wf32+0x30>
 800634e:	b15b      	cbz	r3, 8006368 <lite_dense_if32of32wf32+0x238>
 8006350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006352:	b14a      	cbz	r2, 8006368 <lite_dense_if32of32wf32+0x238>
 8006354:	edd0 7a00 	vldr	s15, [r0]
 8006358:	ecb3 7a01 	vldmia	r3!, {s14}
 800635c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006360:	ece0 7a01 	vstmia	r0!, {s15}
 8006364:	4287      	cmp	r7, r0
 8006366:	d1f5      	bne.n	8006354 <lite_dense_if32of32wf32+0x224>
 8006368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636c:	4634      	mov	r4, r6
 800636e:	4696      	mov	lr, r2
 8006370:	468c      	mov	ip, r1
 8006372:	e76e      	b.n	8006252 <lite_dense_if32of32wf32+0x122>
 8006374:	00000000 	.word	0x00000000

08006378 <ai_version_get>:
 8006378:	0212      	lsls	r2, r2, #8
 800637a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800637e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006382:	4770      	bx	lr

08006384 <get_tensor_byte_size>:
 8006384:	b410      	push	{r4}
 8006386:	6983      	ldr	r3, [r0, #24]
 8006388:	68c4      	ldr	r4, [r0, #12]
 800638a:	6941      	ldr	r1, [r0, #20]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68e0      	ldr	r0, [r4, #12]
 8006390:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <get_tensor_byte_size+0x2c>)
 8006392:	68c9      	ldr	r1, [r1, #12]
 8006394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006398:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800639c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80063a0:	fb01 f000 	mul.w	r0, r1, r0
 80063a4:	4293      	cmp	r3, r2
 80063a6:	bf04      	itt	eq
 80063a8:	3007      	addeq	r0, #7
 80063aa:	08c0      	lsreq	r0, r0, #3
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	000400c0 	.word	0x000400c0

080063b4 <ai_array_to_buffer_fmt>:
 80063b4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d050      	beq.n	800645e <ai_array_to_buffer_fmt+0xaa>
 80063bc:	4b2a      	ldr	r3, [pc, #168]	; (8006468 <ai_array_to_buffer_fmt+0xb4>)
 80063be:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d00b      	beq.n	80063de <ai_array_to_buffer_fmt+0x2a>
 80063c6:	dc1c      	bgt.n	8006402 <ai_array_to_buffer_fmt+0x4e>
 80063c8:	4b28      	ldr	r3, [pc, #160]	; (800646c <ai_array_to_buffer_fmt+0xb8>)
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d007      	beq.n	80063de <ai_array_to_buffer_fmt+0x2a>
 80063ce:	dd0b      	ble.n	80063e8 <ai_array_to_buffer_fmt+0x34>
 80063d0:	4b27      	ldr	r3, [pc, #156]	; (8006470 <ai_array_to_buffer_fmt+0xbc>)
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d003      	beq.n	80063de <ai_array_to_buffer_fmt+0x2a>
 80063d6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80063da:	429a      	cmp	r2, r3
 80063dc:	d131      	bne.n	8006442 <ai_array_to_buffer_fmt+0x8e>
 80063de:	4613      	mov	r3, r2
 80063e0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80063e4:	4318      	orrs	r0, r3
 80063e6:	4770      	bx	lr
 80063e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d0f6      	beq.n	80063de <ai_array_to_buffer_fmt+0x2a>
 80063f0:	dd2c      	ble.n	800644c <ai_array_to_buffer_fmt+0x98>
 80063f2:	4b20      	ldr	r3, [pc, #128]	; (8006474 <ai_array_to_buffer_fmt+0xc0>)
 80063f4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80063f8:	429a      	cmp	r2, r3
 80063fa:	bf18      	it	ne
 80063fc:	2340      	movne	r3, #64	; 0x40
 80063fe:	4318      	orrs	r0, r3
 8006400:	4770      	bx	lr
 8006402:	4b1d      	ldr	r3, [pc, #116]	; (8006478 <ai_array_to_buffer_fmt+0xc4>)
 8006404:	429a      	cmp	r2, r3
 8006406:	d0ea      	beq.n	80063de <ai_array_to_buffer_fmt+0x2a>
 8006408:	dd0e      	ble.n	8006428 <ai_array_to_buffer_fmt+0x74>
 800640a:	4b1c      	ldr	r3, [pc, #112]	; (800647c <ai_array_to_buffer_fmt+0xc8>)
 800640c:	429a      	cmp	r2, r3
 800640e:	d0e6      	beq.n	80063de <ai_array_to_buffer_fmt+0x2a>
 8006410:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8006414:	429a      	cmp	r2, r3
 8006416:	d0e2      	beq.n	80063de <ai_array_to_buffer_fmt+0x2a>
 8006418:	4b19      	ldr	r3, [pc, #100]	; (8006480 <ai_array_to_buffer_fmt+0xcc>)
 800641a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800641e:	429a      	cmp	r2, r3
 8006420:	bf18      	it	ne
 8006422:	2340      	movne	r3, #64	; 0x40
 8006424:	4318      	orrs	r0, r3
 8006426:	4770      	bx	lr
 8006428:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800642c:	429a      	cmp	r2, r3
 800642e:	d0d6      	beq.n	80063de <ai_array_to_buffer_fmt+0x2a>
 8006430:	3307      	adds	r3, #7
 8006432:	429a      	cmp	r2, r3
 8006434:	d0d3      	beq.n	80063de <ai_array_to_buffer_fmt+0x2a>
 8006436:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800643a:	429a      	cmp	r2, r3
 800643c:	bf18      	it	ne
 800643e:	2340      	movne	r3, #64	; 0x40
 8006440:	e7ce      	b.n	80063e0 <ai_array_to_buffer_fmt+0x2c>
 8006442:	4b10      	ldr	r3, [pc, #64]	; (8006484 <ai_array_to_buffer_fmt+0xd0>)
 8006444:	429a      	cmp	r2, r3
 8006446:	bf18      	it	ne
 8006448:	2340      	movne	r3, #64	; 0x40
 800644a:	e7c9      	b.n	80063e0 <ai_array_to_buffer_fmt+0x2c>
 800644c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006450:	429a      	cmp	r2, r3
 8006452:	d0c4      	beq.n	80063de <ai_array_to_buffer_fmt+0x2a>
 8006454:	3380      	adds	r3, #128	; 0x80
 8006456:	429a      	cmp	r2, r3
 8006458:	bf18      	it	ne
 800645a:	2340      	movne	r3, #64	; 0x40
 800645c:	e7c0      	b.n	80063e0 <ai_array_to_buffer_fmt+0x2c>
 800645e:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <ai_array_to_buffer_fmt+0xd4>)
 8006460:	4003      	ands	r3, r0
 8006462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006466:	e7bb      	b.n	80063e0 <ai_array_to_buffer_fmt+0x2c>
 8006468:	00840040 	.word	0x00840040
 800646c:	00040840 	.word	0x00040840
 8006470:	00041040 	.word	0x00041040
 8006474:	00040447 	.word	0x00040447
 8006478:	00840840 	.word	0x00840840
 800647c:	00841040 	.word	0x00841040
 8006480:	0084084f 	.word	0x0084084f
 8006484:	0004084f 	.word	0x0004084f
 8006488:	00803fff 	.word	0x00803fff

0800648c <ai_array_get_byte_size>:
 800648c:	b319      	cbz	r1, 80064d6 <ai_array_get_byte_size+0x4a>
 800648e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006492:	fb03 f101 	mul.w	r1, r3, r1
 8006496:	3107      	adds	r1, #7
 8006498:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800649c:	f021 0307 	bic.w	r3, r1, #7
 80064a0:	2a04      	cmp	r2, #4
 80064a2:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80064a6:	fa23 f101 	lsr.w	r1, r3, r1
 80064aa:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80064ae:	d00b      	beq.n	80064c8 <ai_array_get_byte_size+0x3c>
 80064b0:	2a08      	cmp	r2, #8
 80064b2:	d002      	beq.n	80064ba <ai_array_get_byte_size+0x2e>
 80064b4:	3107      	adds	r1, #7
 80064b6:	08c8      	lsrs	r0, r1, #3
 80064b8:	4770      	bx	lr
 80064ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80064be:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80064c2:	3107      	adds	r1, #7
 80064c4:	08c8      	lsrs	r0, r1, #3
 80064c6:	4770      	bx	lr
 80064c8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80064cc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80064d0:	3107      	adds	r1, #7
 80064d2:	08c8      	lsrs	r0, r1, #3
 80064d4:	4770      	bx	lr
 80064d6:	4608      	mov	r0, r1
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop

080064dc <ai_array_get_data_byte_size>:
 80064dc:	b169      	cbz	r1, 80064fa <ai_array_get_data_byte_size+0x1e>
 80064de:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80064e2:	fb02 f101 	mul.w	r1, r2, r1
 80064e6:	1dcb      	adds	r3, r1, #7
 80064e8:	f023 0307 	bic.w	r3, r3, #7
 80064ec:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80064f0:	fa23 f000 	lsr.w	r0, r3, r0
 80064f4:	3007      	adds	r0, #7
 80064f6:	08c0      	lsrs	r0, r0, #3
 80064f8:	4770      	bx	lr
 80064fa:	4608      	mov	r0, r1
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop

08006500 <__libc_init_array>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	4d0d      	ldr	r5, [pc, #52]	; (8006538 <__libc_init_array+0x38>)
 8006504:	4c0d      	ldr	r4, [pc, #52]	; (800653c <__libc_init_array+0x3c>)
 8006506:	1b64      	subs	r4, r4, r5
 8006508:	10a4      	asrs	r4, r4, #2
 800650a:	2600      	movs	r6, #0
 800650c:	42a6      	cmp	r6, r4
 800650e:	d109      	bne.n	8006524 <__libc_init_array+0x24>
 8006510:	4d0b      	ldr	r5, [pc, #44]	; (8006540 <__libc_init_array+0x40>)
 8006512:	4c0c      	ldr	r4, [pc, #48]	; (8006544 <__libc_init_array+0x44>)
 8006514:	f000 f826 	bl	8006564 <_init>
 8006518:	1b64      	subs	r4, r4, r5
 800651a:	10a4      	asrs	r4, r4, #2
 800651c:	2600      	movs	r6, #0
 800651e:	42a6      	cmp	r6, r4
 8006520:	d105      	bne.n	800652e <__libc_init_array+0x2e>
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	f855 3b04 	ldr.w	r3, [r5], #4
 8006528:	4798      	blx	r3
 800652a:	3601      	adds	r6, #1
 800652c:	e7ee      	b.n	800650c <__libc_init_array+0xc>
 800652e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006532:	4798      	blx	r3
 8006534:	3601      	adds	r6, #1
 8006536:	e7f2      	b.n	800651e <__libc_init_array+0x1e>
 8006538:	08087f18 	.word	0x08087f18
 800653c:	08087f18 	.word	0x08087f18
 8006540:	08087f18 	.word	0x08087f18
 8006544:	08087f1c 	.word	0x08087f1c

08006548 <memcpy>:
 8006548:	440a      	add	r2, r1
 800654a:	4291      	cmp	r1, r2
 800654c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006550:	d100      	bne.n	8006554 <memcpy+0xc>
 8006552:	4770      	bx	lr
 8006554:	b510      	push	{r4, lr}
 8006556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800655a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800655e:	4291      	cmp	r1, r2
 8006560:	d1f9      	bne.n	8006556 <memcpy+0xe>
 8006562:	bd10      	pop	{r4, pc}

08006564 <_init>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	bf00      	nop
 8006568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656a:	bc08      	pop	{r3}
 800656c:	469e      	mov	lr, r3
 800656e:	4770      	bx	lr

08006570 <_fini>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr
